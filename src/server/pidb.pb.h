// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pidb.proto

#ifndef PROTOBUF_INCLUDED_pidb_2eproto
#define PROTOBUF_INCLUDED_pidb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pidb_2eproto 

namespace protobuf_pidb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pidb_2eproto
namespace pidb {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class PiDBIterator;
class PiDBIteratorDefaultTypeInternal;
extern PiDBIteratorDefaultTypeInternal _PiDBIterator_default_instance_;
class PiDBOperator;
class PiDBOperatorDefaultTypeInternal;
extern PiDBOperatorDefaultTypeInternal _PiDBOperator_default_instance_;
class PiDBRequest;
class PiDBRequestDefaultTypeInternal;
extern PiDBRequestDefaultTypeInternal _PiDBRequest_default_instance_;
class PiDBResponse;
class PiDBResponseDefaultTypeInternal;
extern PiDBResponseDefaultTypeInternal _PiDBResponse_default_instance_;
class PiDBSnapshot;
class PiDBSnapshotDefaultTypeInternal;
extern PiDBSnapshotDefaultTypeInternal _PiDBSnapshot_default_instance_;
class PiDBWriteBatch;
class PiDBWriteBatchDefaultTypeInternal;
extern PiDBWriteBatchDefaultTypeInternal _PiDBWriteBatch_default_instance_;
class Success;
class SuccessDefaultTypeInternal;
extern SuccessDefaultTypeInternal _Success_default_instance_;
}  // namespace pidb
namespace google {
namespace protobuf {
template<> ::pidb::Empty* Arena::CreateMaybeMessage<::pidb::Empty>(Arena*);
template<> ::pidb::PiDBIterator* Arena::CreateMaybeMessage<::pidb::PiDBIterator>(Arena*);
template<> ::pidb::PiDBOperator* Arena::CreateMaybeMessage<::pidb::PiDBOperator>(Arena*);
template<> ::pidb::PiDBRequest* Arena::CreateMaybeMessage<::pidb::PiDBRequest>(Arena*);
template<> ::pidb::PiDBResponse* Arena::CreateMaybeMessage<::pidb::PiDBResponse>(Arena*);
template<> ::pidb::PiDBSnapshot* Arena::CreateMaybeMessage<::pidb::PiDBSnapshot>(Arena*);
template<> ::pidb::PiDBWriteBatch* Arena::CreateMaybeMessage<::pidb::PiDBWriteBatch>(Arena*);
template<> ::pidb::Success* Arena::CreateMaybeMessage<::pidb::Success>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pidb {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pidb.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Success : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.Success) */ {
 public:
  Success();
  virtual ~Success();

  Success(const Success& from);

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Success(Success&& from) noexcept
    : Success() {
    *this = ::std::move(from);
  }

  inline Success& operator=(Success&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Success& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Success* internal_default_instance() {
    return reinterpret_cast<const Success*>(
               &_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Success* other);
  friend void swap(Success& a, Success& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Success* New() const final {
    return CreateMaybeMessage<Success>(NULL);
  }

  Success* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Success>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Success& from);
  void MergeFrom(const Success& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Success* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.Success)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBSnapshot) */ {
 public:
  PiDBSnapshot();
  virtual ~PiDBSnapshot();

  PiDBSnapshot(const PiDBSnapshot& from);

  inline PiDBSnapshot& operator=(const PiDBSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBSnapshot(PiDBSnapshot&& from) noexcept
    : PiDBSnapshot() {
    *this = ::std::move(from);
  }

  inline PiDBSnapshot& operator=(PiDBSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBSnapshot* internal_default_instance() {
    return reinterpret_cast<const PiDBSnapshot*>(
               &_PiDBSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PiDBSnapshot* other);
  friend void swap(PiDBSnapshot& a, PiDBSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBSnapshot* New() const final {
    return CreateMaybeMessage<PiDBSnapshot>(NULL);
  }

  PiDBSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBSnapshot& from);
  void MergeFrom(const PiDBSnapshot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBSnapshot)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBRequest) */ {
 public:
  PiDBRequest();
  virtual ~PiDBRequest();

  PiDBRequest(const PiDBRequest& from);

  inline PiDBRequest& operator=(const PiDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBRequest(PiDBRequest&& from) noexcept
    : PiDBRequest() {
    *this = ::std::move(from);
  }

  inline PiDBRequest& operator=(PiDBRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBRequest*>(
               &_PiDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PiDBRequest* other);
  friend void swap(PiDBRequest& a, PiDBRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBRequest* New() const final {
    return CreateMaybeMessage<PiDBRequest>(NULL);
  }

  PiDBRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBRequest& from);
  void MergeFrom(const PiDBRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional .pidb.PiDBSnapshot snapshot = 3;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 3;
  private:
  const ::pidb::PiDBSnapshot& _internal_snapshot() const;
  public:
  const ::pidb::PiDBSnapshot& snapshot() const;
  ::pidb::PiDBSnapshot* release_snapshot();
  ::pidb::PiDBSnapshot* mutable_snapshot();
  void set_allocated_snapshot(::pidb::PiDBSnapshot* snapshot);

  // @@protoc_insertion_point(class_scope:pidb.PiDBRequest)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();
  void set_has_snapshot();
  void clear_has_snapshot();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::pidb::PiDBSnapshot* snapshot_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBOperator) */ {
 public:
  PiDBOperator();
  virtual ~PiDBOperator();

  PiDBOperator(const PiDBOperator& from);

  inline PiDBOperator& operator=(const PiDBOperator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBOperator(PiDBOperator&& from) noexcept
    : PiDBOperator() {
    *this = ::std::move(from);
  }

  inline PiDBOperator& operator=(PiDBOperator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBOperator* internal_default_instance() {
    return reinterpret_cast<const PiDBOperator*>(
               &_PiDBOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PiDBOperator* other);
  friend void swap(PiDBOperator& a, PiDBOperator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBOperator* New() const final {
    return CreateMaybeMessage<PiDBOperator>(NULL);
  }

  PiDBOperator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBOperator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBOperator& from);
  void MergeFrom(const PiDBOperator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required int32 op = 1;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBOperator)
 private:
  void set_has_op();
  void clear_has_op();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 op_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBWriteBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBWriteBatch) */ {
 public:
  PiDBWriteBatch();
  virtual ~PiDBWriteBatch();

  PiDBWriteBatch(const PiDBWriteBatch& from);

  inline PiDBWriteBatch& operator=(const PiDBWriteBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBWriteBatch(PiDBWriteBatch&& from) noexcept
    : PiDBWriteBatch() {
    *this = ::std::move(from);
  }

  inline PiDBWriteBatch& operator=(PiDBWriteBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBWriteBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBWriteBatch* internal_default_instance() {
    return reinterpret_cast<const PiDBWriteBatch*>(
               &_PiDBWriteBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PiDBWriteBatch* other);
  friend void swap(PiDBWriteBatch& a, PiDBWriteBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBWriteBatch* New() const final {
    return CreateMaybeMessage<PiDBWriteBatch>(NULL);
  }

  PiDBWriteBatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBWriteBatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBWriteBatch& from);
  void MergeFrom(const PiDBWriteBatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBWriteBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pidb.PiDBOperator WriteBatch = 1;
  int writebatch_size() const;
  void clear_writebatch();
  static const int kWriteBatchFieldNumber = 1;
  ::pidb::PiDBOperator* mutable_writebatch(int index);
  ::google::protobuf::RepeatedPtrField< ::pidb::PiDBOperator >*
      mutable_writebatch();
  const ::pidb::PiDBOperator& writebatch(int index) const;
  ::pidb::PiDBOperator* add_writebatch();
  const ::google::protobuf::RepeatedPtrField< ::pidb::PiDBOperator >&
      writebatch() const;

  // @@protoc_insertion_point(class_scope:pidb.PiDBWriteBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pidb::PiDBOperator > writebatch_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBResponse) */ {
 public:
  PiDBResponse();
  virtual ~PiDBResponse();

  PiDBResponse(const PiDBResponse& from);

  inline PiDBResponse& operator=(const PiDBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBResponse(PiDBResponse&& from) noexcept
    : PiDBResponse() {
    *this = ::std::move(from);
  }

  inline PiDBResponse& operator=(PiDBResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBResponse*>(
               &_PiDBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PiDBResponse* other);
  friend void swap(PiDBResponse& a, PiDBResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBResponse* New() const final {
    return CreateMaybeMessage<PiDBResponse>(NULL);
  }

  PiDBResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBResponse& from);
  void MergeFrom(const PiDBResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string old_value = 2;
  bool has_old_value() const;
  void clear_old_value();
  static const int kOldValueFieldNumber = 2;
  const ::std::string& old_value() const;
  void set_old_value(const ::std::string& value);
  #if LANG_CXX11
  void set_old_value(::std::string&& value);
  #endif
  void set_old_value(const char* value);
  void set_old_value(const char* value, size_t size);
  ::std::string* mutable_old_value();
  ::std::string* release_old_value();
  void set_allocated_old_value(::std::string* old_value);

  // optional string new_value = 3;
  bool has_new_value() const;
  void clear_new_value();
  static const int kNewValueFieldNumber = 3;
  const ::std::string& new_value() const;
  void set_new_value(const ::std::string& value);
  #if LANG_CXX11
  void set_new_value(::std::string&& value);
  #endif
  void set_new_value(const char* value);
  void set_new_value(const char* value, size_t size);
  ::std::string* mutable_new_value();
  ::std::string* release_new_value();
  void set_allocated_new_value(::std::string* new_value);

  // optional string redirect = 4;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 4;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_old_value();
  void clear_has_old_value();
  void set_has_new_value();
  void clear_has_new_value();
  void set_has_redirect();
  void clear_has_redirect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr old_value_;
  ::google::protobuf::internal::ArenaStringPtr new_value_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  bool success_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBIterator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBIterator) */ {
 public:
  PiDBIterator();
  virtual ~PiDBIterator();

  PiDBIterator(const PiDBIterator& from);

  inline PiDBIterator& operator=(const PiDBIterator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBIterator(PiDBIterator&& from) noexcept
    : PiDBIterator() {
    *this = ::std::move(from);
  }

  inline PiDBIterator& operator=(PiDBIterator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBIterator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBIterator* internal_default_instance() {
    return reinterpret_cast<const PiDBIterator*>(
               &_PiDBIterator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PiDBIterator* other);
  friend void swap(PiDBIterator& a, PiDBIterator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBIterator* New() const final {
    return CreateMaybeMessage<PiDBIterator>(NULL);
  }

  PiDBIterator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBIterator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBIterator& from);
  void MergeFrom(const PiDBIterator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBIterator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  #if LANG_CXX11
  void set_start(::std::string&& value);
  #endif
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // optional string stop = 3;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 3;
  const ::std::string& stop() const;
  void set_stop(const ::std::string& value);
  #if LANG_CXX11
  void set_stop(::std::string&& value);
  #endif
  void set_stop(const char* value);
  void set_stop(const char* value, size_t size);
  ::std::string* mutable_stop();
  ::std::string* release_stop();
  void set_allocated_stop(::std::string* stop);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBIterator)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_start();
  void clear_has_start();
  void set_has_stop();
  void clear_has_stop();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr stop_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_pidb_2eproto::TableStruct;
};
// ===================================================================

class PiDBService_Stub;

class PiDBService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PiDBService() {};
 public:
  virtual ~PiDBService();

  typedef PiDBService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Put(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRequest* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRequest* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Write(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBWriteBatch* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSnapshot(::google::protobuf::RpcController* controller,
                       const ::pidb::Empty* request,
                       ::pidb::PiDBSnapshot* response,
                       ::google::protobuf::Closure* done);
  virtual void ReleaseSnapshot(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBSnapshot* request,
                       ::pidb::Success* response,
                       ::google::protobuf::Closure* done);
  virtual void GetIterator(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBIterator* request,
                       ::pidb::PiDBIterator* response,
                       ::google::protobuf::Closure* done);
  virtual void Iterate(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBIterator* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PiDBService);
};

class PiDBService_Stub : public PiDBService {
 public:
  PiDBService_Stub(::google::protobuf::RpcChannel* channel);
  PiDBService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PiDBService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PiDBService ------------------------------------------

  void Put(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRequest* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRequest* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  void Write(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBWriteBatch* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
  void GetSnapshot(::google::protobuf::RpcController* controller,
                       const ::pidb::Empty* request,
                       ::pidb::PiDBSnapshot* response,
                       ::google::protobuf::Closure* done);
  void ReleaseSnapshot(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBSnapshot* request,
                       ::pidb::Success* response,
                       ::google::protobuf::Closure* done);
  void GetIterator(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBIterator* request,
                       ::pidb::PiDBIterator* response,
                       ::google::protobuf::Closure* done);
  void Iterate(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBIterator* request,
                       ::pidb::PiDBResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PiDBService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Success

// required bool success = 1;
inline bool Success::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Success::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Success::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Success::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Success::success() const {
  // @@protoc_insertion_point(field_get:pidb.Success.success)
  return success_;
}
inline void Success::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.Success.success)
}

// optional string message = 2;
inline bool Success::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Success::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Success::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Success::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:pidb.Success.message)
  return message_.GetNoArena();
}
inline void Success::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.Success.message)
}
#if LANG_CXX11
inline void Success::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.Success.message)
}
#endif
inline void Success::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.Success.message)
}
inline void Success::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.Success.message)
}
inline ::std::string* Success::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:pidb.Success.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Success::release_message() {
  // @@protoc_insertion_point(field_release:pidb.Success.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Success::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pidb.Success.message)
}

// -------------------------------------------------------------------

// PiDBSnapshot

// required int32 id = 1;
inline bool PiDBSnapshot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBSnapshot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBSnapshot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBSnapshot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PiDBSnapshot::id() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSnapshot.id)
  return id_;
}
inline void PiDBSnapshot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBSnapshot.id)
}

// -------------------------------------------------------------------

// PiDBRequest

// required string key = 1;
inline bool PiDBRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PiDBRequest::key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRequest.key)
  return key_.GetNoArena();
}
inline void PiDBRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRequest.key)
}
#if LANG_CXX11
inline void PiDBRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRequest.key)
}
#endif
inline void PiDBRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRequest.key)
}
inline void PiDBRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRequest.key)
}
inline ::std::string* PiDBRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRequest::release_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRequest.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRequest.key)
}

// optional string value = 2;
inline bool PiDBRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& PiDBRequest::value() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRequest.value)
  return value_.GetNoArena();
}
inline void PiDBRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRequest.value)
}
#if LANG_CXX11
inline void PiDBRequest::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRequest.value)
}
#endif
inline void PiDBRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRequest.value)
}
inline void PiDBRequest::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRequest.value)
}
inline ::std::string* PiDBRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRequest::release_value() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRequest.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRequest.value)
}

// optional .pidb.PiDBSnapshot snapshot = 3;
inline bool PiDBRequest::has_snapshot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBRequest::set_has_snapshot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBRequest::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBRequest::clear_snapshot() {
  if (snapshot_ != NULL) snapshot_->Clear();
  clear_has_snapshot();
}
inline const ::pidb::PiDBSnapshot& PiDBRequest::_internal_snapshot() const {
  return *snapshot_;
}
inline const ::pidb::PiDBSnapshot& PiDBRequest::snapshot() const {
  const ::pidb::PiDBSnapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:pidb.PiDBRequest.snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::pidb::PiDBSnapshot*>(
      &::pidb::_PiDBSnapshot_default_instance_);
}
inline ::pidb::PiDBSnapshot* PiDBRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRequest.snapshot)
  clear_has_snapshot();
  ::pidb::PiDBSnapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
inline ::pidb::PiDBSnapshot* PiDBRequest::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == NULL) {
    auto* p = CreateMaybeMessage<::pidb::PiDBSnapshot>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRequest.snapshot)
  return snapshot_;
}
inline void PiDBRequest::set_allocated_snapshot(::pidb::PiDBSnapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snapshot_;
  }
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
  } else {
    clear_has_snapshot();
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRequest.snapshot)
}

// -------------------------------------------------------------------

// PiDBOperator

// required int32 op = 1;
inline bool PiDBOperator::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBOperator::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBOperator::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBOperator::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 PiDBOperator::op() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBOperator.op)
  return op_;
}
inline void PiDBOperator::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBOperator.op)
}

// required string key = 2;
inline bool PiDBOperator::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBOperator::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBOperator::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBOperator::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PiDBOperator::key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBOperator.key)
  return key_.GetNoArena();
}
inline void PiDBOperator::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBOperator.key)
}
#if LANG_CXX11
inline void PiDBOperator::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBOperator.key)
}
#endif
inline void PiDBOperator::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBOperator.key)
}
inline void PiDBOperator::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBOperator.key)
}
inline ::std::string* PiDBOperator::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBOperator.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBOperator::release_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBOperator.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBOperator::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBOperator.key)
}

// optional string value = 3;
inline bool PiDBOperator::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBOperator::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBOperator::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBOperator::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& PiDBOperator::value() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBOperator.value)
  return value_.GetNoArena();
}
inline void PiDBOperator::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBOperator.value)
}
#if LANG_CXX11
inline void PiDBOperator::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBOperator.value)
}
#endif
inline void PiDBOperator::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBOperator.value)
}
inline void PiDBOperator::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBOperator.value)
}
inline ::std::string* PiDBOperator::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBOperator.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBOperator::release_value() {
  // @@protoc_insertion_point(field_release:pidb.PiDBOperator.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBOperator::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBOperator.value)
}

// -------------------------------------------------------------------

// PiDBWriteBatch

// repeated .pidb.PiDBOperator WriteBatch = 1;
inline int PiDBWriteBatch::writebatch_size() const {
  return writebatch_.size();
}
inline void PiDBWriteBatch::clear_writebatch() {
  writebatch_.Clear();
}
inline ::pidb::PiDBOperator* PiDBWriteBatch::mutable_writebatch(int index) {
  // @@protoc_insertion_point(field_mutable:pidb.PiDBWriteBatch.WriteBatch)
  return writebatch_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pidb::PiDBOperator >*
PiDBWriteBatch::mutable_writebatch() {
  // @@protoc_insertion_point(field_mutable_list:pidb.PiDBWriteBatch.WriteBatch)
  return &writebatch_;
}
inline const ::pidb::PiDBOperator& PiDBWriteBatch::writebatch(int index) const {
  // @@protoc_insertion_point(field_get:pidb.PiDBWriteBatch.WriteBatch)
  return writebatch_.Get(index);
}
inline ::pidb::PiDBOperator* PiDBWriteBatch::add_writebatch() {
  // @@protoc_insertion_point(field_add:pidb.PiDBWriteBatch.WriteBatch)
  return writebatch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pidb::PiDBOperator >&
PiDBWriteBatch::writebatch() const {
  // @@protoc_insertion_point(field_list:pidb.PiDBWriteBatch.WriteBatch)
  return writebatch_;
}

// -------------------------------------------------------------------

// PiDBResponse

// required bool success = 1;
inline bool PiDBResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiDBResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiDBResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiDBResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBResponse.success)
  return success_;
}
inline void PiDBResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBResponse.success)
}

// optional string old_value = 2;
inline bool PiDBResponse::has_old_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBResponse::set_has_old_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBResponse::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBResponse::clear_old_value() {
  old_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_value();
}
inline const ::std::string& PiDBResponse::old_value() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBResponse.old_value)
  return old_value_.GetNoArena();
}
inline void PiDBResponse::set_old_value(const ::std::string& value) {
  set_has_old_value();
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBResponse.old_value)
}
#if LANG_CXX11
inline void PiDBResponse::set_old_value(::std::string&& value) {
  set_has_old_value();
  old_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBResponse.old_value)
}
#endif
inline void PiDBResponse::set_old_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_old_value();
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBResponse.old_value)
}
inline void PiDBResponse::set_old_value(const char* value, size_t size) {
  set_has_old_value();
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBResponse.old_value)
}
inline ::std::string* PiDBResponse::mutable_old_value() {
  set_has_old_value();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBResponse.old_value)
  return old_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBResponse::release_old_value() {
  // @@protoc_insertion_point(field_release:pidb.PiDBResponse.old_value)
  if (!has_old_value()) {
    return NULL;
  }
  clear_has_old_value();
  return old_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBResponse::set_allocated_old_value(::std::string* old_value) {
  if (old_value != NULL) {
    set_has_old_value();
  } else {
    clear_has_old_value();
  }
  old_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_value);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBResponse.old_value)
}

// optional string new_value = 3;
inline bool PiDBResponse::has_new_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBResponse::set_has_new_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBResponse::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBResponse::clear_new_value() {
  new_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_value();
}
inline const ::std::string& PiDBResponse::new_value() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBResponse.new_value)
  return new_value_.GetNoArena();
}
inline void PiDBResponse::set_new_value(const ::std::string& value) {
  set_has_new_value();
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBResponse.new_value)
}
#if LANG_CXX11
inline void PiDBResponse::set_new_value(::std::string&& value) {
  set_has_new_value();
  new_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBResponse.new_value)
}
#endif
inline void PiDBResponse::set_new_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_value();
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBResponse.new_value)
}
inline void PiDBResponse::set_new_value(const char* value, size_t size) {
  set_has_new_value();
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBResponse.new_value)
}
inline ::std::string* PiDBResponse::mutable_new_value() {
  set_has_new_value();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBResponse.new_value)
  return new_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBResponse::release_new_value() {
  // @@protoc_insertion_point(field_release:pidb.PiDBResponse.new_value)
  if (!has_new_value()) {
    return NULL;
  }
  clear_has_new_value();
  return new_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBResponse::set_allocated_new_value(::std::string* new_value) {
  if (new_value != NULL) {
    set_has_new_value();
  } else {
    clear_has_new_value();
  }
  new_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_value);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBResponse.new_value)
}

// optional string redirect = 4;
inline bool PiDBResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBResponse.redirect)
}
#if LANG_CXX11
inline void PiDBResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBResponse.redirect)
}
#endif
inline void PiDBResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBResponse.redirect)
}
inline void PiDBResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBResponse.redirect)
}
inline ::std::string* PiDBResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBResponse.redirect)
}

// -------------------------------------------------------------------

// PiDBIterator

// required int32 id = 1;
inline bool PiDBIterator::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBIterator::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBIterator::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBIterator::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PiDBIterator::id() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBIterator.id)
  return id_;
}
inline void PiDBIterator::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBIterator.id)
}

// optional string start = 2;
inline bool PiDBIterator::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBIterator::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBIterator::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBIterator::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start();
}
inline const ::std::string& PiDBIterator::start() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBIterator.start)
  return start_.GetNoArena();
}
inline void PiDBIterator::set_start(const ::std::string& value) {
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBIterator.start)
}
#if LANG_CXX11
inline void PiDBIterator::set_start(::std::string&& value) {
  set_has_start();
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBIterator.start)
}
#endif
inline void PiDBIterator::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBIterator.start)
}
inline void PiDBIterator::set_start(const char* value, size_t size) {
  set_has_start();
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBIterator.start)
}
inline ::std::string* PiDBIterator::mutable_start() {
  set_has_start();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBIterator.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBIterator::release_start() {
  // @@protoc_insertion_point(field_release:pidb.PiDBIterator.start)
  if (!has_start()) {
    return NULL;
  }
  clear_has_start();
  return start_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBIterator::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    set_has_start();
  } else {
    clear_has_start();
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBIterator.start)
}

// optional string stop = 3;
inline bool PiDBIterator::has_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBIterator::set_has_stop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBIterator::clear_has_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBIterator::clear_stop() {
  stop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stop();
}
inline const ::std::string& PiDBIterator::stop() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBIterator.stop)
  return stop_.GetNoArena();
}
inline void PiDBIterator::set_stop(const ::std::string& value) {
  set_has_stop();
  stop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBIterator.stop)
}
#if LANG_CXX11
inline void PiDBIterator::set_stop(::std::string&& value) {
  set_has_stop();
  stop_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBIterator.stop)
}
#endif
inline void PiDBIterator::set_stop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stop();
  stop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBIterator.stop)
}
inline void PiDBIterator::set_stop(const char* value, size_t size) {
  set_has_stop();
  stop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBIterator.stop)
}
inline ::std::string* PiDBIterator::mutable_stop() {
  set_has_stop();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBIterator.stop)
  return stop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBIterator::release_stop() {
  // @@protoc_insertion_point(field_release:pidb.PiDBIterator.stop)
  if (!has_stop()) {
    return NULL;
  }
  clear_has_stop();
  return stop_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBIterator::set_allocated_stop(::std::string* stop) {
  if (stop != NULL) {
    set_has_stop();
  } else {
    clear_has_stop();
  }
  stop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBIterator.stop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pidb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pidb_2eproto
