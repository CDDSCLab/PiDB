// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#ifndef PROTOBUF_INCLUDED_master_2eproto
#define PROTOBUF_INCLUDED_master_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_master_2eproto 

namespace protobuf_master_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_master_2eproto
namespace pidb {
class PiDBClientRequest;
class PiDBClientRequestDefaultTypeInternal;
extern PiDBClientRequestDefaultTypeInternal _PiDBClientRequest_default_instance_;
class PiDBClientResponse;
class PiDBClientResponseDefaultTypeInternal;
extern PiDBClientResponseDefaultTypeInternal _PiDBClientResponse_default_instance_;
class PiDBPullRequest;
class PiDBPullRequestDefaultTypeInternal;
extern PiDBPullRequestDefaultTypeInternal _PiDBPullRequest_default_instance_;
class PiDBPullResponse;
class PiDBPullResponseDefaultTypeInternal;
extern PiDBPullResponseDefaultTypeInternal _PiDBPullResponse_default_instance_;
class PiDBRaftManageRequest;
class PiDBRaftManageRequestDefaultTypeInternal;
extern PiDBRaftManageRequestDefaultTypeInternal _PiDBRaftManageRequest_default_instance_;
class PiDBRaftManageResponse;
class PiDBRaftManageResponseDefaultTypeInternal;
extern PiDBRaftManageResponseDefaultTypeInternal _PiDBRaftManageResponse_default_instance_;
class PiDBRegionRequest;
class PiDBRegionRequestDefaultTypeInternal;
extern PiDBRegionRequestDefaultTypeInternal _PiDBRegionRequest_default_instance_;
class PiDBRegionResponse;
class PiDBRegionResponseDefaultTypeInternal;
extern PiDBRegionResponseDefaultTypeInternal _PiDBRegionResponse_default_instance_;
class PiDBSplitRequest;
class PiDBSplitRequestDefaultTypeInternal;
extern PiDBSplitRequestDefaultTypeInternal _PiDBSplitRequest_default_instance_;
class PiDBSplitResponse;
class PiDBSplitResponseDefaultTypeInternal;
extern PiDBSplitResponseDefaultTypeInternal _PiDBSplitResponse_default_instance_;
class PiDBStoreRequest;
class PiDBStoreRequestDefaultTypeInternal;
extern PiDBStoreRequestDefaultTypeInternal _PiDBStoreRequest_default_instance_;
class PiDBStoreResponse;
class PiDBStoreResponseDefaultTypeInternal;
extern PiDBStoreResponseDefaultTypeInternal _PiDBStoreResponse_default_instance_;
}  // namespace pidb
namespace google {
namespace protobuf {
template<> ::pidb::PiDBClientRequest* Arena::CreateMaybeMessage<::pidb::PiDBClientRequest>(Arena*);
template<> ::pidb::PiDBClientResponse* Arena::CreateMaybeMessage<::pidb::PiDBClientResponse>(Arena*);
template<> ::pidb::PiDBPullRequest* Arena::CreateMaybeMessage<::pidb::PiDBPullRequest>(Arena*);
template<> ::pidb::PiDBPullResponse* Arena::CreateMaybeMessage<::pidb::PiDBPullResponse>(Arena*);
template<> ::pidb::PiDBRaftManageRequest* Arena::CreateMaybeMessage<::pidb::PiDBRaftManageRequest>(Arena*);
template<> ::pidb::PiDBRaftManageResponse* Arena::CreateMaybeMessage<::pidb::PiDBRaftManageResponse>(Arena*);
template<> ::pidb::PiDBRegionRequest* Arena::CreateMaybeMessage<::pidb::PiDBRegionRequest>(Arena*);
template<> ::pidb::PiDBRegionResponse* Arena::CreateMaybeMessage<::pidb::PiDBRegionResponse>(Arena*);
template<> ::pidb::PiDBSplitRequest* Arena::CreateMaybeMessage<::pidb::PiDBSplitRequest>(Arena*);
template<> ::pidb::PiDBSplitResponse* Arena::CreateMaybeMessage<::pidb::PiDBSplitResponse>(Arena*);
template<> ::pidb::PiDBStoreRequest* Arena::CreateMaybeMessage<::pidb::PiDBStoreRequest>(Arena*);
template<> ::pidb::PiDBStoreResponse* Arena::CreateMaybeMessage<::pidb::PiDBStoreResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pidb {

enum PiDBClientRequest_Action {
  PiDBClientRequest_Action_GET = 1,
  PiDBClientRequest_Action_PUT = 2,
  PiDBClientRequest_Action_DELETE = 3
};
bool PiDBClientRequest_Action_IsValid(int value);
const PiDBClientRequest_Action PiDBClientRequest_Action_Action_MIN = PiDBClientRequest_Action_GET;
const PiDBClientRequest_Action PiDBClientRequest_Action_Action_MAX = PiDBClientRequest_Action_DELETE;
const int PiDBClientRequest_Action_Action_ARRAYSIZE = PiDBClientRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* PiDBClientRequest_Action_descriptor();
inline const ::std::string& PiDBClientRequest_Action_Name(PiDBClientRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    PiDBClientRequest_Action_descriptor(), value);
}
inline bool PiDBClientRequest_Action_Parse(
    const ::std::string& name, PiDBClientRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PiDBClientRequest_Action>(
    PiDBClientRequest_Action_descriptor(), name, value);
}
// ===================================================================

class PiDBClientRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBClientRequest) */ {
 public:
  PiDBClientRequest();
  virtual ~PiDBClientRequest();

  PiDBClientRequest(const PiDBClientRequest& from);

  inline PiDBClientRequest& operator=(const PiDBClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBClientRequest(PiDBClientRequest&& from) noexcept
    : PiDBClientRequest() {
    *this = ::std::move(from);
  }

  inline PiDBClientRequest& operator=(PiDBClientRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBClientRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBClientRequest*>(
               &_PiDBClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PiDBClientRequest* other);
  friend void swap(PiDBClientRequest& a, PiDBClientRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBClientRequest* New() const final {
    return CreateMaybeMessage<PiDBClientRequest>(NULL);
  }

  PiDBClientRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBClientRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBClientRequest& from);
  void MergeFrom(const PiDBClientRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PiDBClientRequest_Action Action;
  static const Action GET =
    PiDBClientRequest_Action_GET;
  static const Action PUT =
    PiDBClientRequest_Action_PUT;
  static const Action DELETE =
    PiDBClientRequest_Action_DELETE;
  static inline bool Action_IsValid(int value) {
    return PiDBClientRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    PiDBClientRequest_Action_Action_MIN;
  static const Action Action_MAX =
    PiDBClientRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    PiDBClientRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return PiDBClientRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return PiDBClientRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return PiDBClientRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required .pidb.PiDBClientRequest.Action action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::pidb::PiDBClientRequest_Action action() const;
  void set_action(::pidb::PiDBClientRequest_Action value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBClientRequest)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_action();
  void clear_has_action();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int action_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBClientResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBClientResponse) */ {
 public:
  PiDBClientResponse();
  virtual ~PiDBClientResponse();

  PiDBClientResponse(const PiDBClientResponse& from);

  inline PiDBClientResponse& operator=(const PiDBClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBClientResponse(PiDBClientResponse&& from) noexcept
    : PiDBClientResponse() {
    *this = ::std::move(from);
  }

  inline PiDBClientResponse& operator=(PiDBClientResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBClientResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBClientResponse*>(
               &_PiDBClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PiDBClientResponse* other);
  friend void swap(PiDBClientResponse& a, PiDBClientResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBClientResponse* New() const final {
    return CreateMaybeMessage<PiDBClientResponse>(NULL);
  }

  PiDBClientResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBClientResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBClientResponse& from);
  void MergeFrom(const PiDBClientResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBClientResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional string leader_addr = 3;
  bool has_leader_addr() const;
  void clear_leader_addr();
  static const int kLeaderAddrFieldNumber = 3;
  const ::std::string& leader_addr() const;
  void set_leader_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_addr(::std::string&& value);
  #endif
  void set_leader_addr(const char* value);
  void set_leader_addr(const char* value, size_t size);
  ::std::string* mutable_leader_addr();
  ::std::string* release_leader_addr();
  void set_allocated_leader_addr(::std::string* leader_addr);

  // optional string raft_group = 4;
  bool has_raft_group() const;
  void clear_raft_group();
  static const int kRaftGroupFieldNumber = 4;
  const ::std::string& raft_group() const;
  void set_raft_group(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_group(::std::string&& value);
  #endif
  void set_raft_group(const char* value);
  void set_raft_group(const char* value, size_t size);
  ::std::string* mutable_raft_group();
  ::std::string* release_raft_group();
  void set_allocated_raft_group(::std::string* raft_group);

  // optional string raft_conf = 5;
  bool has_raft_conf() const;
  void clear_raft_conf();
  static const int kRaftConfFieldNumber = 5;
  const ::std::string& raft_conf() const;
  void set_raft_conf(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_conf(::std::string&& value);
  #endif
  void set_raft_conf(const char* value);
  void set_raft_conf(const char* value, size_t size);
  ::std::string* mutable_raft_conf();
  ::std::string* release_raft_conf();
  void set_allocated_raft_conf(::std::string* raft_conf);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBClientResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_redirect();
  void clear_has_redirect();
  void set_has_leader_addr();
  void clear_has_leader_addr();
  void set_has_raft_group();
  void clear_has_raft_group();
  void set_has_raft_conf();
  void clear_has_raft_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr leader_addr_;
  ::google::protobuf::internal::ArenaStringPtr raft_group_;
  ::google::protobuf::internal::ArenaStringPtr raft_conf_;
  bool success_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBStoreRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBStoreRequest) */ {
 public:
  PiDBStoreRequest();
  virtual ~PiDBStoreRequest();

  PiDBStoreRequest(const PiDBStoreRequest& from);

  inline PiDBStoreRequest& operator=(const PiDBStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBStoreRequest(PiDBStoreRequest&& from) noexcept
    : PiDBStoreRequest() {
    *this = ::std::move(from);
  }

  inline PiDBStoreRequest& operator=(PiDBStoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBStoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBStoreRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBStoreRequest*>(
               &_PiDBStoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PiDBStoreRequest* other);
  friend void swap(PiDBStoreRequest& a, PiDBStoreRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBStoreRequest* New() const final {
    return CreateMaybeMessage<PiDBStoreRequest>(NULL);
  }

  PiDBStoreRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBStoreRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBStoreRequest& from);
  void MergeFrom(const PiDBStoreRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBStoreRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string store_addr = 1;
  bool has_store_addr() const;
  void clear_store_addr();
  static const int kStoreAddrFieldNumber = 1;
  const ::std::string& store_addr() const;
  void set_store_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_store_addr(::std::string&& value);
  #endif
  void set_store_addr(const char* value);
  void set_store_addr(const char* value, size_t size);
  ::std::string* mutable_store_addr();
  ::std::string* release_store_addr();
  void set_allocated_store_addr(::std::string* store_addr);

  // optional int32 region_num = 2;
  bool has_region_num() const;
  void clear_region_num();
  static const int kRegionNumFieldNumber = 2;
  ::google::protobuf::int32 region_num() const;
  void set_region_num(::google::protobuf::int32 value);

  // optional int32 leader_num = 3;
  bool has_leader_num() const;
  void clear_leader_num();
  static const int kLeaderNumFieldNumber = 3;
  ::google::protobuf::int32 leader_num() const;
  void set_leader_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBStoreRequest)
 private:
  void set_has_store_addr();
  void clear_has_store_addr();
  void set_has_region_num();
  void clear_has_region_num();
  void set_has_leader_num();
  void clear_has_leader_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr store_addr_;
  ::google::protobuf::int32 region_num_;
  ::google::protobuf::int32 leader_num_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBStoreResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBStoreResponse) */ {
 public:
  PiDBStoreResponse();
  virtual ~PiDBStoreResponse();

  PiDBStoreResponse(const PiDBStoreResponse& from);

  inline PiDBStoreResponse& operator=(const PiDBStoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBStoreResponse(PiDBStoreResponse&& from) noexcept
    : PiDBStoreResponse() {
    *this = ::std::move(from);
  }

  inline PiDBStoreResponse& operator=(PiDBStoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBStoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBStoreResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBStoreResponse*>(
               &_PiDBStoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PiDBStoreResponse* other);
  friend void swap(PiDBStoreResponse& a, PiDBStoreResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBStoreResponse* New() const final {
    return CreateMaybeMessage<PiDBStoreResponse>(NULL);
  }

  PiDBStoreResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBStoreResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBStoreResponse& from);
  void MergeFrom(const PiDBStoreResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBStoreResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBStoreResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_redirect();
  void clear_has_redirect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  bool success_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBRaftManageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBRaftManageRequest) */ {
 public:
  PiDBRaftManageRequest();
  virtual ~PiDBRaftManageRequest();

  PiDBRaftManageRequest(const PiDBRaftManageRequest& from);

  inline PiDBRaftManageRequest& operator=(const PiDBRaftManageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBRaftManageRequest(PiDBRaftManageRequest&& from) noexcept
    : PiDBRaftManageRequest() {
    *this = ::std::move(from);
  }

  inline PiDBRaftManageRequest& operator=(PiDBRaftManageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBRaftManageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBRaftManageRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBRaftManageRequest*>(
               &_PiDBRaftManageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PiDBRaftManageRequest* other);
  friend void swap(PiDBRaftManageRequest& a, PiDBRaftManageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBRaftManageRequest* New() const final {
    return CreateMaybeMessage<PiDBRaftManageRequest>(NULL);
  }

  PiDBRaftManageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBRaftManageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBRaftManageRequest& from);
  void MergeFrom(const PiDBRaftManageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBRaftManageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string raft_group = 2;
  bool has_raft_group() const;
  void clear_raft_group();
  static const int kRaftGroupFieldNumber = 2;
  const ::std::string& raft_group() const;
  void set_raft_group(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_group(::std::string&& value);
  #endif
  void set_raft_group(const char* value);
  void set_raft_group(const char* value, size_t size);
  ::std::string* mutable_raft_group();
  ::std::string* release_raft_group();
  void set_allocated_raft_group(::std::string* raft_group);

  // optional string raft_conf = 3;
  bool has_raft_conf() const;
  void clear_raft_conf();
  static const int kRaftConfFieldNumber = 3;
  const ::std::string& raft_conf() const;
  void set_raft_conf(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_conf(::std::string&& value);
  #endif
  void set_raft_conf(const char* value);
  void set_raft_conf(const char* value, size_t size);
  ::std::string* mutable_raft_conf();
  ::std::string* release_raft_conf();
  void set_allocated_raft_conf(::std::string* raft_conf);

  // optional string min_key = 4;
  bool has_min_key() const;
  void clear_min_key();
  static const int kMinKeyFieldNumber = 4;
  const ::std::string& min_key() const;
  void set_min_key(const ::std::string& value);
  #if LANG_CXX11
  void set_min_key(::std::string&& value);
  #endif
  void set_min_key(const char* value);
  void set_min_key(const char* value, size_t size);
  ::std::string* mutable_min_key();
  ::std::string* release_min_key();
  void set_allocated_min_key(::std::string* min_key);

  // optional string max_key = 5;
  bool has_max_key() const;
  void clear_max_key();
  static const int kMaxKeyFieldNumber = 5;
  const ::std::string& max_key() const;
  void set_max_key(const ::std::string& value);
  #if LANG_CXX11
  void set_max_key(::std::string&& value);
  #endif
  void set_max_key(const char* value);
  void set_max_key(const char* value, size_t size);
  ::std::string* mutable_max_key();
  ::std::string* release_max_key();
  void set_allocated_max_key(::std::string* max_key);

  // required bool is_new = 1;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 1;
  bool is_new() const;
  void set_is_new(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBRaftManageRequest)
 private:
  void set_has_is_new();
  void clear_has_is_new();
  void set_has_raft_group();
  void clear_has_raft_group();
  void set_has_raft_conf();
  void clear_has_raft_conf();
  void set_has_min_key();
  void clear_has_min_key();
  void set_has_max_key();
  void clear_has_max_key();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raft_group_;
  ::google::protobuf::internal::ArenaStringPtr raft_conf_;
  ::google::protobuf::internal::ArenaStringPtr min_key_;
  ::google::protobuf::internal::ArenaStringPtr max_key_;
  bool is_new_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBRaftManageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBRaftManageResponse) */ {
 public:
  PiDBRaftManageResponse();
  virtual ~PiDBRaftManageResponse();

  PiDBRaftManageResponse(const PiDBRaftManageResponse& from);

  inline PiDBRaftManageResponse& operator=(const PiDBRaftManageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBRaftManageResponse(PiDBRaftManageResponse&& from) noexcept
    : PiDBRaftManageResponse() {
    *this = ::std::move(from);
  }

  inline PiDBRaftManageResponse& operator=(PiDBRaftManageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBRaftManageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBRaftManageResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBRaftManageResponse*>(
               &_PiDBRaftManageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PiDBRaftManageResponse* other);
  friend void swap(PiDBRaftManageResponse& a, PiDBRaftManageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBRaftManageResponse* New() const final {
    return CreateMaybeMessage<PiDBRaftManageResponse>(NULL);
  }

  PiDBRaftManageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBRaftManageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBRaftManageResponse& from);
  void MergeFrom(const PiDBRaftManageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBRaftManageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string leader_addr = 2;
  bool has_leader_addr() const;
  void clear_leader_addr();
  static const int kLeaderAddrFieldNumber = 2;
  const ::std::string& leader_addr() const;
  void set_leader_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_addr(::std::string&& value);
  #endif
  void set_leader_addr(const char* value);
  void set_leader_addr(const char* value, size_t size);
  ::std::string* mutable_leader_addr();
  ::std::string* release_leader_addr();
  void set_allocated_leader_addr(::std::string* leader_addr);

  // required bool is_leader = 1;
  bool has_is_leader() const;
  void clear_is_leader();
  static const int kIsLeaderFieldNumber = 1;
  bool is_leader() const;
  void set_is_leader(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBRaftManageResponse)
 private:
  void set_has_is_leader();
  void clear_has_is_leader();
  void set_has_leader_addr();
  void clear_has_leader_addr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_addr_;
  bool is_leader_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBRegionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBRegionRequest) */ {
 public:
  PiDBRegionRequest();
  virtual ~PiDBRegionRequest();

  PiDBRegionRequest(const PiDBRegionRequest& from);

  inline PiDBRegionRequest& operator=(const PiDBRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBRegionRequest(PiDBRegionRequest&& from) noexcept
    : PiDBRegionRequest() {
    *this = ::std::move(from);
  }

  inline PiDBRegionRequest& operator=(PiDBRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBRegionRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBRegionRequest*>(
               &_PiDBRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PiDBRegionRequest* other);
  friend void swap(PiDBRegionRequest& a, PiDBRegionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBRegionRequest* New() const final {
    return CreateMaybeMessage<PiDBRegionRequest>(NULL);
  }

  PiDBRegionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBRegionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBRegionRequest& from);
  void MergeFrom(const PiDBRegionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBRegionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peer_addr = 3;
  int peer_addr_size() const;
  void clear_peer_addr();
  static const int kPeerAddrFieldNumber = 3;
  const ::std::string& peer_addr(int index) const;
  ::std::string* mutable_peer_addr(int index);
  void set_peer_addr(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peer_addr(int index, ::std::string&& value);
  #endif
  void set_peer_addr(int index, const char* value);
  void set_peer_addr(int index, const char* value, size_t size);
  ::std::string* add_peer_addr();
  void add_peer_addr(const ::std::string& value);
  #if LANG_CXX11
  void add_peer_addr(::std::string&& value);
  #endif
  void add_peer_addr(const char* value);
  void add_peer_addr(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peer_addr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peer_addr();

  // required string leader_addr = 1;
  bool has_leader_addr() const;
  void clear_leader_addr();
  static const int kLeaderAddrFieldNumber = 1;
  const ::std::string& leader_addr() const;
  void set_leader_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_addr(::std::string&& value);
  #endif
  void set_leader_addr(const char* value);
  void set_leader_addr(const char* value, size_t size);
  ::std::string* mutable_leader_addr();
  ::std::string* release_leader_addr();
  void set_allocated_leader_addr(::std::string* leader_addr);

  // required string raft_group = 2;
  bool has_raft_group() const;
  void clear_raft_group();
  static const int kRaftGroupFieldNumber = 2;
  const ::std::string& raft_group() const;
  void set_raft_group(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_group(::std::string&& value);
  #endif
  void set_raft_group(const char* value);
  void set_raft_group(const char* value, size_t size);
  ::std::string* mutable_raft_group();
  ::std::string* release_raft_group();
  void set_allocated_raft_group(::std::string* raft_group);

  // @@protoc_insertion_point(class_scope:pidb.PiDBRegionRequest)
 private:
  void set_has_leader_addr();
  void clear_has_leader_addr();
  void set_has_raft_group();
  void clear_has_raft_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peer_addr_;
  ::google::protobuf::internal::ArenaStringPtr leader_addr_;
  ::google::protobuf::internal::ArenaStringPtr raft_group_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBRegionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBRegionResponse) */ {
 public:
  PiDBRegionResponse();
  virtual ~PiDBRegionResponse();

  PiDBRegionResponse(const PiDBRegionResponse& from);

  inline PiDBRegionResponse& operator=(const PiDBRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBRegionResponse(PiDBRegionResponse&& from) noexcept
    : PiDBRegionResponse() {
    *this = ::std::move(from);
  }

  inline PiDBRegionResponse& operator=(PiDBRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBRegionResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBRegionResponse*>(
               &_PiDBRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PiDBRegionResponse* other);
  friend void swap(PiDBRegionResponse& a, PiDBRegionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBRegionResponse* New() const final {
    return CreateMaybeMessage<PiDBRegionResponse>(NULL);
  }

  PiDBRegionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBRegionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBRegionResponse& from);
  void MergeFrom(const PiDBRegionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBRegionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional string conf = 3;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 3;
  const ::std::string& conf() const;
  void set_conf(const ::std::string& value);
  #if LANG_CXX11
  void set_conf(::std::string&& value);
  #endif
  void set_conf(const char* value);
  void set_conf(const char* value, size_t size);
  ::std::string* mutable_conf();
  ::std::string* release_conf();
  void set_allocated_conf(::std::string* conf);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBRegionResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_redirect();
  void clear_has_redirect();
  void set_has_conf();
  void clear_has_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr conf_;
  bool success_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBSplitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBSplitRequest) */ {
 public:
  PiDBSplitRequest();
  virtual ~PiDBSplitRequest();

  PiDBSplitRequest(const PiDBSplitRequest& from);

  inline PiDBSplitRequest& operator=(const PiDBSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBSplitRequest(PiDBSplitRequest&& from) noexcept
    : PiDBSplitRequest() {
    *this = ::std::move(from);
  }

  inline PiDBSplitRequest& operator=(PiDBSplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBSplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBSplitRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBSplitRequest*>(
               &_PiDBSplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PiDBSplitRequest* other);
  friend void swap(PiDBSplitRequest& a, PiDBSplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBSplitRequest* New() const final {
    return CreateMaybeMessage<PiDBSplitRequest>(NULL);
  }

  PiDBSplitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBSplitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBSplitRequest& from);
  void MergeFrom(const PiDBSplitRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBSplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_addr = 1;
  bool has_leader_addr() const;
  void clear_leader_addr();
  static const int kLeaderAddrFieldNumber = 1;
  const ::std::string& leader_addr() const;
  void set_leader_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_addr(::std::string&& value);
  #endif
  void set_leader_addr(const char* value);
  void set_leader_addr(const char* value, size_t size);
  ::std::string* mutable_leader_addr();
  ::std::string* release_leader_addr();
  void set_allocated_leader_addr(::std::string* leader_addr);

  // required string raft_group = 2;
  bool has_raft_group() const;
  void clear_raft_group();
  static const int kRaftGroupFieldNumber = 2;
  const ::std::string& raft_group() const;
  void set_raft_group(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_group(::std::string&& value);
  #endif
  void set_raft_group(const char* value);
  void set_raft_group(const char* value, size_t size);
  ::std::string* mutable_raft_group();
  ::std::string* release_raft_group();
  void set_allocated_raft_group(::std::string* raft_group);

  // required string split_key = 3;
  bool has_split_key() const;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 3;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const char* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // @@protoc_insertion_point(class_scope:pidb.PiDBSplitRequest)
 private:
  void set_has_leader_addr();
  void clear_has_leader_addr();
  void set_has_raft_group();
  void clear_has_raft_group();
  void set_has_split_key();
  void clear_has_split_key();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_addr_;
  ::google::protobuf::internal::ArenaStringPtr raft_group_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBSplitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBSplitResponse) */ {
 public:
  PiDBSplitResponse();
  virtual ~PiDBSplitResponse();

  PiDBSplitResponse(const PiDBSplitResponse& from);

  inline PiDBSplitResponse& operator=(const PiDBSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBSplitResponse(PiDBSplitResponse&& from) noexcept
    : PiDBSplitResponse() {
    *this = ::std::move(from);
  }

  inline PiDBSplitResponse& operator=(PiDBSplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBSplitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBSplitResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBSplitResponse*>(
               &_PiDBSplitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PiDBSplitResponse* other);
  friend void swap(PiDBSplitResponse& a, PiDBSplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBSplitResponse* New() const final {
    return CreateMaybeMessage<PiDBSplitResponse>(NULL);
  }

  PiDBSplitResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBSplitResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBSplitResponse& from);
  void MergeFrom(const PiDBSplitResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBSplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 3;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 3;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBSplitResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_redirect();
  void clear_has_redirect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  bool success_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBPullRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBPullRequest) */ {
 public:
  PiDBPullRequest();
  virtual ~PiDBPullRequest();

  PiDBPullRequest(const PiDBPullRequest& from);

  inline PiDBPullRequest& operator=(const PiDBPullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBPullRequest(PiDBPullRequest&& from) noexcept
    : PiDBPullRequest() {
    *this = ::std::move(from);
  }

  inline PiDBPullRequest& operator=(PiDBPullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBPullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBPullRequest* internal_default_instance() {
    return reinterpret_cast<const PiDBPullRequest*>(
               &_PiDBPullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PiDBPullRequest* other);
  friend void swap(PiDBPullRequest& a, PiDBPullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBPullRequest* New() const final {
    return CreateMaybeMessage<PiDBPullRequest>(NULL);
  }

  PiDBPullRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBPullRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBPullRequest& from);
  void MergeFrom(const PiDBPullRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBPullRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_addr = 1;
  bool has_leader_addr() const;
  void clear_leader_addr();
  static const int kLeaderAddrFieldNumber = 1;
  const ::std::string& leader_addr() const;
  void set_leader_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_addr(::std::string&& value);
  #endif
  void set_leader_addr(const char* value);
  void set_leader_addr(const char* value, size_t size);
  ::std::string* mutable_leader_addr();
  ::std::string* release_leader_addr();
  void set_allocated_leader_addr(::std::string* leader_addr);

  // required string raft_group = 2;
  bool has_raft_group() const;
  void clear_raft_group();
  static const int kRaftGroupFieldNumber = 2;
  const ::std::string& raft_group() const;
  void set_raft_group(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_group(::std::string&& value);
  #endif
  void set_raft_group(const char* value);
  void set_raft_group(const char* value, size_t size);
  ::std::string* mutable_raft_group();
  ::std::string* release_raft_group();
  void set_allocated_raft_group(::std::string* raft_group);

  // required string raft_conf = 3;
  bool has_raft_conf() const;
  void clear_raft_conf();
  static const int kRaftConfFieldNumber = 3;
  const ::std::string& raft_conf() const;
  void set_raft_conf(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_conf(::std::string&& value);
  #endif
  void set_raft_conf(const char* value);
  void set_raft_conf(const char* value, size_t size);
  ::std::string* mutable_raft_conf();
  ::std::string* release_raft_conf();
  void set_allocated_raft_conf(::std::string* raft_conf);

  // @@protoc_insertion_point(class_scope:pidb.PiDBPullRequest)
 private:
  void set_has_leader_addr();
  void clear_has_leader_addr();
  void set_has_raft_group();
  void clear_has_raft_group();
  void set_has_raft_conf();
  void clear_has_raft_conf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_addr_;
  ::google::protobuf::internal::ArenaStringPtr raft_group_;
  ::google::protobuf::internal::ArenaStringPtr raft_conf_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiDBPullResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pidb.PiDBPullResponse) */ {
 public:
  PiDBPullResponse();
  virtual ~PiDBPullResponse();

  PiDBPullResponse(const PiDBPullResponse& from);

  inline PiDBPullResponse& operator=(const PiDBPullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PiDBPullResponse(PiDBPullResponse&& from) noexcept
    : PiDBPullResponse() {
    *this = ::std::move(from);
  }

  inline PiDBPullResponse& operator=(PiDBPullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiDBPullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiDBPullResponse* internal_default_instance() {
    return reinterpret_cast<const PiDBPullResponse*>(
               &_PiDBPullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PiDBPullResponse* other);
  friend void swap(PiDBPullResponse& a, PiDBPullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PiDBPullResponse* New() const final {
    return CreateMaybeMessage<PiDBPullResponse>(NULL);
  }

  PiDBPullResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PiDBPullResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PiDBPullResponse& from);
  void MergeFrom(const PiDBPullResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiDBPullResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pidb.PiDBPullResponse)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_redirect();
  void clear_has_redirect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  bool success_;
  friend struct ::protobuf_master_2eproto::TableStruct;
};
// ===================================================================

class MasterService_Stub;

class MasterService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MasterService() {};
 public:
  virtual ~MasterService();

  typedef MasterService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void QueryRoute(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBClientRequest* request,
                       ::pidb::PiDBClientResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StoreHeartbeat(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBStoreRequest* request,
                       ::pidb::PiDBStoreResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RegionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRegionRequest* request,
                       ::pidb::PiDBRegionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RaftManage(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRaftManageRequest* request,
                       ::pidb::PiDBRaftManageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RegionSplit(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBSplitRequest* request,
                       ::pidb::PiDBSplitResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PullData(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBPullRequest* request,
                       ::pidb::PiDBPullResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService);
};

class MasterService_Stub : public MasterService {
 public:
  MasterService_Stub(::google::protobuf::RpcChannel* channel);
  MasterService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MasterService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MasterService ------------------------------------------

  void QueryRoute(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBClientRequest* request,
                       ::pidb::PiDBClientResponse* response,
                       ::google::protobuf::Closure* done);
  void StoreHeartbeat(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBStoreRequest* request,
                       ::pidb::PiDBStoreResponse* response,
                       ::google::protobuf::Closure* done);
  void RegionHeartbeat(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRegionRequest* request,
                       ::pidb::PiDBRegionResponse* response,
                       ::google::protobuf::Closure* done);
  void RaftManage(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBRaftManageRequest* request,
                       ::pidb::PiDBRaftManageResponse* response,
                       ::google::protobuf::Closure* done);
  void RegionSplit(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBSplitRequest* request,
                       ::pidb::PiDBSplitResponse* response,
                       ::google::protobuf::Closure* done);
  void PullData(::google::protobuf::RpcController* controller,
                       const ::pidb::PiDBPullRequest* request,
                       ::pidb::PiDBPullResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PiDBClientRequest

// required string key = 1;
inline bool PiDBClientRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBClientRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBClientRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBClientRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PiDBClientRequest::key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientRequest.key)
  return key_.GetNoArena();
}
inline void PiDBClientRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBClientRequest.key)
}
#if LANG_CXX11
inline void PiDBClientRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBClientRequest.key)
}
#endif
inline void PiDBClientRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBClientRequest.key)
}
inline void PiDBClientRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBClientRequest.key)
}
inline ::std::string* PiDBClientRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBClientRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBClientRequest::release_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBClientRequest.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBClientRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBClientRequest.key)
}

// required .pidb.PiDBClientRequest.Action action = 2;
inline bool PiDBClientRequest::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBClientRequest::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBClientRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBClientRequest::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::pidb::PiDBClientRequest_Action PiDBClientRequest::action() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientRequest.action)
  return static_cast< ::pidb::PiDBClientRequest_Action >(action_);
}
inline void PiDBClientRequest::set_action(::pidb::PiDBClientRequest_Action value) {
  assert(::pidb::PiDBClientRequest_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBClientRequest.action)
}

// -------------------------------------------------------------------

// PiDBClientResponse

// required bool success = 1;
inline bool PiDBClientResponse::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiDBClientResponse::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiDBClientResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiDBClientResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBClientResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientResponse.success)
  return success_;
}
inline void PiDBClientResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBClientResponse.success)
}

// optional string redirect = 2;
inline bool PiDBClientResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBClientResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBClientResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBClientResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBClientResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBClientResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBClientResponse.redirect)
}
#if LANG_CXX11
inline void PiDBClientResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBClientResponse.redirect)
}
#endif
inline void PiDBClientResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBClientResponse.redirect)
}
inline void PiDBClientResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBClientResponse.redirect)
}
inline ::std::string* PiDBClientResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBClientResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBClientResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBClientResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBClientResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBClientResponse.redirect)
}

// optional string leader_addr = 3;
inline bool PiDBClientResponse::has_leader_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBClientResponse::set_has_leader_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBClientResponse::clear_has_leader_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBClientResponse::clear_leader_addr() {
  leader_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_addr();
}
inline const ::std::string& PiDBClientResponse::leader_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientResponse.leader_addr)
  return leader_addr_.GetNoArena();
}
inline void PiDBClientResponse::set_leader_addr(const ::std::string& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBClientResponse.leader_addr)
}
#if LANG_CXX11
inline void PiDBClientResponse::set_leader_addr(::std::string&& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBClientResponse.leader_addr)
}
#endif
inline void PiDBClientResponse::set_leader_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBClientResponse.leader_addr)
}
inline void PiDBClientResponse::set_leader_addr(const char* value, size_t size) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBClientResponse.leader_addr)
}
inline ::std::string* PiDBClientResponse::mutable_leader_addr() {
  set_has_leader_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBClientResponse.leader_addr)
  return leader_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBClientResponse::release_leader_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBClientResponse.leader_addr)
  if (!has_leader_addr()) {
    return NULL;
  }
  clear_has_leader_addr();
  return leader_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBClientResponse::set_allocated_leader_addr(::std::string* leader_addr) {
  if (leader_addr != NULL) {
    set_has_leader_addr();
  } else {
    clear_has_leader_addr();
  }
  leader_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBClientResponse.leader_addr)
}

// optional string raft_group = 4;
inline bool PiDBClientResponse::has_raft_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBClientResponse::set_has_raft_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBClientResponse::clear_has_raft_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBClientResponse::clear_raft_group() {
  raft_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_group();
}
inline const ::std::string& PiDBClientResponse::raft_group() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientResponse.raft_group)
  return raft_group_.GetNoArena();
}
inline void PiDBClientResponse::set_raft_group(const ::std::string& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBClientResponse.raft_group)
}
#if LANG_CXX11
inline void PiDBClientResponse::set_raft_group(::std::string&& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBClientResponse.raft_group)
}
#endif
inline void PiDBClientResponse::set_raft_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBClientResponse.raft_group)
}
inline void PiDBClientResponse::set_raft_group(const char* value, size_t size) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBClientResponse.raft_group)
}
inline ::std::string* PiDBClientResponse::mutable_raft_group() {
  set_has_raft_group();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBClientResponse.raft_group)
  return raft_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBClientResponse::release_raft_group() {
  // @@protoc_insertion_point(field_release:pidb.PiDBClientResponse.raft_group)
  if (!has_raft_group()) {
    return NULL;
  }
  clear_has_raft_group();
  return raft_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBClientResponse::set_allocated_raft_group(::std::string* raft_group) {
  if (raft_group != NULL) {
    set_has_raft_group();
  } else {
    clear_has_raft_group();
  }
  raft_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_group);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBClientResponse.raft_group)
}

// optional string raft_conf = 5;
inline bool PiDBClientResponse::has_raft_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiDBClientResponse::set_has_raft_conf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiDBClientResponse::clear_has_raft_conf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiDBClientResponse::clear_raft_conf() {
  raft_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_conf();
}
inline const ::std::string& PiDBClientResponse::raft_conf() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBClientResponse.raft_conf)
  return raft_conf_.GetNoArena();
}
inline void PiDBClientResponse::set_raft_conf(const ::std::string& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBClientResponse.raft_conf)
}
#if LANG_CXX11
inline void PiDBClientResponse::set_raft_conf(::std::string&& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBClientResponse.raft_conf)
}
#endif
inline void PiDBClientResponse::set_raft_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBClientResponse.raft_conf)
}
inline void PiDBClientResponse::set_raft_conf(const char* value, size_t size) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBClientResponse.raft_conf)
}
inline ::std::string* PiDBClientResponse::mutable_raft_conf() {
  set_has_raft_conf();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBClientResponse.raft_conf)
  return raft_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBClientResponse::release_raft_conf() {
  // @@protoc_insertion_point(field_release:pidb.PiDBClientResponse.raft_conf)
  if (!has_raft_conf()) {
    return NULL;
  }
  clear_has_raft_conf();
  return raft_conf_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBClientResponse::set_allocated_raft_conf(::std::string* raft_conf) {
  if (raft_conf != NULL) {
    set_has_raft_conf();
  } else {
    clear_has_raft_conf();
  }
  raft_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_conf);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBClientResponse.raft_conf)
}

// -------------------------------------------------------------------

// PiDBStoreRequest

// required string store_addr = 1;
inline bool PiDBStoreRequest::has_store_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBStoreRequest::set_has_store_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBStoreRequest::clear_has_store_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBStoreRequest::clear_store_addr() {
  store_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_store_addr();
}
inline const ::std::string& PiDBStoreRequest::store_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBStoreRequest.store_addr)
  return store_addr_.GetNoArena();
}
inline void PiDBStoreRequest::set_store_addr(const ::std::string& value) {
  set_has_store_addr();
  store_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBStoreRequest.store_addr)
}
#if LANG_CXX11
inline void PiDBStoreRequest::set_store_addr(::std::string&& value) {
  set_has_store_addr();
  store_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBStoreRequest.store_addr)
}
#endif
inline void PiDBStoreRequest::set_store_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_store_addr();
  store_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBStoreRequest.store_addr)
}
inline void PiDBStoreRequest::set_store_addr(const char* value, size_t size) {
  set_has_store_addr();
  store_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBStoreRequest.store_addr)
}
inline ::std::string* PiDBStoreRequest::mutable_store_addr() {
  set_has_store_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBStoreRequest.store_addr)
  return store_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBStoreRequest::release_store_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBStoreRequest.store_addr)
  if (!has_store_addr()) {
    return NULL;
  }
  clear_has_store_addr();
  return store_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBStoreRequest::set_allocated_store_addr(::std::string* store_addr) {
  if (store_addr != NULL) {
    set_has_store_addr();
  } else {
    clear_has_store_addr();
  }
  store_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBStoreRequest.store_addr)
}

// optional int32 region_num = 2;
inline bool PiDBStoreRequest::has_region_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBStoreRequest::set_has_region_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBStoreRequest::clear_has_region_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBStoreRequest::clear_region_num() {
  region_num_ = 0;
  clear_has_region_num();
}
inline ::google::protobuf::int32 PiDBStoreRequest::region_num() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBStoreRequest.region_num)
  return region_num_;
}
inline void PiDBStoreRequest::set_region_num(::google::protobuf::int32 value) {
  set_has_region_num();
  region_num_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBStoreRequest.region_num)
}

// optional int32 leader_num = 3;
inline bool PiDBStoreRequest::has_leader_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBStoreRequest::set_has_leader_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBStoreRequest::clear_has_leader_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBStoreRequest::clear_leader_num() {
  leader_num_ = 0;
  clear_has_leader_num();
}
inline ::google::protobuf::int32 PiDBStoreRequest::leader_num() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBStoreRequest.leader_num)
  return leader_num_;
}
inline void PiDBStoreRequest::set_leader_num(::google::protobuf::int32 value) {
  set_has_leader_num();
  leader_num_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBStoreRequest.leader_num)
}

// -------------------------------------------------------------------

// PiDBStoreResponse

// required bool success = 1;
inline bool PiDBStoreResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBStoreResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBStoreResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBStoreResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBStoreResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBStoreResponse.success)
  return success_;
}
inline void PiDBStoreResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBStoreResponse.success)
}

// optional string redirect = 2;
inline bool PiDBStoreResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBStoreResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBStoreResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBStoreResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBStoreResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBStoreResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBStoreResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBStoreResponse.redirect)
}
#if LANG_CXX11
inline void PiDBStoreResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBStoreResponse.redirect)
}
#endif
inline void PiDBStoreResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBStoreResponse.redirect)
}
inline void PiDBStoreResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBStoreResponse.redirect)
}
inline ::std::string* PiDBStoreResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBStoreResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBStoreResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBStoreResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBStoreResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBStoreResponse.redirect)
}

// -------------------------------------------------------------------

// PiDBRaftManageRequest

// required bool is_new = 1;
inline bool PiDBRaftManageRequest::has_is_new() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiDBRaftManageRequest::set_has_is_new() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiDBRaftManageRequest::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiDBRaftManageRequest::clear_is_new() {
  is_new_ = false;
  clear_has_is_new();
}
inline bool PiDBRaftManageRequest::is_new() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageRequest.is_new)
  return is_new_;
}
inline void PiDBRaftManageRequest::set_is_new(bool value) {
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageRequest.is_new)
}

// required string raft_group = 2;
inline bool PiDBRaftManageRequest::has_raft_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBRaftManageRequest::set_has_raft_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBRaftManageRequest::clear_has_raft_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBRaftManageRequest::clear_raft_group() {
  raft_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_group();
}
inline const ::std::string& PiDBRaftManageRequest::raft_group() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageRequest.raft_group)
  return raft_group_.GetNoArena();
}
inline void PiDBRaftManageRequest::set_raft_group(const ::std::string& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageRequest.raft_group)
}
#if LANG_CXX11
inline void PiDBRaftManageRequest::set_raft_group(::std::string&& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRaftManageRequest.raft_group)
}
#endif
inline void PiDBRaftManageRequest::set_raft_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRaftManageRequest.raft_group)
}
inline void PiDBRaftManageRequest::set_raft_group(const char* value, size_t size) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRaftManageRequest.raft_group)
}
inline ::std::string* PiDBRaftManageRequest::mutable_raft_group() {
  set_has_raft_group();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRaftManageRequest.raft_group)
  return raft_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRaftManageRequest::release_raft_group() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRaftManageRequest.raft_group)
  if (!has_raft_group()) {
    return NULL;
  }
  clear_has_raft_group();
  return raft_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRaftManageRequest::set_allocated_raft_group(::std::string* raft_group) {
  if (raft_group != NULL) {
    set_has_raft_group();
  } else {
    clear_has_raft_group();
  }
  raft_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_group);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRaftManageRequest.raft_group)
}

// optional string raft_conf = 3;
inline bool PiDBRaftManageRequest::has_raft_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBRaftManageRequest::set_has_raft_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBRaftManageRequest::clear_has_raft_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBRaftManageRequest::clear_raft_conf() {
  raft_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_conf();
}
inline const ::std::string& PiDBRaftManageRequest::raft_conf() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageRequest.raft_conf)
  return raft_conf_.GetNoArena();
}
inline void PiDBRaftManageRequest::set_raft_conf(const ::std::string& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageRequest.raft_conf)
}
#if LANG_CXX11
inline void PiDBRaftManageRequest::set_raft_conf(::std::string&& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRaftManageRequest.raft_conf)
}
#endif
inline void PiDBRaftManageRequest::set_raft_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRaftManageRequest.raft_conf)
}
inline void PiDBRaftManageRequest::set_raft_conf(const char* value, size_t size) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRaftManageRequest.raft_conf)
}
inline ::std::string* PiDBRaftManageRequest::mutable_raft_conf() {
  set_has_raft_conf();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRaftManageRequest.raft_conf)
  return raft_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRaftManageRequest::release_raft_conf() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRaftManageRequest.raft_conf)
  if (!has_raft_conf()) {
    return NULL;
  }
  clear_has_raft_conf();
  return raft_conf_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRaftManageRequest::set_allocated_raft_conf(::std::string* raft_conf) {
  if (raft_conf != NULL) {
    set_has_raft_conf();
  } else {
    clear_has_raft_conf();
  }
  raft_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_conf);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRaftManageRequest.raft_conf)
}

// optional string min_key = 4;
inline bool PiDBRaftManageRequest::has_min_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBRaftManageRequest::set_has_min_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBRaftManageRequest::clear_has_min_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBRaftManageRequest::clear_min_key() {
  min_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_min_key();
}
inline const ::std::string& PiDBRaftManageRequest::min_key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageRequest.min_key)
  return min_key_.GetNoArena();
}
inline void PiDBRaftManageRequest::set_min_key(const ::std::string& value) {
  set_has_min_key();
  min_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageRequest.min_key)
}
#if LANG_CXX11
inline void PiDBRaftManageRequest::set_min_key(::std::string&& value) {
  set_has_min_key();
  min_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRaftManageRequest.min_key)
}
#endif
inline void PiDBRaftManageRequest::set_min_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_min_key();
  min_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRaftManageRequest.min_key)
}
inline void PiDBRaftManageRequest::set_min_key(const char* value, size_t size) {
  set_has_min_key();
  min_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRaftManageRequest.min_key)
}
inline ::std::string* PiDBRaftManageRequest::mutable_min_key() {
  set_has_min_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRaftManageRequest.min_key)
  return min_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRaftManageRequest::release_min_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRaftManageRequest.min_key)
  if (!has_min_key()) {
    return NULL;
  }
  clear_has_min_key();
  return min_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRaftManageRequest::set_allocated_min_key(::std::string* min_key) {
  if (min_key != NULL) {
    set_has_min_key();
  } else {
    clear_has_min_key();
  }
  min_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min_key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRaftManageRequest.min_key)
}

// optional string max_key = 5;
inline bool PiDBRaftManageRequest::has_max_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiDBRaftManageRequest::set_has_max_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiDBRaftManageRequest::clear_has_max_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiDBRaftManageRequest::clear_max_key() {
  max_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_max_key();
}
inline const ::std::string& PiDBRaftManageRequest::max_key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageRequest.max_key)
  return max_key_.GetNoArena();
}
inline void PiDBRaftManageRequest::set_max_key(const ::std::string& value) {
  set_has_max_key();
  max_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageRequest.max_key)
}
#if LANG_CXX11
inline void PiDBRaftManageRequest::set_max_key(::std::string&& value) {
  set_has_max_key();
  max_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRaftManageRequest.max_key)
}
#endif
inline void PiDBRaftManageRequest::set_max_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_max_key();
  max_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRaftManageRequest.max_key)
}
inline void PiDBRaftManageRequest::set_max_key(const char* value, size_t size) {
  set_has_max_key();
  max_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRaftManageRequest.max_key)
}
inline ::std::string* PiDBRaftManageRequest::mutable_max_key() {
  set_has_max_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRaftManageRequest.max_key)
  return max_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRaftManageRequest::release_max_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRaftManageRequest.max_key)
  if (!has_max_key()) {
    return NULL;
  }
  clear_has_max_key();
  return max_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRaftManageRequest::set_allocated_max_key(::std::string* max_key) {
  if (max_key != NULL) {
    set_has_max_key();
  } else {
    clear_has_max_key();
  }
  max_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRaftManageRequest.max_key)
}

// -------------------------------------------------------------------

// PiDBRaftManageResponse

// required bool is_leader = 1;
inline bool PiDBRaftManageResponse::has_is_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBRaftManageResponse::set_has_is_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBRaftManageResponse::clear_has_is_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBRaftManageResponse::clear_is_leader() {
  is_leader_ = false;
  clear_has_is_leader();
}
inline bool PiDBRaftManageResponse::is_leader() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageResponse.is_leader)
  return is_leader_;
}
inline void PiDBRaftManageResponse::set_is_leader(bool value) {
  set_has_is_leader();
  is_leader_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageResponse.is_leader)
}

// optional string leader_addr = 2;
inline bool PiDBRaftManageResponse::has_leader_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBRaftManageResponse::set_has_leader_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBRaftManageResponse::clear_has_leader_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBRaftManageResponse::clear_leader_addr() {
  leader_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_addr();
}
inline const ::std::string& PiDBRaftManageResponse::leader_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRaftManageResponse.leader_addr)
  return leader_addr_.GetNoArena();
}
inline void PiDBRaftManageResponse::set_leader_addr(const ::std::string& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRaftManageResponse.leader_addr)
}
#if LANG_CXX11
inline void PiDBRaftManageResponse::set_leader_addr(::std::string&& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRaftManageResponse.leader_addr)
}
#endif
inline void PiDBRaftManageResponse::set_leader_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRaftManageResponse.leader_addr)
}
inline void PiDBRaftManageResponse::set_leader_addr(const char* value, size_t size) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRaftManageResponse.leader_addr)
}
inline ::std::string* PiDBRaftManageResponse::mutable_leader_addr() {
  set_has_leader_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRaftManageResponse.leader_addr)
  return leader_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRaftManageResponse::release_leader_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRaftManageResponse.leader_addr)
  if (!has_leader_addr()) {
    return NULL;
  }
  clear_has_leader_addr();
  return leader_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRaftManageResponse::set_allocated_leader_addr(::std::string* leader_addr) {
  if (leader_addr != NULL) {
    set_has_leader_addr();
  } else {
    clear_has_leader_addr();
  }
  leader_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRaftManageResponse.leader_addr)
}

// -------------------------------------------------------------------

// PiDBRegionRequest

// required string leader_addr = 1;
inline bool PiDBRegionRequest::has_leader_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBRegionRequest::set_has_leader_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBRegionRequest::clear_has_leader_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBRegionRequest::clear_leader_addr() {
  leader_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_addr();
}
inline const ::std::string& PiDBRegionRequest::leader_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionRequest.leader_addr)
  return leader_addr_.GetNoArena();
}
inline void PiDBRegionRequest::set_leader_addr(const ::std::string& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionRequest.leader_addr)
}
#if LANG_CXX11
inline void PiDBRegionRequest::set_leader_addr(::std::string&& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRegionRequest.leader_addr)
}
#endif
inline void PiDBRegionRequest::set_leader_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRegionRequest.leader_addr)
}
inline void PiDBRegionRequest::set_leader_addr(const char* value, size_t size) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRegionRequest.leader_addr)
}
inline ::std::string* PiDBRegionRequest::mutable_leader_addr() {
  set_has_leader_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRegionRequest.leader_addr)
  return leader_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRegionRequest::release_leader_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRegionRequest.leader_addr)
  if (!has_leader_addr()) {
    return NULL;
  }
  clear_has_leader_addr();
  return leader_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRegionRequest::set_allocated_leader_addr(::std::string* leader_addr) {
  if (leader_addr != NULL) {
    set_has_leader_addr();
  } else {
    clear_has_leader_addr();
  }
  leader_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRegionRequest.leader_addr)
}

// required string raft_group = 2;
inline bool PiDBRegionRequest::has_raft_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBRegionRequest::set_has_raft_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBRegionRequest::clear_has_raft_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBRegionRequest::clear_raft_group() {
  raft_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_group();
}
inline const ::std::string& PiDBRegionRequest::raft_group() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionRequest.raft_group)
  return raft_group_.GetNoArena();
}
inline void PiDBRegionRequest::set_raft_group(const ::std::string& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionRequest.raft_group)
}
#if LANG_CXX11
inline void PiDBRegionRequest::set_raft_group(::std::string&& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRegionRequest.raft_group)
}
#endif
inline void PiDBRegionRequest::set_raft_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRegionRequest.raft_group)
}
inline void PiDBRegionRequest::set_raft_group(const char* value, size_t size) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRegionRequest.raft_group)
}
inline ::std::string* PiDBRegionRequest::mutable_raft_group() {
  set_has_raft_group();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRegionRequest.raft_group)
  return raft_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRegionRequest::release_raft_group() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRegionRequest.raft_group)
  if (!has_raft_group()) {
    return NULL;
  }
  clear_has_raft_group();
  return raft_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRegionRequest::set_allocated_raft_group(::std::string* raft_group) {
  if (raft_group != NULL) {
    set_has_raft_group();
  } else {
    clear_has_raft_group();
  }
  raft_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_group);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRegionRequest.raft_group)
}

// repeated string peer_addr = 3;
inline int PiDBRegionRequest::peer_addr_size() const {
  return peer_addr_.size();
}
inline void PiDBRegionRequest::clear_peer_addr() {
  peer_addr_.Clear();
}
inline const ::std::string& PiDBRegionRequest::peer_addr(int index) const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionRequest.peer_addr)
  return peer_addr_.Get(index);
}
inline ::std::string* PiDBRegionRequest::mutable_peer_addr(int index) {
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRegionRequest.peer_addr)
  return peer_addr_.Mutable(index);
}
inline void PiDBRegionRequest::set_peer_addr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionRequest.peer_addr)
  peer_addr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PiDBRegionRequest::set_peer_addr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionRequest.peer_addr)
  peer_addr_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PiDBRegionRequest::set_peer_addr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peer_addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRegionRequest.peer_addr)
}
inline void PiDBRegionRequest::set_peer_addr(int index, const char* value, size_t size) {
  peer_addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRegionRequest.peer_addr)
}
inline ::std::string* PiDBRegionRequest::add_peer_addr() {
  // @@protoc_insertion_point(field_add_mutable:pidb.PiDBRegionRequest.peer_addr)
  return peer_addr_.Add();
}
inline void PiDBRegionRequest::add_peer_addr(const ::std::string& value) {
  peer_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pidb.PiDBRegionRequest.peer_addr)
}
#if LANG_CXX11
inline void PiDBRegionRequest::add_peer_addr(::std::string&& value) {
  peer_addr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pidb.PiDBRegionRequest.peer_addr)
}
#endif
inline void PiDBRegionRequest::add_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peer_addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pidb.PiDBRegionRequest.peer_addr)
}
inline void PiDBRegionRequest::add_peer_addr(const char* value, size_t size) {
  peer_addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pidb.PiDBRegionRequest.peer_addr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PiDBRegionRequest::peer_addr() const {
  // @@protoc_insertion_point(field_list:pidb.PiDBRegionRequest.peer_addr)
  return peer_addr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PiDBRegionRequest::mutable_peer_addr() {
  // @@protoc_insertion_point(field_mutable_list:pidb.PiDBRegionRequest.peer_addr)
  return &peer_addr_;
}

// -------------------------------------------------------------------

// PiDBRegionResponse

// required bool success = 1;
inline bool PiDBRegionResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBRegionResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBRegionResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBRegionResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBRegionResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionResponse.success)
  return success_;
}
inline void PiDBRegionResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionResponse.success)
}

// optional string redirect = 2;
inline bool PiDBRegionResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBRegionResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBRegionResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBRegionResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBRegionResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBRegionResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionResponse.redirect)
}
#if LANG_CXX11
inline void PiDBRegionResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRegionResponse.redirect)
}
#endif
inline void PiDBRegionResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRegionResponse.redirect)
}
inline void PiDBRegionResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRegionResponse.redirect)
}
inline ::std::string* PiDBRegionResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRegionResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRegionResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRegionResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRegionResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRegionResponse.redirect)
}

// optional string conf = 3;
inline bool PiDBRegionResponse::has_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBRegionResponse::set_has_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBRegionResponse::clear_has_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBRegionResponse::clear_conf() {
  conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conf();
}
inline const ::std::string& PiDBRegionResponse::conf() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBRegionResponse.conf)
  return conf_.GetNoArena();
}
inline void PiDBRegionResponse::set_conf(const ::std::string& value) {
  set_has_conf();
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBRegionResponse.conf)
}
#if LANG_CXX11
inline void PiDBRegionResponse::set_conf(::std::string&& value) {
  set_has_conf();
  conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBRegionResponse.conf)
}
#endif
inline void PiDBRegionResponse::set_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conf();
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBRegionResponse.conf)
}
inline void PiDBRegionResponse::set_conf(const char* value, size_t size) {
  set_has_conf();
  conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBRegionResponse.conf)
}
inline ::std::string* PiDBRegionResponse::mutable_conf() {
  set_has_conf();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBRegionResponse.conf)
  return conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBRegionResponse::release_conf() {
  // @@protoc_insertion_point(field_release:pidb.PiDBRegionResponse.conf)
  if (!has_conf()) {
    return NULL;
  }
  clear_has_conf();
  return conf_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBRegionResponse::set_allocated_conf(::std::string* conf) {
  if (conf != NULL) {
    set_has_conf();
  } else {
    clear_has_conf();
  }
  conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conf);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBRegionResponse.conf)
}

// -------------------------------------------------------------------

// PiDBSplitRequest

// required string leader_addr = 1;
inline bool PiDBSplitRequest::has_leader_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBSplitRequest::set_has_leader_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBSplitRequest::clear_has_leader_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBSplitRequest::clear_leader_addr() {
  leader_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_addr();
}
inline const ::std::string& PiDBSplitRequest::leader_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSplitRequest.leader_addr)
  return leader_addr_.GetNoArena();
}
inline void PiDBSplitRequest::set_leader_addr(const ::std::string& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBSplitRequest.leader_addr)
}
#if LANG_CXX11
inline void PiDBSplitRequest::set_leader_addr(::std::string&& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBSplitRequest.leader_addr)
}
#endif
inline void PiDBSplitRequest::set_leader_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBSplitRequest.leader_addr)
}
inline void PiDBSplitRequest::set_leader_addr(const char* value, size_t size) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBSplitRequest.leader_addr)
}
inline ::std::string* PiDBSplitRequest::mutable_leader_addr() {
  set_has_leader_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBSplitRequest.leader_addr)
  return leader_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBSplitRequest::release_leader_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBSplitRequest.leader_addr)
  if (!has_leader_addr()) {
    return NULL;
  }
  clear_has_leader_addr();
  return leader_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBSplitRequest::set_allocated_leader_addr(::std::string* leader_addr) {
  if (leader_addr != NULL) {
    set_has_leader_addr();
  } else {
    clear_has_leader_addr();
  }
  leader_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBSplitRequest.leader_addr)
}

// required string raft_group = 2;
inline bool PiDBSplitRequest::has_raft_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBSplitRequest::set_has_raft_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBSplitRequest::clear_has_raft_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBSplitRequest::clear_raft_group() {
  raft_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_group();
}
inline const ::std::string& PiDBSplitRequest::raft_group() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSplitRequest.raft_group)
  return raft_group_.GetNoArena();
}
inline void PiDBSplitRequest::set_raft_group(const ::std::string& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBSplitRequest.raft_group)
}
#if LANG_CXX11
inline void PiDBSplitRequest::set_raft_group(::std::string&& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBSplitRequest.raft_group)
}
#endif
inline void PiDBSplitRequest::set_raft_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBSplitRequest.raft_group)
}
inline void PiDBSplitRequest::set_raft_group(const char* value, size_t size) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBSplitRequest.raft_group)
}
inline ::std::string* PiDBSplitRequest::mutable_raft_group() {
  set_has_raft_group();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBSplitRequest.raft_group)
  return raft_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBSplitRequest::release_raft_group() {
  // @@protoc_insertion_point(field_release:pidb.PiDBSplitRequest.raft_group)
  if (!has_raft_group()) {
    return NULL;
  }
  clear_has_raft_group();
  return raft_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBSplitRequest::set_allocated_raft_group(::std::string* raft_group) {
  if (raft_group != NULL) {
    set_has_raft_group();
  } else {
    clear_has_raft_group();
  }
  raft_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_group);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBSplitRequest.raft_group)
}

// required string split_key = 3;
inline bool PiDBSplitRequest::has_split_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBSplitRequest::set_has_split_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBSplitRequest::clear_has_split_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBSplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_split_key();
}
inline const ::std::string& PiDBSplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSplitRequest.split_key)
  return split_key_.GetNoArena();
}
inline void PiDBSplitRequest::set_split_key(const ::std::string& value) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBSplitRequest.split_key)
}
#if LANG_CXX11
inline void PiDBSplitRequest::set_split_key(::std::string&& value) {
  set_has_split_key();
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBSplitRequest.split_key)
}
#endif
inline void PiDBSplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBSplitRequest.split_key)
}
inline void PiDBSplitRequest::set_split_key(const char* value, size_t size) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBSplitRequest.split_key)
}
inline ::std::string* PiDBSplitRequest::mutable_split_key() {
  set_has_split_key();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBSplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBSplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:pidb.PiDBSplitRequest.split_key)
  if (!has_split_key()) {
    return NULL;
  }
  clear_has_split_key();
  return split_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBSplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    set_has_split_key();
  } else {
    clear_has_split_key();
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBSplitRequest.split_key)
}

// -------------------------------------------------------------------

// PiDBSplitResponse

// required bool success = 1;
inline bool PiDBSplitResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBSplitResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBSplitResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBSplitResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBSplitResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSplitResponse.success)
  return success_;
}
inline void PiDBSplitResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBSplitResponse.success)
}

// optional string redirect = 3;
inline bool PiDBSplitResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBSplitResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBSplitResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBSplitResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBSplitResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBSplitResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBSplitResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBSplitResponse.redirect)
}
#if LANG_CXX11
inline void PiDBSplitResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBSplitResponse.redirect)
}
#endif
inline void PiDBSplitResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBSplitResponse.redirect)
}
inline void PiDBSplitResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBSplitResponse.redirect)
}
inline ::std::string* PiDBSplitResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBSplitResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBSplitResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBSplitResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBSplitResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBSplitResponse.redirect)
}

// -------------------------------------------------------------------

// PiDBPullRequest

// required string leader_addr = 1;
inline bool PiDBPullRequest::has_leader_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBPullRequest::set_has_leader_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBPullRequest::clear_has_leader_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBPullRequest::clear_leader_addr() {
  leader_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_addr();
}
inline const ::std::string& PiDBPullRequest::leader_addr() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBPullRequest.leader_addr)
  return leader_addr_.GetNoArena();
}
inline void PiDBPullRequest::set_leader_addr(const ::std::string& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBPullRequest.leader_addr)
}
#if LANG_CXX11
inline void PiDBPullRequest::set_leader_addr(::std::string&& value) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBPullRequest.leader_addr)
}
#endif
inline void PiDBPullRequest::set_leader_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBPullRequest.leader_addr)
}
inline void PiDBPullRequest::set_leader_addr(const char* value, size_t size) {
  set_has_leader_addr();
  leader_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBPullRequest.leader_addr)
}
inline ::std::string* PiDBPullRequest::mutable_leader_addr() {
  set_has_leader_addr();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBPullRequest.leader_addr)
  return leader_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBPullRequest::release_leader_addr() {
  // @@protoc_insertion_point(field_release:pidb.PiDBPullRequest.leader_addr)
  if (!has_leader_addr()) {
    return NULL;
  }
  clear_has_leader_addr();
  return leader_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBPullRequest::set_allocated_leader_addr(::std::string* leader_addr) {
  if (leader_addr != NULL) {
    set_has_leader_addr();
  } else {
    clear_has_leader_addr();
  }
  leader_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_addr);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBPullRequest.leader_addr)
}

// required string raft_group = 2;
inline bool PiDBPullRequest::has_raft_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBPullRequest::set_has_raft_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBPullRequest::clear_has_raft_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBPullRequest::clear_raft_group() {
  raft_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_group();
}
inline const ::std::string& PiDBPullRequest::raft_group() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBPullRequest.raft_group)
  return raft_group_.GetNoArena();
}
inline void PiDBPullRequest::set_raft_group(const ::std::string& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBPullRequest.raft_group)
}
#if LANG_CXX11
inline void PiDBPullRequest::set_raft_group(::std::string&& value) {
  set_has_raft_group();
  raft_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBPullRequest.raft_group)
}
#endif
inline void PiDBPullRequest::set_raft_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBPullRequest.raft_group)
}
inline void PiDBPullRequest::set_raft_group(const char* value, size_t size) {
  set_has_raft_group();
  raft_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBPullRequest.raft_group)
}
inline ::std::string* PiDBPullRequest::mutable_raft_group() {
  set_has_raft_group();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBPullRequest.raft_group)
  return raft_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBPullRequest::release_raft_group() {
  // @@protoc_insertion_point(field_release:pidb.PiDBPullRequest.raft_group)
  if (!has_raft_group()) {
    return NULL;
  }
  clear_has_raft_group();
  return raft_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBPullRequest::set_allocated_raft_group(::std::string* raft_group) {
  if (raft_group != NULL) {
    set_has_raft_group();
  } else {
    clear_has_raft_group();
  }
  raft_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_group);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBPullRequest.raft_group)
}

// required string raft_conf = 3;
inline bool PiDBPullRequest::has_raft_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiDBPullRequest::set_has_raft_conf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiDBPullRequest::clear_has_raft_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiDBPullRequest::clear_raft_conf() {
  raft_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raft_conf();
}
inline const ::std::string& PiDBPullRequest::raft_conf() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBPullRequest.raft_conf)
  return raft_conf_.GetNoArena();
}
inline void PiDBPullRequest::set_raft_conf(const ::std::string& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBPullRequest.raft_conf)
}
#if LANG_CXX11
inline void PiDBPullRequest::set_raft_conf(::std::string&& value) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBPullRequest.raft_conf)
}
#endif
inline void PiDBPullRequest::set_raft_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBPullRequest.raft_conf)
}
inline void PiDBPullRequest::set_raft_conf(const char* value, size_t size) {
  set_has_raft_conf();
  raft_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBPullRequest.raft_conf)
}
inline ::std::string* PiDBPullRequest::mutable_raft_conf() {
  set_has_raft_conf();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBPullRequest.raft_conf)
  return raft_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBPullRequest::release_raft_conf() {
  // @@protoc_insertion_point(field_release:pidb.PiDBPullRequest.raft_conf)
  if (!has_raft_conf()) {
    return NULL;
  }
  clear_has_raft_conf();
  return raft_conf_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBPullRequest::set_allocated_raft_conf(::std::string* raft_conf) {
  if (raft_conf != NULL) {
    set_has_raft_conf();
  } else {
    clear_has_raft_conf();
  }
  raft_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_conf);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBPullRequest.raft_conf)
}

// -------------------------------------------------------------------

// PiDBPullResponse

// required bool success = 1;
inline bool PiDBPullResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiDBPullResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiDBPullResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiDBPullResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PiDBPullResponse::success() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBPullResponse.success)
  return success_;
}
inline void PiDBPullResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pidb.PiDBPullResponse.success)
}

// optional string redirect = 2;
inline bool PiDBPullResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiDBPullResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiDBPullResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiDBPullResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& PiDBPullResponse::redirect() const {
  // @@protoc_insertion_point(field_get:pidb.PiDBPullResponse.redirect)
  return redirect_.GetNoArena();
}
inline void PiDBPullResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pidb.PiDBPullResponse.redirect)
}
#if LANG_CXX11
inline void PiDBPullResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pidb.PiDBPullResponse.redirect)
}
#endif
inline void PiDBPullResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pidb.PiDBPullResponse.redirect)
}
inline void PiDBPullResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pidb.PiDBPullResponse.redirect)
}
inline ::std::string* PiDBPullResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:pidb.PiDBPullResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PiDBPullResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:pidb.PiDBPullResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PiDBPullResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:pidb.PiDBPullResponse.redirect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pidb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pidb::PiDBClientRequest_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pidb::PiDBClientRequest_Action>() {
  return ::pidb::PiDBClientRequest_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_master_2eproto
