!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ehds/Programs/PiDB/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
ACQUIRED_AFTER	src/port/thread_annotations.h	/^#define ACQUIRED_AFTER(/;"	d
ACQUIRED_BEFORE	src/port/thread_annotations.h	/^#define ACQUIRED_BEFORE(/;"	d
ARCH_CPU_ARM64_FAMILY	src/port/atomic_pointer.h	/^#define ARCH_CPU_ARM64_FAMILY /;"	d
ARCH_CPU_ARM_FAMILY	src/port/atomic_pointer.h	/^#define ARCH_CPU_ARM_FAMILY /;"	d
ARCH_CPU_MIPS_FAMILY	src/port/atomic_pointer.h	/^#define ARCH_CPU_MIPS_FAMILY /;"	d
ARCH_CPU_PPC_FAMILY	src/port/atomic_pointer.h	/^#define ARCH_CPU_PPC_FAMILY /;"	d
ARCH_CPU_X86_FAMILY	src/port/atomic_pointer.h	/^#define ARCH_CPU_X86_FAMILY /;"	d
ARRAY	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
ARRAY	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
ASSERT_EXCLUSIVE_LOCK	src/port/thread_annotations.h	/^#define ASSERT_EXCLUSIVE_LOCK(/;"	d
ASSERT_SHARED_LOCK	src/port/thread_annotations.h	/^#define ASSERT_SHARED_LOCK(/;"	d
AcceleratedCRC32C	src/port/port_stdcxx.h	/^inline uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::port	typeref:typename:uint32_t
Acquire_Load	src/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer	typeref:typename:void *
Action	src/master/master.proto	/^    enum Action{$/;"	g	message:pidb.PiDBClientRequest
Action	src/server/master.proto	/^    enum Action{$/;"	g	message:pidb.PiDBClientRequest
AddDescriptors	client/pidb.pb.cc	/^void AddDescriptors() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
AddDescriptors	demo/pidb.pb.cc	/^void AddDescriptors() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
AddDescriptorsImpl	client/pidb.pb.cc	/^void AddDescriptorsImpl() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
AddDescriptorsImpl	demo/pidb.pb.cc	/^void AddDescriptorsImpl() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
AddLeast	src/master/head/store_heartbeat.cpp	/^void StoreHeartbeat::AddLeast(const string& addr, int region_num){$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:void
AddNode	src/master/head/raft_manage.cpp	/^void RaftManage::AddNode(const string& group, const string& conf,$/;"	f	class:pidb::RaftManage	typeref:typename:void
AddRecord	src/server/route_table.cpp	/^void RouteTable::AddRecord(const std::string &s, const std::string &l, const std::string group) /;"	f	class:pidb::RouteTable	typeref:typename:void
AddRegion	src/master/head/master.cpp	/^void Master::AddRegion(const string& min_key,const string& max_key,$/;"	f	class:pidb::Master	typeref:typename:void
AddThing	src/master/head/guard_dog.cpp	/^    void GuardDog::AddThing(bool(*func)(void*), void* arg){$/;"	f	class:pidb::GuardDog	typeref:typename:void
AssertHeld	src/port/port_stdcxx.h	/^  void AssertHeld() ASSERT_EXCLUSIVE_LOCK() { }$/;"	f	class:leveldb::port::Mutex	typeref:typename:void
AtomicPointer	src/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	src/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	src/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
BLOCK_CLIENT_H	client/client.h	/^#define BLOCK_CLIENT_H$/;"	d
BLOCK_STATUS_H	src/include/pidb/status.h	/^#define BLOCK_STATUS_H$/;"	d
BOOL	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
BOOL	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
BUILD_UNITTEST	CMakeLists.txt	/^option(BUILD_UNITTEST "Build Test" OFF)$/;"	D
BuildRouteTable	src/server/route_table.cpp	/^void RouteTable::BuildRouteTable(const std::string &name) const{$/;"	f	class:pidb::RouteTable	typeref:typename:void
ByteSizeLong	client/pidb.pb.cc	/^size_t Empty::ByteSizeLong() const {$/;"	f	class:pidb::Empty	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBIterator::ByteSizeLong() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBOperator::ByteSizeLong() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBRequest::ByteSizeLong() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBResponse::ByteSizeLong() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBSnapshot::ByteSizeLong() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t PiDBWriteBatch::ByteSizeLong() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:size_t
ByteSizeLong	client/pidb.pb.cc	/^size_t Success::ByteSizeLong() const {$/;"	f	class:pidb::Success	typeref:typename:size_t
ByteSizeLong	demo/pidb.pb.cc	/^size_t PiDBRequest::ByteSizeLong() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:size_t
ByteSizeLong	demo/pidb.pb.cc	/^size_t PiDBResponse::ByteSizeLong() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:size_t
CANARY_ARGS	src/libs/json11/Makefile	/^CANARY_ARGS = -DJSON11_ENABLE_DR1467_CANARY=$(JSON11_ENABLE_DR1467_CANARY)$/;"	m
CHECK_TRAIT	src/libs/json11/test.cpp	/^#define CHECK_TRAIT(/;"	d	file:
CMAKE_CPP_FLAGS	CMakeLists.txt	/^set(CMAKE_CPP_FLAGS "-DGFLAGS_NS=${GFLAGS_NS}")$/;"	v
CMAKE_CPP_FLAGS	client/CMakeLists.txt	/^set(CMAKE_CPP_FLAGS "-DGFLAGS_NS=${GFLAGS_NS}")$/;"	v
CMAKE_CPP_FLAGS	demo/CMakeLists.txt	/^set(CMAKE_CPP_FLAGS "-DGFLAGS_NS=${GFLAGS_NS}")$/;"	v
CMAKE_CPP_FLAGS	src/master/CMakeLists.txt	/^set(CMAKE_CPP_FLAGS "${DEFINE_CLOCK_GETTIME} -DGFLAGS_NS=${GFLAGS_NS}")$/;"	v
CMAKE_CROSSCOMPILING	demo/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "-DBRPC_ENABLE_CPU_PROFILER")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CPP_FLAGS} -DNDEBUG -O2 -D__const__= -pipe -W -W/;"	v
CMAKE_CXX_FLAGS	client/CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")$/;"	v
CMAKE_CXX_FLAGS	client/CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "-DBRPC_ENABLE_CPU_PROFILER")$/;"	v
CMAKE_CXX_FLAGS	client/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CPP_FLAGS} -DNDEBUG -O2 -D__const__= -pipe -W -W/;"	v
CMAKE_CXX_FLAGS	demo/CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")$/;"	v
CMAKE_CXX_FLAGS	demo/CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "-DBRPC_ENABLE_CPU_PROFILER")$/;"	v
CMAKE_CXX_FLAGS	demo/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CPP_FLAGS} -DNDEBUG -O2 -D__const__= -pipe -W -W/;"	v
CMAKE_CXX_FLAGS	src/master/CMakeLists.txt	/^        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")$/;"	v
CMAKE_CXX_FLAGS	src/master/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CPP_FLAGS} -DNDEBUG -O2 -D__const__= -pipe -W -Wall -Wno-unused-par/;"	v
CMAKE_CXX_STANDARD	CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	client/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	demo/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	src/libs/json11/CMakeLists.txt	/^  set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	src/master/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	client/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	demo/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	src/libs/json11/CMakeLists.txt	/^  set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	src/master/CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_INSTALL_COMPONENT	demo/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	demo/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	demo/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	demo/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	demo/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	demo/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_PREFIX	src/libs/json11/CMakeLists.txt	/^  set(CMAKE_INSTALL_PREFIX \/usr)$/;"	v
CMAKE_INSTALL_SO_NO_EXE	demo/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v
CMAKE_PREFIX_PATH	CMakeLists.txt	/^set(CMAKE_PREFIX_PATH ${OUTPUT_PATH})$/;"	v
CMAKE_PREFIX_PATH	client/CMakeLists.txt	/^set(CMAKE_PREFIX_PATH ${OUTPUT_PATH})$/;"	v
CMAKE_PREFIX_PATH	demo/CMakeLists.txt	/^set(CMAKE_PREFIX_PATH ${OUTPUT_PATH})$/;"	v
CMAKE_PREFIX_PATH	src/master/CMakeLists.txt	/^set(CMAKE_PREFIX_PATH ${OUTPUT_PATH})$/;"	v
CMAKE_PROJECT_VERSION	CMakeLists.txt	/^set(CMAKE_PROJECT_VERSION 0)$/;"	v
CMAKE_PROJECT_VERSION_MAJOR	CMakeLists.txt	/^set(CMAKE_PROJECT_VERSION_MAJOR 0)$/;"	v
CMAKE_PROJECT_VERSION_MAJOR	CMakeLists.txt	/^set(CMAKE_PROJECT_VERSION_MAJOR 1)$/;"	v
COMMENTS	src/libs/json11/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
COMMENTS	src/master/head/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
CallMethod	client/pidb.pb.cc	/^void PiDBService::CallMethod(const ::google::protobuf::MethodDescriptor* method,$/;"	f	class:pidb::PiDBService	typeref:typename:void
CallMethod	demo/pidb.pb.cc	/^void PiDBService::CallMethod(const ::google::protobuf::MethodDescriptor* method,$/;"	f	class:pidb::PiDBService	typeref:typename:void
CheckIsAlive	src/master/head/route_table.cpp	/^bool RouteTable::CheckIsAlive(void* check_alive){$/;"	f	class:pidb::RouteTable	typeref:typename:bool
CheckIsAlive	src/master/head/store_heartbeat.cpp	/^bool StoreHeartbeat::CheckIsAlive(void* addr){$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:bool
CheckRAlive	src/master/head/route_table.h	/^	CheckRAlive(RouteTable* r, const string& group):$/;"	f	struct:pidb::CheckRAlive
CheckRAlive	src/master/head/route_table.h	/^struct CheckRAlive{$/;"	s	namespace:pidb
Clear	client/pidb.pb.cc	/^void Empty::Clear() {$/;"	f	class:pidb::Empty	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBIterator::Clear() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBOperator::Clear() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBRequest::Clear() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBResponse::Clear() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBSnapshot::Clear() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
Clear	client/pidb.pb.cc	/^void PiDBWriteBatch::Clear() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
Clear	client/pidb.pb.cc	/^void Success::Clear() {$/;"	f	class:pidb::Success	typeref:typename:void
Clear	demo/pidb.pb.cc	/^void PiDBRequest::Clear() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
Clear	demo/pidb.pb.cc	/^void PiDBResponse::Clear() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
Clear	src/master/head/route_table.cpp	/^void  RouteTable::Clear() {$/;"	f	class:pidb::RouteTable	typeref:typename:void
Clear	src/master/head/store_heartbeat.cpp	/^void  StoreHeartbeat::Clear() {$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:void
Clear	src/server/context_cache.h	/^        virtual void Clear(){map_.clear();}$/;"	f	class:pidb::ContextCache	typeref:typename:void
ClientClosure	src/master/head/master.h	/^    ClientClosure(Master* master, const PiDBClientRequest* request,$/;"	f	class:pidb::ClientClosure
ClientClosure	src/master/head/master.h	/^class ClientClosure : public braft::Closure {$/;"	c	namespace:pidb
Code	src/include/pidb/status.h	/^        enum Code {$/;"	g	class:pidb::Status
CondVar	src/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	src/port/port_stdcxx.h	/^  explicit CondVar(Mutex* mu) : mu_(mu) { assert(mu != nullptr); }$/;"	f	class:leveldb::port::CondVar
CondVar	src/port/port_stdcxx.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Context	src/server/context_cache.h	/^    class Context {$/;"	c	namespace:pidb
ContextCache	src/server/context_cache.h	/^        ContextCache() noexcept{$/;"	f	class:pidb::ContextCache
ContextCache	src/server/context_cache.h	/^    class ContextCache {$/;"	c	namespace:pidb
CopyFrom	client/pidb.pb.cc	/^void Empty::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::Empty	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void Empty::CopyFrom(const Empty& from) {$/;"	f	class:pidb::Empty	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBIterator::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBIterator::CopyFrom(const PiDBIterator& from) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBOperator::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBOperator::CopyFrom(const PiDBOperator& from) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBRequest::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBRequest::CopyFrom(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBResponse::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBResponse::CopyFrom(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBSnapshot::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBSnapshot::CopyFrom(const PiDBSnapshot& from) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBWriteBatch::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void PiDBWriteBatch::CopyFrom(const PiDBWriteBatch& from) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void Success::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::Success	typeref:typename:void
CopyFrom	client/pidb.pb.cc	/^void Success::CopyFrom(const Success& from) {$/;"	f	class:pidb::Success	typeref:typename:void
CopyFrom	demo/pidb.pb.cc	/^void PiDBRequest::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
CopyFrom	demo/pidb.pb.cc	/^void PiDBRequest::CopyFrom(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
CopyFrom	demo/pidb.pb.cc	/^void PiDBResponse::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
CopyFrom	demo/pidb.pb.cc	/^void PiDBResponse::CopyFrom(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
CopyState	src/util/status.cc	/^    const char* Status::CopyState(const char* state) {$/;"	f	class:pidb::Status	typeref:typename:const char *
Corruption	src/include/pidb/status.h	/^        static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:pidb::Status	typeref:typename:Status
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::Empty* Arena::CreateMaybeMessage< ::pidb::/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::Empty *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBIterator* Arena::CreateMaybeMessage< :/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBIterator *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBOperator* Arena::CreateMaybeMessage< :/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBOperator *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBRequest* Arena::CreateMaybeMessage< ::/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBRequest *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBResponse* Arena::CreateMaybeMessage< :/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBResponse *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBSnapshot* Arena::CreateMaybeMessage< :/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBSnapshot *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBWriteBatch* Arena::CreateMaybeMessage</;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBWriteBatch *
CreateMaybeMessage	client/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::Success* Arena::CreateMaybeMessage< ::pidb/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::Success *
CreateMaybeMessage	demo/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBRequest* Arena::CreateMaybeMessage< ::/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBRequest *
CreateMaybeMessage	demo/pidb.pb.cc	/^template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pidb::PiDBResponse* Arena::CreateMaybeMessage< :/;"	f	class:google::protobuf::Arena	typeref:typename:GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::pidb::PiDBResponse *
DEFINE_CLOCK_GETTIME	src/master/CMakeLists.txt	/^        set(DEFINE_CLOCK_GETTIME "-DNO_CLOCK_GETTIME_IN_MAC")$/;"	v
DELETE	src/master/master.proto	/^        DELETE = 3;$/;"	e	enum:pidb.PiDBClientRequest.Action
DELETE	src/server/master.proto	/^        DELETE = 3;$/;"	e	enum:pidb.PiDBClientRequest.Action
DO_	client/pidb.pb.cc	/^#define DO_(/;"	d	file:
DO_	demo/pidb.pb.cc	/^#define DO_(/;"	d	file:
DYNAMIC_LIB	CMakeLists.txt	/^set(DYNAMIC_LIB$/;"	v
DYNAMIC_LIB	client/CMakeLists.txt	/^set(DYNAMIC_LIB$/;"	v
DYNAMIC_LIB	demo/CMakeLists.txt	/^set(DYNAMIC_LIB$/;"	v
DYNAMIC_LIB	src/master/CMakeLists.txt	/^    set(DYNAMIC_LIB ${DYNAMIC_LIB}$/;"	v
DYNAMIC_LIB	src/master/CMakeLists.txt	/^set(DYNAMIC_LIB$/;"	v
Data	demo/server.cpp	/^    Data()$/;"	f	class:pidb::Data	file:
Data	demo/server.cpp	/^class Data : public braft::StateMachine {$/;"	c	namespace:pidb	file:
DataClosure	demo/server.cpp	/^	DataClosure(Data* data,$/;"	f	class:pidb::DataClosure	file:
DataClosure	demo/server.cpp	/^class DataClosure: public braft::Closure{$/;"	c	namespace:pidb	file:
DefalutOp_	src/master/head/master.h	/^        DefalutOp_, StoreHeartOp_, RegionHeartOp_, RegionSplitOp_$/;"	e	enum:pidb::Master::RaftOpType
DeleteLeast	src/master/head/store_heartbeat.cpp	/^void StoreHeartbeat::DeleteLeast(const string& addr){$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:void
DoAddRegion	src/master/head/master.cpp	/^void* Master::DoAddRegion(void* arg){$/;"	f	class:pidb::Master	typeref:typename:void *
DoHandleRegion	src/master/head/master.cpp	/^void Master::DoHandleRegion(braft::Iterator& iter){$/;"	f	class:pidb::Master	typeref:typename:void
DoHandleStore	src/master/head/master.cpp	/^void Master::DoHandleStore(braft::Iterator& iter){$/;"	f	class:pidb::Master	typeref:typename:void
DoHandleThings	src/master/head/guard_dog.cpp	/^    void* GuardDog::DoHandleThings(void* guard_dog){$/;"	f	class:pidb::GuardDog	typeref:typename:void *
DoRegionSplit	src/master/head/master.cpp	/^void Master::DoRegionSplit(braft::Iterator& iter){$/;"	f	class:pidb::Master	typeref:typename:void
EXAMPLE_LINK_SO	CMakeLists.txt	/^option(EXAMPLE_LINK_SO "Whether examples are linked dynamically" ON)$/;"	D
EXAMPLE_LINK_SO	client/CMakeLists.txt	/^option(EXAMPLE_LINK_SO "Whether examples are linked dynamically" OFF)$/;"	D
EXAMPLE_LINK_SO	demo/CMakeLists.txt	/^option(EXAMPLE_LINK_SO "Whether examples are linked dynamically" OFF)$/;"	D
EXAMPLE_LINK_SO	src/master/CMakeLists.txt	/^option(EXAMPLE_LINK_SO "Whether examples are linked dynamically" ON)$/;"	D
EXCLUSIVE_LOCKS_REQUIRED	src/port/thread_annotations.h	/^#define EXCLUSIVE_LOCKS_REQUIRED(/;"	d
EXCLUSIVE_LOCK_FUNCTION	src/port/thread_annotations.h	/^#define EXCLUSIVE_LOCK_FUNCTION(/;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	src/port/thread_annotations.h	/^#define EXCLUSIVE_TRYLOCK_FUNCTION(/;"	d
Echo	src/master/master.proto	/^ 	rpc Echo(EchoRequest) returns (EchoResponse);$/;"	r	service:pidb.MasterService	typeref:typename:EchoResponse
EchoRequest	src/master/master.proto	/^message EchoRequest {$/;"	m	package:pidb
EchoResponse	src/master/master.proto	/^message EchoResponse {$/;"	m	package:pidb
Empty	client/pidb.pb.cc	/^Empty::Empty()$/;"	f	class:pidb::Empty
Empty	client/pidb.pb.cc	/^Empty::Empty(const Empty& from)$/;"	f	class:pidb::Empty
Empty	client/pidb.pb.h	/^  Empty(Empty&& from) noexcept$/;"	f	class:pidb::Empty
Empty	client/pidb.pb.h	/^class Empty : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_definition:p/;"	c	namespace:pidb
Empty	client/pidb.proto	/^message Empty{}$/;"	m	package:pidb
Empty	src/server/pidb.proto	/^message Empty{}$/;"	m	package:pidb
EmptyDefaultTypeInternal	client/pidb.pb.cc	/^class EmptyDefaultTypeInternal {$/;"	c	namespace:pidb	file:
Erase	src/server/context_cache.h	/^    bool ContextCache<T>::Erase(int64_t context_id) {$/;"	f	class:pidb::ContextCache	typeref:typename:bool
FindRegion	src/server/route_table.cpp	/^const std::string & RouteTable::FindRegion(const std::string &key) const {$/;"	f	class:pidb::RouteTable	typeref:typename:const std::string &
GET	src/master/master.proto	/^        GET = 1;$/;"	e	enum:pidb.PiDBClientRequest.Action
GET	src/server/master.proto	/^        GET = 1;$/;"	e	enum:pidb.PiDBClientRequest.Action
GPERFTOOLS_LIBRARIES	CMakeLists.txt	/^        set (GPERFTOOLS_LIBRARIES "")$/;"	v
GPERFTOOLS_LIBRARIES	client/CMakeLists.txt	/^        set (GPERFTOOLS_LIBRARIES "")$/;"	v
GPERFTOOLS_LIBRARIES	demo/CMakeLists.txt	/^        set (GPERFTOOLS_LIBRARIES "")$/;"	v
GUARDED_BY	src/port/thread_annotations.h	/^#define GUARDED_BY(/;"	d
Get	client/pidb.pb.cc	/^void PiDBService::Get(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
Get	client/pidb.pb.cc	/^void PiDBService_Stub::Get(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
Get	client/pidb.proto	/^	rpc Get(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Get	src/server/context_cache.h	/^        const leveldb::Snapshot * Get() const{ return snapshot_;}$/;"	f	class:pidb::SnapshotContext	typeref:typename:const leveldb::Snapshot *
Get	src/server/context_cache.h	/^        leveldb::Iterator * Get() const{$/;"	f	class:pidb::IteratorContext	typeref:typename:leveldb::Iterator *
Get	src/server/context_cache.h	/^    std::shared_ptr<T> ContextCache<T>::Get(int64_t context_id) {$/;"	f	class:pidb::ContextCache	typeref:typename:std::shared_ptr<T>
Get	src/server/pidb.proto	/^	rpc Get(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Get	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::Get(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
Get	src/server/raftnode.cpp	/^    Status RaftNode::Get(const PiDBRequest *request, PiDBResponse *response,$/;"	f	class:pidb::RaftNode	typeref:typename:Status
Get	src/server/server.cpp	/^    Status Server::Get(const ::pidb::PiDBRequest *request,$/;"	f	class:pidb::Server	typeref:typename:Status
GetAddr	src/master/head/route_table.cpp	/^bool RouteTable::GetAddr(const string& group, string& addr){$/;"	f	class:pidb::RouteTable	typeref:typename:bool
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::Empty	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	client/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::Success	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	demo/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	demo/pidb.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::Arena *
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::Empty	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBIterator	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBOperator	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBRequest	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBResponse	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:int
GetCachedSize	client/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::Success	typeref:typename:int
GetCachedSize	demo/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBRequest	typeref:typename:int
GetCachedSize	demo/pidb.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:pidb::PiDBResponse	typeref:typename:int
GetConf	src/master/head/route_table.cpp	/^bool RouteTable::GetConf(const string& group, string& conf){$/;"	f	class:pidb::RouteTable	typeref:typename:bool
GetDB	src/server/raftnode.h	/^    scoped_db GetDB() const{$/;"	f	class:pidb::RaftNode	typeref:typename:scoped_db
GetDescriptor	client/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* PiDBService::GetDescriptor() {$/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::ServiceDescriptor *
GetDescriptor	demo/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* PiDBService::GetDescriptor() {$/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::ServiceDescriptor *
GetHeapProfile	src/port/port_stdcxx.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port	typeref:typename:bool
GetID	src/server/context_cache.h	/^        int64_t GetID() const{$/;"	f	class:pidb::Context	typeref:typename:int64_t
GetIterator	client/pidb.pb.cc	/^void PiDBService::GetIterator(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
GetIterator	client/pidb.pb.cc	/^void PiDBService_Stub::GetIterator(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
GetIterator	client/pidb.proto	/^	rpc GetIterator(PiDBIterator) returns (PiDBIterator);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBIterator
GetIterator	src/server/pidb.proto	/^	rpc GetIterator(PiDBIterator) returns (PiDBIterator);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBIterator
GetIterator	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::GetIterator(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
GetIterator	src/server/server.cpp	/^    int64_t Server::GetIterator(const std::string &start, const std::string &end) {$/;"	f	class:pidb::Server	typeref:typename:int64_t
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata Empty::GetMetadata() const {$/;"	f	class:pidb::Empty	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBIterator::GetMetadata() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBOperator::GetMetadata() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBRequest::GetMetadata() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBResponse::GetMetadata() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBSnapshot::GetMetadata() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata PiDBWriteBatch::GetMetadata() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::google::protobuf::Metadata
GetMetadata	client/pidb.pb.cc	/^::google::protobuf::Metadata Success::GetMetadata() const {$/;"	f	class:pidb::Success	typeref:typename:::google::protobuf::Metadata
GetMetadata	demo/pidb.pb.cc	/^::google::protobuf::Metadata PiDBRequest::GetMetadata() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::Metadata
GetMetadata	demo/pidb.pb.cc	/^::google::protobuf::Metadata PiDBResponse::GetMetadata() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::Metadata
GetRange	src/master/head/route_table.cpp	/^bool RouteTable::GetRange(const string& group,string& min_key,$/;"	f	class:pidb::RouteTable	typeref:typename:bool
GetRequestPrototype	client/pidb.pb.cc	/^const ::google::protobuf::Message& PiDBService::GetRequestPrototype($/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::Message &
GetRequestPrototype	demo/pidb.pb.cc	/^const ::google::protobuf::Message& PiDBService::GetRequestPrototype($/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::Message &
GetResponsePrototype	client/pidb.pb.cc	/^const ::google::protobuf::Message& PiDBService::GetResponsePrototype($/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::Message &
GetResponsePrototype	demo/pidb.pb.cc	/^const ::google::protobuf::Message& PiDBService::GetResponsePrototype($/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::Message &
GetRouteInfo	src/master/head/route_table.cpp	/^bool RouteTable::GetRouteInfo(const string& key, string& raft_group,$/;"	f	class:pidb::RouteTable	typeref:typename:bool
GetSize	src/master/head/route_table.cpp	/^int RouteTable::GetSize() {$/;"	f	class:pidb::RouteTable	typeref:typename:int
GetSize	src/master/head/store_heartbeat.cpp	/^int  StoreHeartbeat::GetSize() {$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:int
GetSnapshot	client/pidb.pb.cc	/^void PiDBService::GetSnapshot(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
GetSnapshot	client/pidb.pb.cc	/^void PiDBService_Stub::GetSnapshot(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
GetSnapshot	client/pidb.proto	/^	rpc GetSnapshot(Empty) returns (PiDBSnapshot);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBSnapshot
GetSnapshot	src/server/pidb.proto	/^	rpc GetSnapshot(Empty) returns (PiDBSnapshot);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBSnapshot
GetSnapshot	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::GetSnapshot(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
GetSnapshot	src/server/server.cpp	/^    int64_t Server::GetSnapshot() {$/;"	f	class:pidb::Server	typeref:typename:int64_t
GetState	src/master/head/route_table.cpp	/^int RouteTable::GetState(const string& raft_group){$/;"	f	class:pidb::RouteTable	typeref:typename:int
GetStoreInfo	src/master/head/store_heartbeat.cpp	/^int StoreHeartbeat::GetStoreInfo(int size, const std::vector<string>* vin,$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:int
GuardDog	src/master/head/guard_dog.cpp	/^    GuardDog::GuardDog(int cycle, int interval){$/;"	f	class:pidb::GuardDog
GuardDog	src/master/head/guard_dog.h	/^class GuardDog{$/;"	c	namespace:pidb
HandleEchoResponse	src/master/head/raft_manage.h	/^    static void HandleEchoResponse($/;"	f	class:pidb::RaftManage	typeref:typename:void
HandleEchoResponse	src/master/test_main.cpp	/^void HandleEchoResponse($/;"	f	typeref:typename:void
HandleHeartbeat	src/server/raftnode.cpp	/^    void RaftNode::HandleHeartbeat() {$/;"	f	class:pidb::RaftNode	typeref:typename:void
HandleHeartbeat	src/server/server.cpp	/^    void Server::HandleHeartbeat() {$/;"	f	class:pidb::Server	typeref:typename:void
HandleRaftManage	src/server/server.cpp	/^    void Server::HandleRaftManage(const ::pidb::PiDBRaftManageRequest *request, ::pidb::PiDBRaft/;"	f	class:pidb::Server	typeref:typename:void
HandleRegion	src/master/head/master.cpp	/^void Master::HandleRegion(const PiDBRegionRequest* request,$/;"	f	class:pidb::Master	typeref:typename:void
HandleStore	src/master/head/master.cpp	/^void Master::HandleStore(const PiDBStoreRequest* request,$/;"	f	class:pidb::Master	typeref:typename:void
HandleThings	src/master/head/guard_dog.cpp	/^    void GuardDog::HandleThings(){$/;"	f	class:pidb::GuardDog	typeref:typename:void
HeartbeatTimer	src/server/server.h	/^class HeartbeatTimer:public ServerTimer{$/;"	c	namespace:pidb
IOError	src/include/pidb/status.h	/^        static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:pidb::Status	typeref:typename:Status
ISHL	src/master/head/master.h	/^    ISHL(Master* m, const string& o, const string& n):$/;"	f	struct:pidb::ISHL
ISHL	src/master/head/master.h	/^struct ISHL{$/;"	s	namespace:pidb
IfSplitHasLeader	src/master/head/master.cpp	/^void Master::IfSplitHasLeader(void* arg, brpc::Controller* cntl){$/;"	f	class:pidb::Master	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void Empty::InitAsDefaultInstance() {$/;"	f	class:pidb::Empty	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBIterator::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBOperator::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBRequest::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBResponse::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBSnapshot::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void PiDBWriteBatch::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
InitAsDefaultInstance	client/pidb.pb.cc	/^void Success::InitAsDefaultInstance() {$/;"	f	class:pidb::Success	typeref:typename:void
InitAsDefaultInstance	demo/pidb.pb.cc	/^void PiDBRequest::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
InitAsDefaultInstance	demo/pidb.pb.cc	/^void PiDBResponse::InitAsDefaultInstance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
InitDefaults	client/pidb.pb.cc	/^void InitDefaults() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
InitDefaults	demo/pidb.pb.cc	/^void InitDefaults() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
InitDefaultsEmpty	client/pidb.pb.cc	/^static void InitDefaultsEmpty() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBIterator	client/pidb.pb.cc	/^static void InitDefaultsPiDBIterator() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBOperator	client/pidb.pb.cc	/^static void InitDefaultsPiDBOperator() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBRequest	client/pidb.pb.cc	/^static void InitDefaultsPiDBRequest() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBRequest	demo/pidb.pb.cc	/^static void InitDefaultsPiDBRequest() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBResponse	client/pidb.pb.cc	/^static void InitDefaultsPiDBResponse() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBResponse	demo/pidb.pb.cc	/^static void InitDefaultsPiDBResponse() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBSnapshot	client/pidb.pb.cc	/^static void InitDefaultsPiDBSnapshot() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsPiDBWriteBatch	client/pidb.pb.cc	/^static void InitDefaultsPiDBWriteBatch() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
InitDefaultsSuccess	client/pidb.pb.cc	/^static void InitDefaultsSuccess() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void	file:
Initial	src/master/head/store_heartbeat.h	/^	static StoreHeartbeat* Initial() {$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:StoreHeartbeat *
InitialStub	src/master/head/raft_manage.cpp	/^void RaftManage::InitialStub(pidb::MasterService_Stub** stub, const string& addr,$/;"	f	class:pidb::RaftManage	typeref:typename:void
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::Empty	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBIterator::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBIterator	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBOperator::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBOperator	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBRequest::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBResponse::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBSnapshot::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBSnapshot	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* PiDBWriteBatch::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	client/pidb.pb.cc	/^::google::protobuf::uint8* Success::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::Success	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	demo/pidb.pb.cc	/^::google::protobuf::uint8* PiDBRequest::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	demo/pidb.pb.cc	/^::google::protobuf::uint8* PiDBResponse::InternalSerializeWithCachedSizesToArray($/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::uint8 *
InternalSwap	client/pidb.pb.cc	/^void Empty::InternalSwap(Empty* other) {$/;"	f	class:pidb::Empty	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBIterator::InternalSwap(PiDBIterator* other) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBOperator::InternalSwap(PiDBOperator* other) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBRequest::InternalSwap(PiDBRequest* other) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBResponse::InternalSwap(PiDBResponse* other) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBSnapshot::InternalSwap(PiDBSnapshot* other) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void PiDBWriteBatch::InternalSwap(PiDBWriteBatch* other) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
InternalSwap	client/pidb.pb.cc	/^void Success::InternalSwap(Success* other) {$/;"	f	class:pidb::Success	typeref:typename:void
InternalSwap	demo/pidb.pb.cc	/^void PiDBRequest::InternalSwap(PiDBRequest* other) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
InternalSwap	demo/pidb.pb.cc	/^void PiDBResponse::InternalSwap(PiDBResponse* other) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
InvalidArgument	src/include/pidb/status.h	/^        static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:pidb::Status	typeref:typename:Status
IsCorruption	src/include/pidb/status.h	/^        bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:pidb::Status	typeref:typename:bool
IsDone	src/server/server.cpp	/^    bool ServerClosure::IsDone() {$/;"	f	class:pidb::ServerClosure	typeref:typename:bool
IsIOError	src/include/pidb/status.h	/^        bool IsIOError() const { return code() == kIOError; }$/;"	f	class:pidb::Status	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool Empty::IsInitialized() const {$/;"	f	class:pidb::Empty	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBIterator::IsInitialized() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBOperator::IsInitialized() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBRequest::IsInitialized() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBResponse::IsInitialized() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBSnapshot::IsInitialized() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool PiDBWriteBatch::IsInitialized() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:bool
IsInitialized	client/pidb.pb.cc	/^bool Success::IsInitialized() const {$/;"	f	class:pidb::Success	typeref:typename:bool
IsInitialized	demo/pidb.pb.cc	/^bool PiDBRequest::IsInitialized() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
IsInitialized	demo/pidb.pb.cc	/^bool PiDBResponse::IsInitialized() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
IsInvalidArgument	src/include/pidb/status.h	/^        bool IsInvalidArgument() const { return code() == kInvalidArgument; }$/;"	f	class:pidb::Status	typeref:typename:bool
IsLeader	src/server/raftnode.h	/^    bool IsLeader() const{$/;"	f	class:pidb::RaftNode	typeref:typename:bool
IsNotFound	src/include/pidb/status.h	/^        bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:pidb::Status	typeref:typename:bool
IsNotSupportedError	src/include/pidb/status.h	/^        bool IsNotSupportedError() const { return code() == kNotSupported; }$/;"	f	class:pidb::Status	typeref:typename:bool
Iterate	client/pidb.pb.cc	/^void PiDBService::Iterate(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
Iterate	client/pidb.pb.cc	/^void PiDBService_Stub::Iterate(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
Iterate	client/pidb.proto	/^	rpc Iterate (PiDBIterator) returns (PiDBResponse);    \/\/Iterate  暂时默认为只能next$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Iterate	src/server/pidb.proto	/^	rpc Iterate (PiDBIterator) returns (PiDBResponse);    \/\/Iterate  暂时默认为只能next$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Iterate	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::Iterate(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
IteratorContext	src/server/context_cache.h	/^        IteratorContext(std::unique_ptr<leveldb::Iterator> iterator,const std::string &group)$/;"	f	class:pidb::IteratorContext
IteratorContext	src/server/context_cache.h	/^    class IteratorContext:public Context{$/;"	c	namespace:pidb
JSON11_BUILD_TESTS	src/libs/json11/CMakeLists.txt	/^option(JSON11_BUILD_TESTS "Build unit tests" OFF)$/;"	D
JSON11_ENABLE_DR1467_CANARY	src/libs/json11/CMakeLists.txt	/^option(JSON11_ENABLE_DR1467_CANARY "Enable canary test for DR 1467" OFF)$/;"	D
JSON11_ENABLE_DR1467_CANARY	src/libs/json11/test.cpp	/^#define JSON11_ENABLE_DR1467_CANARY /;"	d	file:
JSON11_TEST_ASSERT	src/libs/json11/test.cpp	/^#define JSON11_TEST_ASSERT(/;"	d	file:
JSON11_TEST_CASE	src/libs/json11/test.cpp	/^#define JSON11_TEST_CASE(/;"	d	file:
JSON11_TEST_CASE	src/libs/json11/test.cpp	/^JSON11_TEST_CASE(json11_test) {$/;"	f
JSON11_TEST_CPP_PREFIX_CODE	src/libs/json11/test.cpp	/^#define JSON11_TEST_CPP_PREFIX_CODE$/;"	d	file:
JSON11_TEST_CPP_SUFFIX_CODE	src/libs/json11/test.cpp	/^#define JSON11_TEST_CPP_SUFFIX_CODE$/;"	d	file:
JSON11_TEST_STANDALONE_MAIN	src/libs/json11/test.cpp	/^#define JSON11_TEST_STANDALONE_MAIN /;"	d	file:
Json	src/libs/json11/json11.cpp	/^Json::Json() noexcept                  : m_ptr(statics().null) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(Json::array &&values)       : m_ptr(make_shared<JsonArray>(move(values))) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(Json::object &&values)      : m_ptr(make_shared<JsonObject>(move(values))) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(bool value)                 : m_ptr(value ? statics().t : statics().f) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(const Json::array &values)  : m_ptr(make_shared<JsonArray>(values)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(const Json::object &values) : m_ptr(make_shared<JsonObject>(values)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(const char * value)         : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(const string &value)        : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(double value)               : m_ptr(make_shared<JsonDouble>(value)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(int value)                  : m_ptr(make_shared<JsonInt>(value)) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(std::nullptr_t) noexcept    : m_ptr(statics().null) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.cpp	/^Json::Json(string &&value)             : m_ptr(make_shared<JsonString>(move(value))) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.hpp	/^    Json(const M & m) : Json(object(m.begin(), m.end())) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.hpp	/^    Json(const T & t) : Json(t.to_json()) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.hpp	/^    Json(const V & v) : Json(array(v.begin(), v.end())) {}$/;"	f	class:json11::Json
Json	src/libs/json11/json11.hpp	/^class Json final {$/;"	c	namespace:json11
Json	src/master/head/json11.cpp	/^Json::Json() noexcept                  : m_ptr(statics().null) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(Json::array &&values)       : m_ptr(make_shared<JsonArray>(move(values))) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(Json::object &&values)      : m_ptr(make_shared<JsonObject>(move(values))) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(bool value)                 : m_ptr(value ? statics().t : statics().f) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(const Json::array &values)  : m_ptr(make_shared<JsonArray>(values)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(const Json::object &values) : m_ptr(make_shared<JsonObject>(values)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(const char * value)         : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(const string &value)        : m_ptr(make_shared<JsonString>(value)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(double value)               : m_ptr(make_shared<JsonDouble>(value)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(int value)                  : m_ptr(make_shared<JsonInt>(value)) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(std::nullptr_t) noexcept    : m_ptr(statics().null) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.cpp	/^Json::Json(string &&value)             : m_ptr(make_shared<JsonString>(move(value))) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.hpp	/^    Json(const M & m) : Json(object(m.begin(), m.end())) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.hpp	/^    Json(const T & t) : Json(t.to_json()) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.hpp	/^    Json(const V & v) : Json(array(v.begin(), v.end())) {}$/;"	f	class:json11::Json
Json	src/master/head/json11.hpp	/^class Json final {$/;"	c	namespace:json11
JsonArray	src/libs/json11/json11.cpp	/^    explicit JsonArray(Json::array &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonArray	file:
JsonArray	src/libs/json11/json11.cpp	/^    explicit JsonArray(const Json::array &value) : Value(value) {}$/;"	f	class:json11::JsonArray	file:
JsonArray	src/libs/json11/json11.cpp	/^class JsonArray final : public Value<Json::ARRAY, Json::array> {$/;"	c	namespace:json11	file:
JsonArray	src/master/head/json11.cpp	/^    explicit JsonArray(Json::array &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonArray	file:
JsonArray	src/master/head/json11.cpp	/^    explicit JsonArray(const Json::array &value) : Value(value) {}$/;"	f	class:json11::JsonArray	file:
JsonArray	src/master/head/json11.cpp	/^class JsonArray final : public Value<Json::ARRAY, Json::array> {$/;"	c	namespace:json11	file:
JsonBoolean	src/libs/json11/json11.cpp	/^    explicit JsonBoolean(bool value) : Value(value) {}$/;"	f	class:json11::JsonBoolean	file:
JsonBoolean	src/libs/json11/json11.cpp	/^class JsonBoolean final : public Value<Json::BOOL, bool> {$/;"	c	namespace:json11	file:
JsonBoolean	src/master/head/json11.cpp	/^    explicit JsonBoolean(bool value) : Value(value) {}$/;"	f	class:json11::JsonBoolean	file:
JsonBoolean	src/master/head/json11.cpp	/^class JsonBoolean final : public Value<Json::BOOL, bool> {$/;"	c	namespace:json11	file:
JsonDouble	src/libs/json11/json11.cpp	/^    explicit JsonDouble(double value) : Value(value) {}$/;"	f	class:json11::JsonDouble	file:
JsonDouble	src/libs/json11/json11.cpp	/^class JsonDouble final : public Value<Json::NUMBER, double> {$/;"	c	namespace:json11	file:
JsonDouble	src/master/head/json11.cpp	/^    explicit JsonDouble(double value) : Value(value) {}$/;"	f	class:json11::JsonDouble	file:
JsonDouble	src/master/head/json11.cpp	/^class JsonDouble final : public Value<Json::NUMBER, double> {$/;"	c	namespace:json11	file:
JsonInt	src/libs/json11/json11.cpp	/^    explicit JsonInt(int value) : Value(value) {}$/;"	f	class:json11::JsonInt	file:
JsonInt	src/libs/json11/json11.cpp	/^class JsonInt final : public Value<Json::NUMBER, int> {$/;"	c	namespace:json11	file:
JsonInt	src/master/head/json11.cpp	/^    explicit JsonInt(int value) : Value(value) {}$/;"	f	class:json11::JsonInt	file:
JsonInt	src/master/head/json11.cpp	/^class JsonInt final : public Value<Json::NUMBER, int> {$/;"	c	namespace:json11	file:
JsonNull	src/libs/json11/json11.cpp	/^    JsonNull() : Value({}) {}$/;"	f	class:json11::JsonNull	file:
JsonNull	src/libs/json11/json11.cpp	/^class JsonNull final : public Value<Json::NUL, NullStruct> {$/;"	c	namespace:json11	file:
JsonNull	src/master/head/json11.cpp	/^    JsonNull() : Value({}) {}$/;"	f	class:json11::JsonNull	file:
JsonNull	src/master/head/json11.cpp	/^class JsonNull final : public Value<Json::NUL, NullStruct> {$/;"	c	namespace:json11	file:
JsonObject	src/libs/json11/json11.cpp	/^    explicit JsonObject(Json::object &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonObject	file:
JsonObject	src/libs/json11/json11.cpp	/^    explicit JsonObject(const Json::object &value) : Value(value) {}$/;"	f	class:json11::JsonObject	file:
JsonObject	src/libs/json11/json11.cpp	/^class JsonObject final : public Value<Json::OBJECT, Json::object> {$/;"	c	namespace:json11	file:
JsonObject	src/master/head/json11.cpp	/^    explicit JsonObject(Json::object &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonObject	file:
JsonObject	src/master/head/json11.cpp	/^    explicit JsonObject(const Json::object &value) : Value(value) {}$/;"	f	class:json11::JsonObject	file:
JsonObject	src/master/head/json11.cpp	/^class JsonObject final : public Value<Json::OBJECT, Json::object> {$/;"	c	namespace:json11	file:
JsonParse	src/libs/json11/json11.hpp	/^enum JsonParse {$/;"	g	namespace:json11
JsonParse	src/master/head/json11.hpp	/^enum JsonParse {$/;"	g	namespace:json11
JsonParser	src/libs/json11/json11.cpp	/^struct JsonParser final {$/;"	s	namespace:json11::__anon65ab184d0111	file:
JsonParser	src/master/head/json11.cpp	/^struct JsonParser final {$/;"	s	namespace:json11::__anon36d798650111	file:
JsonString	src/libs/json11/json11.cpp	/^    explicit JsonString(const string &value) : Value(value) {}$/;"	f	class:json11::JsonString	file:
JsonString	src/libs/json11/json11.cpp	/^    explicit JsonString(string &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonString	file:
JsonString	src/libs/json11/json11.cpp	/^class JsonString final : public Value<Json::STRING, string> {$/;"	c	namespace:json11	file:
JsonString	src/master/head/json11.cpp	/^    explicit JsonString(const string &value) : Value(value) {}$/;"	f	class:json11::JsonString	file:
JsonString	src/master/head/json11.cpp	/^    explicit JsonString(string &&value)      : Value(move(value)) {}$/;"	f	class:json11::JsonString	file:
JsonString	src/master/head/json11.cpp	/^class JsonString final : public Value<Json::STRING, string> {$/;"	c	namespace:json11	file:
JsonValue	src/libs/json11/json11.hpp	/^class JsonValue {$/;"	c	namespace:json11
JsonValue	src/master/head/json11.hpp	/^class JsonValue {$/;"	c	namespace:json11
LEVELDB_HAVE_MEMORY_BARRIER	src/port/atomic_pointer.h	/^#define LEVELDB_HAVE_MEMORY_BARRIER$/;"	d
LINK_TCMALLOC	CMakeLists.txt	/^option(LINK_TCMALLOC "Link tcmalloc if possible" ON)$/;"	D
LINK_TCMALLOC	client/CMakeLists.txt	/^option(LINK_TCMALLOC "Link tcmalloc if possible" ON)$/;"	D
LINK_TCMALLOC	demo/CMakeLists.txt	/^option(LINK_TCMALLOC "Link tcmalloc if possible" ON)$/;"	D
LOCKABLE	src/port/thread_annotations.h	/^#define LOCKABLE /;"	d
LOCKS_EXCLUDED	src/port/thread_annotations.h	/^#define LOCKS_EXCLUDED(/;"	d
LOCK_RETURNED	src/port/thread_annotations.h	/^#define LOCK_RETURNED(/;"	d
Lock	src/port/port_stdcxx.h	/^  void Lock() EXCLUSIVE_LOCK_FUNCTION() { mu_.lock(); }$/;"	f	class:leveldb::port::Mutex	typeref:typename:void
Master	src/master/head/master.cpp	/^Master::Master(MasterArg* maste_arg){$/;"	f	class:pidb::Master
Master	src/master/head/master.h	/^class Master : public braft::StateMachine {$/;"	c	namespace:pidb
MasterArg	src/master/head/master.h	/^    MasterArg(int a, int b, int c, int d, int e, int f, int g,$/;"	f	struct:pidb::MasterArg
MasterArg	src/master/head/master.h	/^struct MasterArg{$/;"	s	namespace:pidb
MasterService	src/master/master.proto	/^service MasterService {$/;"	s	package:pidb
MasterService	src/server/master.proto	/^service MasterService {$/;"	s	package:pidb
MasterServiceImpl	src/master/head/master.h	/^    explicit MasterServiceImpl(Master* master) : master_(master) {}$/;"	f	class:pidb::MasterServiceImpl
MasterServiceImpl	src/master/head/master.h	/^class MasterServiceImpl : public MasterService {$/;"	c	namespace:pidb
MasterServiceImpl	src/server/master_service_impl.h	/^        explicit MasterServiceImpl(Server *server) : server_(server) {};$/;"	f	class:pidb::MasterServiceImpl
MasterServiceImpl	src/server/master_service_impl.h	/^    class MasterServiceImpl : public MasterService {$/;"	c	namespace:pidb
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::Empty	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void *
MaybeArenaPtr	client/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::Success	typeref:typename:void *
MaybeArenaPtr	demo/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void *
MaybeArenaPtr	demo/pidb.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void *
MergeFrom	client/pidb.pb.cc	/^void Empty::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::Empty	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void Empty::MergeFrom(const Empty& from) {$/;"	f	class:pidb::Empty	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBIterator::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBIterator::MergeFrom(const PiDBIterator& from) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBOperator::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBOperator::MergeFrom(const PiDBOperator& from) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBRequest::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBRequest::MergeFrom(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBResponse::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBResponse::MergeFrom(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBSnapshot::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBSnapshot::MergeFrom(const PiDBSnapshot& from) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBWriteBatch::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void PiDBWriteBatch::MergeFrom(const PiDBWriteBatch& from) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void Success::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::Success	typeref:typename:void
MergeFrom	client/pidb.pb.cc	/^void Success::MergeFrom(const Success& from) {$/;"	f	class:pidb::Success	typeref:typename:void
MergeFrom	demo/pidb.pb.cc	/^void PiDBRequest::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
MergeFrom	demo/pidb.pb.cc	/^void PiDBRequest::MergeFrom(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
MergeFrom	demo/pidb.pb.cc	/^void PiDBResponse::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
MergeFrom	demo/pidb.pb.cc	/^void PiDBResponse::MergeFrom(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool Empty::MergePartialFromCodedStream($/;"	f	class:pidb::Empty	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBIterator::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBIterator	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBOperator::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBOperator	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBRequest::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBResponse::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBSnapshot::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBSnapshot	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool PiDBWriteBatch::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:bool
MergePartialFromCodedStream	client/pidb.pb.cc	/^bool Success::MergePartialFromCodedStream($/;"	f	class:pidb::Success	typeref:typename:bool
MergePartialFromCodedStream	demo/pidb.pb.cc	/^bool PiDBRequest::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
MergePartialFromCodedStream	demo/pidb.pb.cc	/^bool PiDBResponse::MergePartialFromCodedStream($/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
Mutex	src/port/port_example.h	/^class LOCKABLE Mutex {$/;"	c	namespace:leveldb::port
Mutex	src/port/port_stdcxx.h	/^class LOCKABLE Mutex {$/;"	c	namespace:leveldb::port
NO_THREAD_SAFETY_ANALYSIS	src/port/thread_annotations.h	/^#define NO_THREAD_SAFETY_ANALYSIS /;"	d
NUL	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
NUL	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
NUMBER	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
NUMBER	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
New	client/pidb.pb.h	/^  Empty* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::Empty	typeref:typename:Empty *
New	client/pidb.pb.h	/^  PiDBIterator* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBIterator	typeref:typename:PiDBIterator *
New	client/pidb.pb.h	/^  PiDBOperator* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBOperator	typeref:typename:PiDBOperator *
New	client/pidb.pb.h	/^  PiDBRequest* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest *
New	client/pidb.pb.h	/^  PiDBResponse* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse *
New	client/pidb.pb.h	/^  PiDBSnapshot* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:PiDBSnapshot *
New	client/pidb.pb.h	/^  PiDBWriteBatch* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:PiDBWriteBatch *
New	client/pidb.pb.h	/^  Success* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::Success	typeref:typename:Success *
New	client/pidb.pb.h	/^  inline Empty* New() const final {$/;"	f	class:pidb::Empty	typeref:typename:Empty *
New	client/pidb.pb.h	/^  inline PiDBIterator* New() const final {$/;"	f	class:pidb::PiDBIterator	typeref:typename:PiDBIterator *
New	client/pidb.pb.h	/^  inline PiDBOperator* New() const final {$/;"	f	class:pidb::PiDBOperator	typeref:typename:PiDBOperator *
New	client/pidb.pb.h	/^  inline PiDBRequest* New() const final {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest *
New	client/pidb.pb.h	/^  inline PiDBResponse* New() const final {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse *
New	client/pidb.pb.h	/^  inline PiDBSnapshot* New() const final {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:PiDBSnapshot *
New	client/pidb.pb.h	/^  inline PiDBWriteBatch* New() const final {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:PiDBWriteBatch *
New	client/pidb.pb.h	/^  inline Success* New() const final {$/;"	f	class:pidb::Success	typeref:typename:Success *
New	demo/pidb.pb.h	/^  PiDBRequest* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest *
New	demo/pidb.pb.h	/^  PiDBResponse* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse *
New	demo/pidb.pb.h	/^  inline PiDBRequest* New() const final {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest *
New	demo/pidb.pb.h	/^  inline PiDBResponse* New() const final {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse *
Next	src/server/server.cpp	/^    Status Server::Next(int64_t id, std::string *value) {$/;"	f	class:pidb::Server	typeref:typename:Status
NoBarrier_Load	src/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer	typeref:typename:void *
NoBarrier_Store	src/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer	typeref:typename:void
NotFound	src/include/pidb/status.h	/^        static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:pidb::Status	typeref:typename:Status
NotSupported	src/include/pidb/status.h	/^        static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:pidb::Status	typeref:typename:Status
NullStruct	src/libs/json11/json11.cpp	/^struct NullStruct {$/;"	s	namespace:json11	file:
NullStruct	src/master/head/json11.cpp	/^struct NullStruct {$/;"	s	namespace:json11	file:
OBJECT	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
OBJECT	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
OK	src/include/pidb/status.h	/^        static Status OK() { return Status(); }$/;"	f	class:pidb::Status	typeref:typename:Status
PIDB_CONTEXT_CACHE_H	src/server/context_cache.h	/^#define PIDB_CONTEXT_CACHE_H$/;"	d
PIDB_GUARD_DOG_H	src/master/head/guard_dog.h	/^#define PIDB_GUARD_DOG_H$/;"	d
PIDB_MASTER_H	src/master/head/master.h	/^#define PIDB_MASTER_H$/;"	d
PIDB_MASTER_SERVICE_IMPL_H	src/server/master_service_impl.h	/^#define PIDB_MASTER_SERVICE_IMPL_H$/;"	d
PIDB_OPTIONS_H	src/include/pidb/options.h	/^#define PIDB_OPTIONS_H$/;"	d
PIDB_PIDB_SERVICE_IMPL_H_	src/server/pidb_service_impl.h	/^#define PIDB_PIDB_SERVICE_IMPL_H_$/;"	d
PIDB_PUBLIC_INCLUDE_DIR	CMakeLists.txt	/^set(PIDB_PUBLIC_INCLUDE_DIR "include\/pidb")$/;"	v
PIDB_RAFTNODE_H_	src/server/raftnode.h	/^#define PIDB_RAFTNODE_H_$/;"	d
PIDB_RAFT_MANAGE_H	src/master/head/raft_manage.h	/^#define PIDB_RAFT_MANAGE_H$/;"	d
PIDB_REMOTE_FILE_SEND_H	src/server/remote_file_send.h	/^#define PIDB_REMOTE_FILE_SEND_H$/;"	d
PIDB_ROUTE_TABLE_H	src/master/head/route_table.h	/^#define PIDB_ROUTE_TABLE_H$/;"	d
PIDB_ROUTE_TABLE_H	src/server/route_table.h	/^#define PIDB_ROUTE_TABLE_H$/;"	d
PIDB_SERVER_DIR	CMakeLists.txt	/^set(PIDB_SERVER_DIR "src\/server")$/;"	v
PIDB_SERVER_H	src/server/server.h	/^#define PIDB_SERVER_H$/;"	d
PIDB_SHARED_DB_H_	src/server/shareddb.h	/^#define PIDB_SHARED_DB_H_$/;"	d
PIDB_STORE_HEARTBEAT_H	src/master/head/store_heartbeat.h	/^#define PIDB_STORE_HEARTBEAT_H$/;"	d
PORT_ATOMIC_POINTER_H_	src/port/atomic_pointer.h	/^#define PORT_ATOMIC_POINTER_H_$/;"	d
PROTOBUF_INCLUDED_pidb_2eproto	client/pidb.pb.h	/^#define PROTOBUF_INCLUDED_pidb_2eproto$/;"	d
PROTOBUF_INCLUDED_pidb_2eproto	demo/pidb.pb.h	/^#define PROTOBUF_INCLUDED_pidb_2eproto$/;"	d
PROTOBUF_INTERNAL_EXPORT_protobuf_pidb_2eproto	client/pidb.pb.h	/^#define PROTOBUF_INTERNAL_EXPORT_protobuf_pidb_2eproto /;"	d
PROTOBUF_INTERNAL_EXPORT_protobuf_pidb_2eproto	demo/pidb.pb.h	/^#define PROTOBUF_INTERNAL_EXPORT_protobuf_pidb_2eproto /;"	d
PROTOBUF_PROTOC_EXECUTABLE	CMakeLists.txt	/^    set (PROTOBUF_PROTOC_EXECUTABLE "${PROTO_LIB_DIR}\/..\/bin\/protoc")$/;"	v
PROTOBUF_PROTOC_EXECUTABLE	client/CMakeLists.txt	/^    set (PROTOBUF_PROTOC_EXECUTABLE "${PROTO_LIB_DIR}\/..\/bin\/protoc")$/;"	v
PROTOBUF_PROTOC_EXECUTABLE	demo/CMakeLists.txt	/^    set (PROTOBUF_PROTOC_EXECUTABLE "${PROTO_LIB_DIR}\/..\/bin\/protoc")$/;"	v
PT_GUARDED_BY	src/port/thread_annotations.h	/^#define PT_GUARDED_BY(/;"	d
PUT	src/master/master.proto	/^        PUT = 2;$/;"	e	enum:pidb.PiDBClientRequest.Action
PUT	src/server/master.proto	/^        PUT = 2;$/;"	e	enum:pidb.PiDBClientRequest.Action
PiDB distributed leveldb	README.md	/^# PiDB distributed leveldb $/;"	c
PiDBClientRequest	src/master/master.proto	/^message PiDBClientRequest{$/;"	m	package:pidb
PiDBClientRequest	src/server/master.proto	/^message PiDBClientRequest{$/;"	m	package:pidb
PiDBClientResponse	src/master/master.proto	/^message PiDBClientResponse{$/;"	m	package:pidb
PiDBClientResponse	src/server/master.proto	/^message PiDBClientResponse{$/;"	m	package:pidb
PiDBFileRequest	src/server/pidb.proto	/^message PiDBFileRequest{$/;"	m	package:pidb
PiDBFileResponse	src/server/pidb.proto	/^message PiDBFileResponse{$/;"	m	package:pidb
PiDBIterator	client/pidb.pb.cc	/^PiDBIterator::PiDBIterator()$/;"	f	class:pidb::PiDBIterator
PiDBIterator	client/pidb.pb.cc	/^PiDBIterator::PiDBIterator(const PiDBIterator& from)$/;"	f	class:pidb::PiDBIterator
PiDBIterator	client/pidb.pb.h	/^  PiDBIterator(PiDBIterator&& from) noexcept$/;"	f	class:pidb::PiDBIterator
PiDBIterator	client/pidb.pb.h	/^class PiDBIterator : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defin/;"	c	namespace:pidb
PiDBIterator	client/pidb.proto	/^message PiDBIterator{$/;"	m	package:pidb
PiDBIterator	src/server/pidb.proto	/^message PiDBIterator{$/;"	m	package:pidb
PiDBIteratorDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBIteratorDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBOperator	client/pidb.pb.cc	/^PiDBOperator::PiDBOperator()$/;"	f	class:pidb::PiDBOperator
PiDBOperator	client/pidb.pb.cc	/^PiDBOperator::PiDBOperator(const PiDBOperator& from)$/;"	f	class:pidb::PiDBOperator
PiDBOperator	client/pidb.pb.h	/^  PiDBOperator(PiDBOperator&& from) noexcept$/;"	f	class:pidb::PiDBOperator
PiDBOperator	client/pidb.pb.h	/^class PiDBOperator : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defin/;"	c	namespace:pidb
PiDBOperator	client/pidb.proto	/^message PiDBOperator{$/;"	m	package:pidb
PiDBOperator	src/server/pidb.proto	/^message PiDBOperator{$/;"	m	package:pidb
PiDBOperatorDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBOperatorDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBPullRequest	src/master/master.proto	/^message PiDBPullRequest{$/;"	m	package:pidb
PiDBPullRequest	src/server/master.proto	/^message PiDBPullRequest{$/;"	m	package:pidb
PiDBPullResponse	src/master/master.proto	/^message PiDBPullResponse{$/;"	m	package:pidb
PiDBPullResponse	src/server/master.proto	/^message PiDBPullResponse{$/;"	m	package:pidb
PiDBRaftManageRequest	src/master/master.proto	/^message PiDBRaftManageRequest{$/;"	m	package:pidb
PiDBRaftManageRequest	src/server/master.proto	/^message PiDBRaftManageRequest{$/;"	m	package:pidb
PiDBRaftManageResponse	src/master/master.proto	/^message PiDBRaftManageResponse{$/;"	m	package:pidb
PiDBRaftManageResponse	src/server/master.proto	/^message PiDBRaftManageResponse{$/;"	m	package:pidb
PiDBRegionRequest	src/master/master.proto	/^message PiDBRegionRequest{$/;"	m	package:pidb
PiDBRegionRequest	src/server/master.proto	/^message PiDBRegionRequest{$/;"	m	package:pidb
PiDBRegionResponse	src/master/master.proto	/^message PiDBRegionResponse{$/;"	m	package:pidb
PiDBRegionResponse	src/server/master.proto	/^message PiDBRegionResponse{$/;"	m	package:pidb
PiDBRequest	client/pidb.pb.cc	/^PiDBRequest::PiDBRequest()$/;"	f	class:pidb::PiDBRequest
PiDBRequest	client/pidb.pb.cc	/^PiDBRequest::PiDBRequest(const PiDBRequest& from)$/;"	f	class:pidb::PiDBRequest
PiDBRequest	client/pidb.pb.h	/^  PiDBRequest(PiDBRequest&& from) noexcept$/;"	f	class:pidb::PiDBRequest
PiDBRequest	client/pidb.pb.h	/^class PiDBRequest : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defini/;"	c	namespace:pidb
PiDBRequest	client/pidb.proto	/^message PiDBRequest{$/;"	m	package:pidb
PiDBRequest	demo/pidb.pb.cc	/^PiDBRequest::PiDBRequest()$/;"	f	class:pidb::PiDBRequest
PiDBRequest	demo/pidb.pb.cc	/^PiDBRequest::PiDBRequest(const PiDBRequest& from)$/;"	f	class:pidb::PiDBRequest
PiDBRequest	demo/pidb.pb.h	/^  PiDBRequest(PiDBRequest&& from) noexcept$/;"	f	class:pidb::PiDBRequest
PiDBRequest	demo/pidb.pb.h	/^class PiDBRequest : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defini/;"	c	namespace:pidb
PiDBRequest	demo/pidb.proto	/^message PiDBRequest{$/;"	m	package:pidb
PiDBRequest	src/server/pidb.proto	/^message PiDBRequest{$/;"	m	package:pidb
PiDBRequestDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBRequestDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBRequestDefaultTypeInternal	demo/pidb.pb.cc	/^class PiDBRequestDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBResponse	client/pidb.pb.cc	/^PiDBResponse::PiDBResponse()$/;"	f	class:pidb::PiDBResponse
PiDBResponse	client/pidb.pb.cc	/^PiDBResponse::PiDBResponse(const PiDBResponse& from)$/;"	f	class:pidb::PiDBResponse
PiDBResponse	client/pidb.pb.h	/^  PiDBResponse(PiDBResponse&& from) noexcept$/;"	f	class:pidb::PiDBResponse
PiDBResponse	client/pidb.pb.h	/^class PiDBResponse : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defin/;"	c	namespace:pidb
PiDBResponse	client/pidb.proto	/^message PiDBResponse{$/;"	m	package:pidb
PiDBResponse	demo/pidb.pb.cc	/^PiDBResponse::PiDBResponse()$/;"	f	class:pidb::PiDBResponse
PiDBResponse	demo/pidb.pb.cc	/^PiDBResponse::PiDBResponse(const PiDBResponse& from)$/;"	f	class:pidb::PiDBResponse
PiDBResponse	demo/pidb.pb.h	/^  PiDBResponse(PiDBResponse&& from) noexcept$/;"	f	class:pidb::PiDBResponse
PiDBResponse	demo/pidb.pb.h	/^class PiDBResponse : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defin/;"	c	namespace:pidb
PiDBResponse	demo/pidb.proto	/^message PiDBResponse{$/;"	m	package:pidb
PiDBResponse	src/server/pidb.proto	/^message PiDBResponse{$/;"	m	package:pidb
PiDBResponseDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBResponseDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBResponseDefaultTypeInternal	demo/pidb.pb.cc	/^class PiDBResponseDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBService	client/pidb.pb.h	/^  inline PiDBService() {};$/;"	f	class:pidb::PiDBService
PiDBService	client/pidb.pb.h	/^class PiDBService : public ::google::protobuf::Service {$/;"	c	namespace:pidb
PiDBService	client/pidb.proto	/^service PiDBService {$/;"	s	package:pidb
PiDBService	demo/pidb.pb.h	/^  inline PiDBService() {};$/;"	f	class:pidb::PiDBService
PiDBService	demo/pidb.pb.h	/^class PiDBService : public ::google::protobuf::Service {$/;"	c	namespace:pidb
PiDBService	demo/pidb.proto	/^service PiDBService {$/;"	s	package:pidb
PiDBService	src/server/pidb.proto	/^service PiDBService {$/;"	s	package:pidb
PiDBServiceImpl	demo/server.cpp	/^    explicit PiDBServiceImpl(Data* data) : _data(data) {}$/;"	f	class:pidb::PiDBServiceImpl	file:
PiDBServiceImpl	demo/server.cpp	/^class PiDBServiceImpl : public PiDBService {$/;"	c	namespace:pidb	file:
PiDBServiceImpl	src/server/pidb_service_impl.h	/^    explicit PiDBServiceImpl(Server* server):server_(server){};$/;"	f	class:pidb::PiDBServiceImpl
PiDBServiceImpl	src/server/pidb_service_impl.h	/^class PiDBServiceImpl:public PiDBService{$/;"	c	namespace:pidb
PiDBService_Stub	client/pidb.pb.cc	/^PiDBService_Stub::PiDBService_Stub($/;"	f	class:pidb::PiDBService_Stub
PiDBService_Stub	client/pidb.pb.cc	/^PiDBService_Stub::PiDBService_Stub(::google::protobuf::RpcChannel* channel)$/;"	f	class:pidb::PiDBService_Stub
PiDBService_Stub	client/pidb.pb.h	/^class PiDBService_Stub : public PiDBService {$/;"	c	namespace:pidb
PiDBService_Stub	demo/pidb.pb.cc	/^PiDBService_Stub::PiDBService_Stub($/;"	f	class:pidb::PiDBService_Stub
PiDBService_Stub	demo/pidb.pb.cc	/^PiDBService_Stub::PiDBService_Stub(::google::protobuf::RpcChannel* channel)$/;"	f	class:pidb::PiDBService_Stub
PiDBService_Stub	demo/pidb.pb.h	/^class PiDBService_Stub : public PiDBService {$/;"	c	namespace:pidb
PiDBSnapshot	client/pidb.pb.cc	/^PiDBSnapshot::PiDBSnapshot()$/;"	f	class:pidb::PiDBSnapshot
PiDBSnapshot	client/pidb.pb.cc	/^PiDBSnapshot::PiDBSnapshot(const PiDBSnapshot& from)$/;"	f	class:pidb::PiDBSnapshot
PiDBSnapshot	client/pidb.pb.h	/^  PiDBSnapshot(PiDBSnapshot&& from) noexcept$/;"	f	class:pidb::PiDBSnapshot
PiDBSnapshot	client/pidb.pb.h	/^class PiDBSnapshot : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_defin/;"	c	namespace:pidb
PiDBSnapshot	client/pidb.proto	/^message PiDBSnapshot{$/;"	m	package:pidb
PiDBSnapshot	src/server/pidb.proto	/^message PiDBSnapshot{$/;"	m	package:pidb
PiDBSnapshotDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBSnapshotDefaultTypeInternal {$/;"	c	namespace:pidb	file:
PiDBSplitRequest	src/master/master.proto	/^message PiDBSplitRequest{$/;"	m	package:pidb
PiDBSplitRequest	src/server/master.proto	/^message PiDBSplitRequest{$/;"	m	package:pidb
PiDBSplitResponse	src/master/master.proto	/^message PiDBSplitResponse{$/;"	m	package:pidb
PiDBSplitResponse	src/server/master.proto	/^message PiDBSplitResponse{$/;"	m	package:pidb
PiDBStoreRequest	src/master/master.proto	/^message PiDBStoreRequest{$/;"	m	package:pidb
PiDBStoreRequest	src/server/master.proto	/^message PiDBStoreRequest{$/;"	m	package:pidb
PiDBStoreResponse	src/master/master.proto	/^message PiDBStoreResponse{$/;"	m	package:pidb
PiDBStoreResponse	src/server/master.proto	/^message PiDBStoreResponse{$/;"	m	package:pidb
PiDBWriteBatch	client/pidb.pb.cc	/^PiDBWriteBatch::PiDBWriteBatch()$/;"	f	class:pidb::PiDBWriteBatch
PiDBWriteBatch	client/pidb.pb.cc	/^PiDBWriteBatch::PiDBWriteBatch(const PiDBWriteBatch& from)$/;"	f	class:pidb::PiDBWriteBatch
PiDBWriteBatch	client/pidb.pb.h	/^  PiDBWriteBatch(PiDBWriteBatch&& from) noexcept$/;"	f	class:pidb::PiDBWriteBatch
PiDBWriteBatch	client/pidb.pb.h	/^class PiDBWriteBatch : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_def/;"	c	namespace:pidb
PiDBWriteBatch	client/pidb.proto	/^message PiDBWriteBatch{$/;"	m	package:pidb
PiDBWriteBatch	src/server/pidb.proto	/^message PiDBWriteBatch{$/;"	m	package:pidb
PiDBWriteBatchDefaultTypeInternal	client/pidb.pb.cc	/^class PiDBWriteBatchDefaultTypeInternal {$/;"	c	namespace:pidb	file:
Point	src/libs/json11/test.cpp	/^        Point (int x, int y) : x(x), y(y) {}$/;"	f	class:JSON11_TEST_CASE::Point	file:
Point	src/libs/json11/test.cpp	/^    class Point {$/;"	c	function:JSON11_TEST_CASE	file:
PrintInfo	src/master/head/route_table.h	/^	void PrintInfo(){$/;"	f	class:pidb::RouteTable	typeref:typename:void
PullData	src/master/head/raft_manage.cpp	/^bool RaftManage::PullData(const string& old_addr, const string& group,$/;"	f	class:pidb::RaftManage	typeref:typename:bool
PullData	src/master/master.proto	/^    rpc PullData (PiDBPullRequest) returns (PiDBPullResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBPullResponse
PullData	src/server/master.proto	/^    rpc PullData (PiDBPullRequest) returns (PiDBPullResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBPullResponse
PullData	src/server/master_service_impl.cpp	/^    void MasterServiceImpl::PullData(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
PushFile	src/server/pidb.proto	/^	rpc PushFile (PiDBFileRequest) returns (PiDBFileResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBFileResponse
PushFile	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::PushFile(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
Put	client/pidb.pb.cc	/^void PiDBService::Put(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
Put	client/pidb.pb.cc	/^void PiDBService_Stub::Put(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
Put	client/pidb.proto	/^	rpc Put(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Put	src/server/context_cache.h	/^    uint64_t ContextCache<T>::Put(std::unique_ptr<T> context) {$/;"	f	class:pidb::ContextCache	typeref:typename:uint64_t
Put	src/server/pidb.proto	/^	rpc Put(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Put	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::Put(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
Put	src/server/raftnode.cpp	/^    void RaftNode::Put(const PiDBRequest *request, PiDBResponse *response,$/;"	f	class:pidb::RaftNode	typeref:typename:void
Put	src/server/server.cpp	/^    void Server::Put(const ::pidb::PiDBRequest *request,$/;"	f	class:pidb::Server	typeref:typename:void
QueryRoute	src/master/head/master.cpp	/^void Master::QueryRoute(const PiDBClientRequest* request,$/;"	f	class:pidb::Master	typeref:typename:void
QueryRoute	src/master/head/master.h	/^    void QueryRoute(google::protobuf::RpcController* controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
QueryRoute	src/master/master.proto	/^    rpc QueryRoute (PiDBClientRequest) returns (PiDBClientResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBClientResponse
QueryRoute	src/server/master.proto	/^    rpc QueryRoute (PiDBClientRequest) returns (PiDBClientResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBClientResponse
RM	src/master/head/master.h	/^	RM(Master* m,const string& n,const string& x,bool i,void* v):$/;"	f	struct:pidb::RM
RM	src/master/head/master.h	/^struct RM{$/;"	s	namespace:pidb
RaftHeartbeatTimer	src/server/raftnode.h	/^    class RaftHeartbeatTimer:public RaftTimer{$/;"	c	namespace:pidb
RaftManage	src/master/head/raft_manage.cpp	/^RaftManage::RaftManage(){$/;"	f	class:pidb::RaftManage
RaftManage	src/master/head/raft_manage.h	/^class RaftManage{$/;"	c	namespace:pidb
RaftManage	src/master/master.proto	/^    rpc RaftManage (PiDBRaftManageRequest) returns (PiDBRaftManageResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBRaftManageResponse
RaftManage	src/server/master.proto	/^    rpc RaftManage (PiDBRaftManageRequest) returns (PiDBRaftManageResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBRaftManageResponse
RaftManage	src/server/master_service_impl.cpp	/^     void MasterServiceImpl::RaftManage(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
RaftNode	src/server/raftnode.cpp	/^    RaftNode::RaftNode(const RaftOption &option, const Range &range)$/;"	f	class:pidb::RaftNode
RaftNode	src/server/raftnode.h	/^class RaftNode : public braft::StateMachine{$/;"	c	namespace:pidb
RaftNodeClosure	src/server/raftnode.h	/^	RaftNodeClosure(RaftNode* node,$/;"	f	class:pidb::RaftNodeClosure
RaftNodeClosure	src/server/raftnode.h	/^class RaftNodeClosure: public braft::Closure{$/;"	c	namespace:pidb
RaftOpType	src/master/head/master.h	/^    enum RaftOpType{ $/;"	g	class:pidb::Master
RaftOpType	src/server/raftnode.h	/^    enum RaftOpType {$/;"	g	class:pidb::RaftNode
RaftOption	src/include/pidb/options.h	/^        RaftOption():data_path(".\/data"){}$/;"	f	struct:pidb::RaftOption
RaftOption	src/include/pidb/options.h	/^    struct RaftOption$/;"	s	namespace:pidb
RaftTimer	src/server/raftnode.h	/^        RaftTimer():raft_(nullptr){}$/;"	f	class:pidb::RaftTimer
RaftTimer	src/server/raftnode.h	/^    class RaftTimer:public braft::RepeatedTimerTask{$/;"	c	namespace:pidb
Range	src/server/raftnode.h	/^    Range(){}$/;"	f	struct:pidb::Range
Range	src/server/raftnode.h	/^    Range(const Slice& s,const Slice& l):start(s),limit(l){}$/;"	f	struct:pidb::Range
Range	src/server/raftnode.h	/^struct Range{$/;"	s	namespace:pidb
ReadFromFile	src/master/head/route_table.cpp	/^int RouteTable::ReadFromFile(const string& file_name) {$/;"	f	class:pidb::RouteTable	typeref:typename:int
ReadFromFile	src/master/head/store_heartbeat.cpp	/^int StoreHeartbeat::ReadFromFile(const string& file_name) {$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:int
ReadRouter	src/server/route_table.cpp	/^void RouteTable::ReadRouter(const std::string &name) {$/;"	f	class:pidb::RouteTable	typeref:typename:void
Record	src/server/route_table.h	/^        Record(){}$/;"	f	struct:pidb::RouteTable::Record
Record	src/server/route_table.h	/^        Record(const std::string &s,const std::string &l,const std::string &g)$/;"	f	struct:pidb::RouteTable::Record
Record	src/server/route_table.h	/^    struct Record{$/;"	s	class:pidb::RouteTable
Redirect	src/master/head/master.cpp	/^void Master::Redirect(PiDBClientResponse* response) {$/;"	f	class:pidb::Master	typeref:typename:void
Redirect	src/master/head/master.cpp	/^void Master::Redirect(PiDBRegionResponse* response) {$/;"	f	class:pidb::Master	typeref:typename:void
Redirect	src/master/head/master.cpp	/^void Master::Redirect(PiDBSplitResponse* response) {$/;"	f	class:pidb::Master	typeref:typename:void
Redirect	src/master/head/master.cpp	/^void Master::Redirect(PiDBStoreResponse* response) {$/;"	f	class:pidb::Master	typeref:typename:void
RegionClosure	src/master/head/master.h	/^    RegionClosure(Master* master, const PiDBRegionRequest* request,$/;"	f	class:pidb::RegionClosure
RegionClosure	src/master/head/master.h	/^class RegionClosure : public braft::Closure {$/;"	c	namespace:pidb
RegionHeartOp_	src/master/head/master.h	/^        DefalutOp_, StoreHeartOp_, RegionHeartOp_, RegionSplitOp_$/;"	e	enum:pidb::Master::RaftOpType
RegionHeartbeat	src/master/head/master.h	/^    void RegionHeartbeat(google::protobuf::RpcController* controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
RegionHeartbeat	src/master/master.proto	/^    rpc RegionHeartbeat (PiDBRegionRequest) returns (PiDBRegionResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBRegionResponse
RegionHeartbeat	src/server/master.proto	/^    rpc RegionHeartbeat (PiDBRegionRequest) returns (PiDBRegionResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBRegionResponse
RegionSplit	src/master/head/master.cpp	/^void Master::RegionSplit(const PiDBSplitRequest* request,$/;"	f	class:pidb::Master	typeref:typename:void
RegionSplit	src/master/head/master.h	/^    void RegionSplit(google::protobuf::RpcController* controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
RegionSplit	src/master/master.proto	/^    rpc RegionSplit (PiDBSplitRequest) returns (PiDBSplitResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBSplitResponse
RegionSplit	src/server/master.proto	/^    rpc RegionSplit (PiDBSplitRequest) returns (PiDBSplitResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBSplitResponse
RegionSplitOp_	src/master/head/master.h	/^        DefalutOp_, StoreHeartOp_, RegionHeartOp_, RegionSplitOp_$/;"	e	enum:pidb::Master::RaftOpType
ReleaseIterator	src/server/server.cpp	/^    Status Server::ReleaseIterator(int64_t id) {$/;"	f	class:pidb::Server	typeref:typename:Status
ReleaseSnapshot	client/pidb.pb.cc	/^void PiDBService::ReleaseSnapshot(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
ReleaseSnapshot	client/pidb.pb.cc	/^void PiDBService_Stub::ReleaseSnapshot(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
ReleaseSnapshot	client/pidb.proto	/^	rpc ReleaseSnapshot(PiDBSnapshot) returns (Success);$/;"	r	service:pidb.PiDBService	typeref:typename:Success
ReleaseSnapshot	src/server/pidb.proto	/^	rpc ReleaseSnapshot(PiDBSnapshot) returns (Success);$/;"	r	service:pidb.PiDBService	typeref:typename:Success
ReleaseSnapshot	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::ReleaseSnapshot(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
ReleaseSnapshot	src/server/server.cpp	/^    Status Server::ReleaseSnapshot(int64_t id) {$/;"	f	class:pidb::Server	typeref:typename:Status
Release_Store	src/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer	typeref:typename:void
RemoteFileSend	src/server/remote_file_send.cpp	/^    RemoteFileSend::RemoteFileSend(const std::string &addr, const std::string &source_path)$/;"	f	class:pidb::RemoteFileSend
RemoteFileSend	src/server/remote_file_send.h	/^class RemoteFileSend {$/;"	c	namespace:pidb
RemoveNode	src/master/head/raft_manage.cpp	/^void RaftManage::RemoveNode(const string& group, $/;"	f	class:pidb::RaftManage	typeref:typename:void
RemoveRouteInfo	src/master/head/route_table.cpp	/^void RouteTable::RemoveRouteInfo(const string& raft_group){$/;"	f	class:pidb::RouteTable	typeref:typename:void
RequestFile	src/server/pidb.proto	/^	rpc RequestFile (PiDBFileRequest) returns(PiDBFileResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBFileResponse
RequestFile	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::RequestFile(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
RequestSplit	src/server/raftnode.cpp	/^    void* RaftNode::RequestSplit(void *arg) {$/;"	f	class:pidb::RaftNode	typeref:typename:void *
RequiredFieldsByteSizeFallback	client/pidb.pb.cc	/^size_t PiDBOperator::RequiredFieldsByteSizeFallback() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:size_t
RouteInfo	src/master/head/route_table.h	/^		RouteInfo(const string& min, const string& max, $/;"	f	struct:pidb::RouteTable::RouteInfo
RouteInfo	src/master/head/route_table.h	/^	struct RouteInfo {$/;"	s	class:pidb::RouteTable
RouteTable	src/master/head/route_table.cpp	/^RouteTable::RouteTable() {$/;"	f	class:pidb::RouteTable
RouteTable	src/master/head/route_table.h	/^class RouteTable {$/;"	c	namespace:pidb
RouteTable	src/server/route_table.h	/^class RouteTable {$/;"	c	namespace:pidb
Run	demo/server.cpp	/^void DataClosure::Run() {$/;"	f	class:pidb::DataClosure	typeref:typename:void
Run	src/master/head/master.cpp	/^void ClientClosure::Run() {$/;"	f	class:pidb::ClientClosure	typeref:typename:void
Run	src/master/head/master.cpp	/^void RegionClosure::Run() {$/;"	f	class:pidb::RegionClosure	typeref:typename:void
Run	src/master/head/master.cpp	/^void SplitClosure::Run() {$/;"	f	class:pidb::SplitClosure	typeref:typename:void
Run	src/master/head/master.cpp	/^void StoreClosure::Run() {$/;"	f	class:pidb::StoreClosure	typeref:typename:void
Run	src/server/raftnode.cpp	/^    void RaftNodeClosure::Run() {$/;"	f	class:pidb::RaftNodeClosure	typeref:typename:void
Run	src/server/server.cpp	/^    void ServerClosure::Run() {$/;"	f	class:pidb::ServerClosure	typeref:typename:void
SCOPED_LOCKABLE	src/port/thread_annotations.h	/^#define SCOPED_LOCKABLE /;"	d
SHARED_LOCKS_REQUIRED	src/port/thread_annotations.h	/^#define SHARED_LOCKS_REQUIRED(/;"	d
SHARED_LOCK_FUNCTION	src/port/thread_annotations.h	/^#define SHARED_LOCK_FUNCTION(/;"	d
SHARED_TRYLOCK_FUNCTION	src/port/thread_annotations.h	/^#define SHARED_TRYLOCK_FUNCTION(/;"	d
STANDARD	src/libs/json11/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
STANDARD	src/master/head/json11.hpp	/^    STANDARD, COMMENTS$/;"	e	enum:json11::JsonParse
STORAGE_LEVELDB_PORT_PORT_CONFIG_H_	src/port/port_config.h.in	/^#define STORAGE_LEVELDB_PORT_PORT_CONFIG_H_$/;"	d	file:
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	src/port/port_example.h	/^#define STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_H_	src/port/port.h	/^#define STORAGE_LEVELDB_PORT_PORT_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_STDCXX_H_	src/port/port_stdcxx.h	/^#define STORAGE_LEVELDB_PORT_PORT_STDCXX_H_$/;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	src/port/thread_annotations.h	/^#define STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_$/;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	src/port/win/stdint.h	/^#define STORAGE_LEVELDB_PORT_WIN_STDINT_H_$/;"	d
STRING	src/libs/json11/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
STRING	src/master/head/json11.hpp	/^        NUL, NUMBER, BOOL, STRING, ARRAY, OBJECT$/;"	e	enum:json11::Json::Type
Send	src/master/test_main.cpp	/^void Send(){$/;"	f	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void Empty::SerializeWithCachedSizes($/;"	f	class:pidb::Empty	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBIterator::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBIterator	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBOperator::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBOperator	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBRequest::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBResponse::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBSnapshot::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void PiDBWriteBatch::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
SerializeWithCachedSizes	client/pidb.pb.cc	/^void Success::SerializeWithCachedSizes($/;"	f	class:pidb::Success	typeref:typename:void
SerializeWithCachedSizes	demo/pidb.pb.cc	/^void PiDBRequest::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SerializeWithCachedSizes	demo/pidb.pb.cc	/^void PiDBResponse::SerializeWithCachedSizes($/;"	f	class:pidb::PiDBResponse	typeref:typename:void
Server	src/server/server.cpp	/^    Server::Server(const ServerOption &serveroption) : port_(serveroption.port),$/;"	f	class:pidb::Server
Server	src/server/server.h	/^class Server:public std::enable_shared_from_this<Server>{$/;"	c	namespace:pidb
ServerClosure	src/server/server.cpp	/^    ServerClosure::ServerClosure(pidb::PiDBResponse *response, google::protobuf::Closure *done,$/;"	f	class:pidb::ServerClosure
ServerClosure	src/server/server.h	/^class ServerClosure: public braft::Closure{$/;"	c	namespace:pidb
ServerOption	src/include/pidb/options.h	/^        ServerOption():data_path(".\/data"),port(8100),heartbeat_timeout_ms(5000){}$/;"	f	struct:pidb::ServerOption
ServerOption	src/include/pidb/options.h	/^        ServerOption(const std::string &path,int32_t p)$/;"	f	struct:pidb::ServerOption
ServerOption	src/include/pidb/options.h	/^    struct ServerOption{$/;"	s	namespace:pidb
ServerTimer	src/server/server.h	/^    ServerTimer():server_(nullptr){}$/;"	f	class:pidb::ServerTimer
ServerTimer	src/server/server.h	/^class ServerTimer:public braft::RepeatedTimerTask{$/;"	c	namespace:pidb
SetCachedSize	client/pidb.pb.cc	/^void Empty::SetCachedSize(int size) const {$/;"	f	class:pidb::Empty	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBIterator::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBOperator::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBRequest::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBResponse::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBSnapshot::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void PiDBWriteBatch::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
SetCachedSize	client/pidb.pb.cc	/^void Success::SetCachedSize(int size) const {$/;"	f	class:pidb::Success	typeref:typename:void
SetCachedSize	demo/pidb.pb.cc	/^void PiDBRequest::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SetCachedSize	demo/pidb.pb.cc	/^void PiDBResponse::SetCachedSize(int size) const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SetDB	src/server/raftnode.h	/^    void SetDB(scoped_db db){$/;"	f	class:pidb::RaftNode	typeref:typename:void
SetDone	src/server/server.cpp	/^    void ServerClosure::SetDone(const std::string &group) {$/;"	f	class:pidb::ServerClosure	typeref:typename:void
SetID	src/server/context_cache.h	/^        void SetID(int64_t id)noexcept {$/;"	f	class:pidb::Context	typeref:typename:void
SetRange	src/server/raftnode.h	/^    Status SetRange(const Slice &s,const Slice &l){$/;"	f	class:pidb::RaftNode	typeref:typename:Status
SharedCtor	client/pidb.pb.cc	/^void Empty::SharedCtor() {$/;"	f	class:pidb::Empty	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBIterator::SharedCtor() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBOperator::SharedCtor() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBRequest::SharedCtor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBResponse::SharedCtor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBSnapshot::SharedCtor() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void PiDBWriteBatch::SharedCtor() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
SharedCtor	client/pidb.pb.cc	/^void Success::SharedCtor() {$/;"	f	class:pidb::Success	typeref:typename:void
SharedCtor	demo/pidb.pb.cc	/^void PiDBRequest::SharedCtor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SharedCtor	demo/pidb.pb.cc	/^void PiDBResponse::SharedCtor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SharedDB	demo/server.cpp	/^        explicit SharedDB(leveldb::DB* db) : _db(db) {}$/;"	f	class:pidb::Data::SharedDB	file:
SharedDB	demo/server.cpp	/^    class SharedDB : public butil::RefCountedThreadSafe<SharedDB> {$/;"	c	class:pidb::Data	file:
SharedDB	src/server/shareddb.h	/^    explicit SharedDB(leveldb::DB* db) : _db(db) {}$/;"	f	class:pidb::SharedDB
SharedDB	src/server/shareddb.h	/^class SharedDB : public butil::RefCountedThreadSafe<SharedDB> {$/;"	c	namespace:pidb
SharedDtor	client/pidb.pb.cc	/^void Empty::SharedDtor() {$/;"	f	class:pidb::Empty	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBIterator::SharedDtor() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBOperator::SharedDtor() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBRequest::SharedDtor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBResponse::SharedDtor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBSnapshot::SharedDtor() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void PiDBWriteBatch::SharedDtor() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
SharedDtor	client/pidb.pb.cc	/^void Success::SharedDtor() {$/;"	f	class:pidb::Success	typeref:typename:void
SharedDtor	demo/pidb.pb.cc	/^void PiDBRequest::SharedDtor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
SharedDtor	demo/pidb.pb.cc	/^void PiDBResponse::SharedDtor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
Signal	src/port/port_stdcxx.h	/^  void Signal() { cv_.notify_one(); }$/;"	f	class:leveldb::port::CondVar	typeref:typename:void
SignalAll	src/port/port_stdcxx.h	/^  void SignalAll() { cv_.notify_all(); }$/;"	f	class:leveldb::port::CondVar	typeref:typename:void
Size	src/server/context_cache.h	/^        virtual int Size() const noexcept{ return map_.size();}$/;"	f	class:pidb::ContextCache	typeref:typename:int
Snappy_Compress	src/port/port_stdcxx.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port	typeref:typename:bool
Snappy_GetUncompressedLength	src/port/port_stdcxx.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port	typeref:typename:bool
Snappy_Uncompress	src/port/port_stdcxx.h	/^inline bool Snappy_Uncompress(const char* input, size_t length, char* output) {$/;"	f	namespace:leveldb::port	typeref:typename:bool
SnapshotArg	demo/server.cpp	/^    struct SnapshotArg {$/;"	s	class:pidb::Data	file:
SnapshotContext	src/server/context_cache.h	/^        SnapshotContext(const leveldb::Snapshot *snapshot){$/;"	f	class:pidb::SnapshotContext
SnapshotContext	src/server/context_cache.h	/^    class SnapshotContext : public Context {$/;"	c	namespace:pidb
SnapshotHandle	src/server/raftnode.h	/^    struct SnapshotHandle{$/;"	s	class:pidb::RaftNode
SplitClosure	src/master/head/master.h	/^    SplitClosure(Master* master, const PiDBSplitRequest* request,$/;"	f	class:pidb::SplitClosure
SplitClosure	src/master/head/master.h	/^class SplitClosure : public braft::Closure {$/;"	c	namespace:pidb
Start	src/master/head/master.cpp	/^int Master::Start(int port, string conf, string group){$/;"	f	class:pidb::Master	typeref:typename:int
Start	src/server/server.cpp	/^    Status Server::Start() {$/;"	f	class:pidb::Server	typeref:typename:Status
StartRaftCallback	src/server/server.cpp	/^    void Server::StartRaftCallback(::pidb::PiDBRaftManageResponse *response, ::google::protobuf:/;"	f	class:pidb::Server	typeref:typename:void
StaticDescriptorInitializer	client/pidb.pb.cc	/^  StaticDescriptorInitializer() {$/;"	f	struct:protobuf_pidb_2eproto::StaticDescriptorInitializer	file:
StaticDescriptorInitializer	client/pidb.pb.cc	/^struct StaticDescriptorInitializer {$/;"	s	namespace:protobuf_pidb_2eproto	file:
StaticDescriptorInitializer	demo/pidb.pb.cc	/^  StaticDescriptorInitializer() {$/;"	f	struct:protobuf_pidb_2eproto::StaticDescriptorInitializer	file:
StaticDescriptorInitializer	demo/pidb.pb.cc	/^struct StaticDescriptorInitializer {$/;"	s	namespace:protobuf_pidb_2eproto	file:
Statics	src/libs/json11/json11.cpp	/^    Statics() {}$/;"	f	struct:json11::Statics	file:
Statics	src/libs/json11/json11.cpp	/^struct Statics {$/;"	s	namespace:json11	file:
Statics	src/master/head/json11.cpp	/^    Statics() {}$/;"	f	struct:json11::Statics	file:
Statics	src/master/head/json11.cpp	/^struct Statics {$/;"	s	namespace:json11	file:
Status	src/include/pidb/status.h	/^        Status() noexcept : state_(nullptr) { }$/;"	f	class:pidb::Status
Status	src/include/pidb/status.h	/^        Status(Status&& rhs) noexcept : state_(rhs.state_) { rhs.state_ = nullptr; }$/;"	f	class:pidb::Status
Status	src/include/pidb/status.h	/^    class Status {$/;"	c	namespace:pidb
Status	src/include/pidb/status.h	/^    inline Status::Status(const Status& rhs) {$/;"	f	class:pidb::Status
Status	src/util/status.cc	/^    Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:pidb::Status
Stop	src/server/server.cpp	/^    Status Server::Stop() {$/;"	f	class:pidb::Server	typeref:typename:Status
StoreClosure	src/master/head/master.h	/^    StoreClosure(Master* master, const PiDBStoreRequest* request,$/;"	f	class:pidb::StoreClosure
StoreClosure	src/master/head/master.h	/^class StoreClosure : public braft::Closure {$/;"	c	namespace:pidb
StoreHeartOp_	src/master/head/master.h	/^        DefalutOp_, StoreHeartOp_, RegionHeartOp_, RegionSplitOp_$/;"	e	enum:pidb::Master::RaftOpType
StoreHeartbeat	src/master/head/master.h	/^    void StoreHeartbeat(google::protobuf::RpcController* controller,$/;"	f	class:pidb::MasterServiceImpl	typeref:typename:void
StoreHeartbeat	src/master/head/store_heartbeat.cpp	/^StoreHeartbeat::StoreHeartbeat() {$/;"	f	class:pidb::StoreHeartbeat
StoreHeartbeat	src/master/head/store_heartbeat.h	/^class StoreHeartbeat {$/;"	c	namespace:pidb
StoreHeartbeat	src/master/master.proto	/^    rpc StoreHeartbeat (PiDBStoreRequest) returns (PiDBStoreResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBStoreResponse
StoreHeartbeat	src/server/master.proto	/^    rpc StoreHeartbeat (PiDBStoreRequest) returns (PiDBStoreResponse);$/;"	r	service:pidb.MasterService	typeref:typename:PiDBStoreResponse
StoreInfo	src/master/head/store_heartbeat.h	/^		StoreInfo(){};$/;"	f	struct:pidb::StoreHeartbeat::StoreInfo
StoreInfo	src/master/head/store_heartbeat.h	/^		StoreInfo(int r, int l):region_num_(r), leader_num_(l), $/;"	f	struct:pidb::StoreHeartbeat::StoreInfo
StoreInfo	src/master/head/store_heartbeat.h	/^	struct StoreInfo{$/;"	s	class:pidb::StoreHeartbeat
StreamReceiver	src/server/pidb_service_impl.cpp	/^        StreamReceiver(leveldb::WritableFile *file):file_(file){$/;"	f	class:pidb::StreamReceiver	file:
StreamReceiver	src/server/pidb_service_impl.cpp	/^    class StreamReceiver : public brpc::StreamInputHandler {$/;"	c	namespace:pidb	file:
Stub	client/pidb.pb.h	/^  typedef PiDBService_Stub Stub;$/;"	t	class:pidb::PiDBService	typeref:typename:PiDBService_Stub
Stub	demo/pidb.pb.h	/^  typedef PiDBService_Stub Stub;$/;"	t	class:pidb::PiDBService	typeref:typename:PiDBService_Stub
Success	client/pidb.pb.cc	/^Success::Success()$/;"	f	class:pidb::Success
Success	client/pidb.pb.cc	/^Success::Success(const Success& from)$/;"	f	class:pidb::Success
Success	client/pidb.pb.h	/^  Success(Success&& from) noexcept$/;"	f	class:pidb::Success
Success	client/pidb.pb.h	/^class Success : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_definition/;"	c	namespace:pidb
Success	client/pidb.proto	/^message Success{$/;"	m	package:pidb
Success	src/server/pidb.proto	/^message Success{$/;"	m	package:pidb
SuccessDefaultTypeInternal	client/pidb.pb.cc	/^class SuccessDefaultTypeInternal {$/;"	c	namespace:pidb	file:
Swap	client/pidb.pb.cc	/^void Empty::Swap(Empty* other) {$/;"	f	class:pidb::Empty	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBIterator::Swap(PiDBIterator* other) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBOperator::Swap(PiDBOperator* other) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBRequest::Swap(PiDBRequest* other) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBResponse::Swap(PiDBResponse* other) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBSnapshot::Swap(PiDBSnapshot* other) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
Swap	client/pidb.pb.cc	/^void PiDBWriteBatch::Swap(PiDBWriteBatch* other) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
Swap	client/pidb.pb.cc	/^void Success::Swap(Success* other) {$/;"	f	class:pidb::Success	typeref:typename:void
Swap	demo/pidb.pb.cc	/^void PiDBRequest::Swap(PiDBRequest* other) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
Swap	demo/pidb.pb.cc	/^void PiDBResponse::Swap(PiDBResponse* other) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
TEST	src/server/RouteTableTest.cpp	/^TEST(FooTest, Test1){$/;"	f
TEST	src/server/RouteTableTest.cpp	/^TEST(RouteTest, AddTest){$/;"	f
TEST	test/test_context_cache.cpp	/^TEST(ContextTest,put_and_get_test){$/;"	f
TEST	test/test_push_file.cpp	/^TEST(RemoteFile,push_file){$/;"	f
TEST	test/test_route_table.cpp	/^TEST(FooTest, Test1){$/;"	f
THREAD_ANNOTATION_ATTRIBUTE__	src/port/thread_annotations.h	/^#define THREAD_ANNOTATION_ATTRIBUTE__(/;"	d
THRIFTNB_LIB	src/master/CMakeLists.txt	/^    set(THRIFTNB_LIB "")$/;"	v
THRIFT_LIB	src/master/CMakeLists.txt	/^    set(THRIFT_LIB "")$/;"	v
TODO	README.md	/^## TODO$/;"	s	chapter:PiDB distributed leveldb
TableStruct	client/pidb.pb.h	/^struct TableStruct {$/;"	s	namespace:protobuf_pidb_2eproto
TableStruct	demo/pidb.pb.h	/^struct TableStruct {$/;"	s	namespace:protobuf_pidb_2eproto
TestMultiParse	src/libs/json11/test.cpp	/^        struct TestMultiParse {$/;"	s	function:JSON11_TEST_CASE	file:
ToString	src/util/status.cc	/^    std::string Status::ToString() const {$/;"	f	class:pidb::Status	typeref:typename:std::string
Type	src/libs/json11/json11.hpp	/^    enum Type {$/;"	g	class:json11::Json
Type	src/master/head/json11.hpp	/^    enum Type {$/;"	g	class:json11::Json
UNLOCK_FUNCTION	src/port/thread_annotations.h	/^#define UNLOCK_FUNCTION(/;"	d
Unlock	src/port/port_stdcxx.h	/^  void Unlock() UNLOCK_FUNCTION() { mu_.unlock(); }$/;"	f	class:leveldb::port::Mutex	typeref:typename:void
UpdateRouteInfo	src/master/head/route_table.cpp	/^int RouteTable::UpdateRouteInfo(const string& min_key, $/;"	f	class:pidb::RouteTable	typeref:typename:int
UpdateStoreInfo	src/master/head/store_heartbeat.cpp	/^int StoreHeartbeat::UpdateStoreInfo(const string& addr, $/;"	f	class:pidb::StoreHeartbeat	typeref:typename:int
Value	src/libs/json11/json11.cpp	/^    explicit Value(T &&value)      : m_value(move(value)) {}$/;"	f	class:json11::Value	file:
Value	src/libs/json11/json11.cpp	/^    explicit Value(const T &value) : m_value(value) {}$/;"	f	class:json11::Value	file:
Value	src/libs/json11/json11.cpp	/^class Value : public JsonValue {$/;"	c	namespace:json11	file:
Value	src/master/head/json11.cpp	/^    explicit Value(T &&value)      : m_value(move(value)) {}$/;"	f	class:json11::Value	file:
Value	src/master/head/json11.cpp	/^    explicit Value(const T &value) : m_value(value) {}$/;"	f	class:json11::Value	file:
Value	src/master/head/json11.cpp	/^class Value : public JsonValue {$/;"	c	namespace:json11	file:
Wait	src/port/port_stdcxx.h	/^  void Wait() {$/;"	f	class:leveldb::port::CondVar	typeref:typename:void
Write	client/pidb.pb.cc	/^void PiDBService::Write(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
Write	client/pidb.pb.cc	/^void PiDBService_Stub::Write(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
Write	client/pidb.proto	/^	rpc Write(PiDBWriteBatch) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Write	src/server/pidb.proto	/^	rpc Write(PiDBWriteBatch) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
Write	src/server/pidb_service_impl.cpp	/^    void PiDBServiceImpl::Write(::google::protobuf::RpcController *controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void
Write	src/server/raftnode.cpp	/^    void RaftNode::Write(const leveldb::WriteOptions &options, std::unique_ptr<PiDBWriteBatch> b/;"	f	class:pidb::RaftNode	typeref:typename:void
Write	src/server/server.cpp	/^    void Server::Write(const ::pidb::PiDBWriteBatch *request,$/;"	f	class:pidb::Server	typeref:typename:void
WriteBatch	client/pidb.proto	/^    repeated PiDBOperator WriteBatch = 1;$/;"	f	message:pidb.PiDBWriteBatch	typeref:typename:PiDBOperator
WriteBatch	src/server/pidb.proto	/^	repeated PiDBOperator WriteBatch = 1;$/;"	f	message:pidb.PiDBWriteBatch	typeref:typename:PiDBOperator
WriteToFile	src/master/head/route_table.cpp	/^bool RouteTable::WriteToFile(const string& file_name) {$/;"	f	class:pidb::RouteTable	typeref:typename:bool
WriteToFile	src/master/head/store_heartbeat.cpp	/^bool StoreHeartbeat::WriteToFile(const string& file_name) {$/;"	f	class:pidb::StoreHeartbeat	typeref:typename:bool
_Empty_default_instance_	client/pidb.pb.cc	/^} _Empty_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::EmptyDefaultTypeInternal
_PiDBIterator_default_instance_	client/pidb.pb.cc	/^} _PiDBIterator_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBIteratorDefaultTypeInternal
_PiDBOperator_default_instance_	client/pidb.pb.cc	/^} _PiDBOperator_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBOperatorDefaultTypeInternal
_PiDBRequest_default_instance_	client/pidb.pb.cc	/^} _PiDBRequest_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBRequestDefaultTypeInternal
_PiDBRequest_default_instance_	demo/pidb.pb.cc	/^} _PiDBRequest_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBRequestDefaultTypeInternal
_PiDBResponse_default_instance_	client/pidb.pb.cc	/^} _PiDBResponse_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBResponseDefaultTypeInternal
_PiDBResponse_default_instance_	demo/pidb.pb.cc	/^} _PiDBResponse_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBResponseDefaultTypeInternal
_PiDBSnapshot_default_instance_	client/pidb.pb.cc	/^} _PiDBSnapshot_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBSnapshotDefaultTypeInternal
_PiDBWriteBatch_default_instance_	client/pidb.pb.cc	/^} _PiDBWriteBatch_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::PiDBWriteBatchDefaultTypeInternal
_Success_default_instance_	client/pidb.pb.cc	/^} _Success_default_instance_;$/;"	v	namespace:pidb	typeref:class:pidb::SuccessDefaultTypeInternal
__anon36d798650111	src/master/head/json11.cpp	/^namespace {$/;"	n	namespace:json11	file:
__anon5a91553f0102	src/master/head/route_table.cpp	/^		const string& key)->bool{return r.min_key_ < key;});$/;"	f	function:pidb::RouteTable::UpdateRouteInfo	typeref:typename:bool	file:
__anon5a91553f0202	src/master/head/route_table.cpp	/^		const RouteInfo& r)->bool{return key < r.min_key_;});$/;"	f	function:pidb::RouteTable::GetRouteInfo	typeref:typename:bool	file:
__anon65ab184d0111	src/libs/json11/json11.cpp	/^namespace {$/;"	n	namespace:json11	file:
__anon913336110102	src/libs/json11/test.cpp	/^                                      [](const Json& j) { return !j.is_null(); })$/;"	f	function:JSON11_TEST_CASE	file:
_data	demo/server.cpp	/^	Data* _data;$/;"	m	class:pidb::DataClosure	typeref:typename:Data *	file:
_data	demo/server.cpp	/^    Data* _data;$/;"	m	class:pidb::PiDBServiceImpl	typeref:typename:Data *	file:
_db	demo/server.cpp	/^        leveldb::DB* _db;$/;"	m	class:pidb::Data::SharedDB	typeref:typename:leveldb::DB *	file:
_db	demo/server.cpp	/^    scoped_db _db;$/;"	m	class:pidb::Data	typeref:typename:scoped_db	file:
_db	src/server/shareddb.h	/^    leveldb::DB* _db;$/;"	m	class:pidb::SharedDB	typeref:typename:leveldb::DB *
_db_mutex	demo/server.cpp	/^    mutable butil::Mutex _db_mutex;$/;"	m	class:pidb::Data	typeref:typename:butil::Mutex	file:
_db_mutex	src/server/raftnode.h	/^    mutable butil::Mutex _db_mutex;$/;"	m	class:pidb::RaftNode	typeref:typename:butil::Mutex
_done	demo/server.cpp	/^    google::protobuf::Closure* _done;$/;"	m	class:pidb::DataClosure	typeref:typename:google::protobuf::Closure *	file:
_done	src/master/head/master.h	/^    google::protobuf::Closure* _done;$/;"	m	class:pidb::ClientClosure	typeref:typename:google::protobuf::Closure *
_leader_term	demo/server.cpp	/^    butil::atomic<int64_t> _leader_term;$/;"	m	class:pidb::Data	typeref:typename:butil::atomic<int64_t>	file:
_node	demo/server.cpp	/^    braft::Node* volatile _node;$/;"	m	class:pidb::Data	typeref:typename:braft::Node * volatile	file:
_possible_warnings_flags	src/libs/json11/CMakeLists.txt	/^set(_possible_warnings_flags \/W4 \/WX -Wextra -Werror)$/;"	v
_request	demo/server.cpp	/^	const PiDBRequest* _request;$/;"	m	class:pidb::DataClosure	typeref:typename:const PiDBRequest *	file:
_request	src/master/head/master.h	/^    const PiDBClientRequest* _request;$/;"	m	class:pidb::ClientClosure	typeref:typename:const PiDBClientRequest *
_response	demo/server.cpp	/^	PiDBResponse* _response;$/;"	m	class:pidb::DataClosure	typeref:typename:PiDBResponse *	file:
_response	src/master/head/master.h	/^    PiDBClientResponse* _response;$/;"	m	class:pidb::ClientClosure	typeref:typename:PiDBClientResponse *
action	src/master/master.proto	/^    required Action action = 2;       \/\/ 操作类型（主要区分读写）$/;"	f	message:pidb.PiDBClientRequest	typeref:typename:Action
action	src/server/master.proto	/^    required Action action = 2;       \/\/ 操作类型（主要区分读写）$/;"	f	message:pidb.PiDBClientRequest	typeref:typename:Action
add_writebatch	client/pidb.pb.h	/^inline ::pidb::PiDBOperator* PiDBWriteBatch::add_writebatch() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::pidb::PiDBOperator *
arg_	src/master/head/master.h	/^    void* arg_;      \/\/ raft调度的回调函数的参数封装$/;"	m	struct:pidb::RM	typeref:typename:void *
array	src/libs/json11/json11.hpp	/^    typedef std::vector<Json> array;$/;"	t	class:json11::Json	typeref:typename:std::vector<Json>
array	src/master/head/json11.hpp	/^    typedef std::vector<Json> array;$/;"	t	class:json11::Json	typeref:typename:std::vector<Json>
array_items	src/libs/json11/json11.cpp	/^    const Json::array &array_items() const override { return m_value; }$/;"	f	class:json11::JsonArray	typeref:typename:const Json::array &	file:
array_items	src/libs/json11/json11.cpp	/^const vector<Json> &      JsonValue::array_items()               const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const vector<Json> &
array_items	src/libs/json11/json11.cpp	/^const vector<Json> & Json::array_items()          const { return m_ptr->array_items();  }$/;"	f	class:json11::Json	typeref:typename:const vector<Json> &
array_items	src/master/head/json11.cpp	/^    const Json::array &array_items() const override { return m_value; }$/;"	f	class:json11::JsonArray	typeref:typename:const Json::array &	file:
array_items	src/master/head/json11.cpp	/^const vector<Json> &      JsonValue::array_items()               const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const vector<Json> &
array_items	src/master/head/json11.cpp	/^const vector<Json> & Json::array_items()          const { return m_ptr->array_items();  }$/;"	f	class:json11::Json	typeref:typename:const vector<Json> &
aux	client/pidb.pb.h	/^  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::AuxillaryParseTableField[]
aux	demo/pidb.pb.h	/^  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::AuxillaryParseTableField[]
backup_data	src/server/raftnode.cpp	/^    void RaftNode::backup_data() {$/;"	f	class:pidb::RaftNode	typeref:typename:void
batchs	src/server/server.h	/^    std::unordered_map<std::string,bool> batchs;$/;"	m	class:pidb::ServerClosure	typeref:typename:std::unordered_map<std::string,bool>
block	client/CMakeLists.txt	/^project(block C CXX)$/;"	p
block	demo/CMakeLists.txt	/^project(block C CXX)$/;"	p
bool_value	src/libs/json11/json11.cpp	/^    bool bool_value() const override { return m_value; }$/;"	f	class:json11::JsonBoolean	typeref:typename:bool	file:
bool_value	src/libs/json11/json11.cpp	/^bool                      JsonValue::bool_value()                const { return false; }$/;"	f	class:json11::JsonValue	typeref:typename:bool
bool_value	src/libs/json11/json11.cpp	/^bool Json::bool_value()                           const { return m_ptr->bool_value();   }$/;"	f	class:json11::Json	typeref:typename:bool
bool_value	src/master/head/json11.cpp	/^    bool bool_value() const override { return m_value; }$/;"	f	class:json11::JsonBoolean	typeref:typename:bool	file:
bool_value	src/master/head/json11.cpp	/^bool                      JsonValue::bool_value()                const { return false; }$/;"	f	class:json11::JsonValue	typeref:typename:bool
bool_value	src/master/head/json11.cpp	/^bool Json::bool_value()                           const { return m_ptr->bool_value();   }$/;"	f	class:json11::Json	typeref:typename:bool
channel	client/pidb.pb.h	/^  inline ::google::protobuf::RpcChannel* channel() { return channel_; }$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:::google::protobuf::RpcChannel *
channel	demo/pidb.pb.h	/^  inline ::google::protobuf::RpcChannel* channel() { return channel_; }$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:::google::protobuf::RpcChannel *
channel_	src/server/remote_file_send.h	/^    brpc::Channel channel_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:brpc::Channel
check_region_interval	src/master/head/master.h	/^    int check_region_interval; \/\/ 看门狗检测region的间隔（ms）$/;"	m	struct:pidb::MasterArg	typeref:typename:int
check_store_interval	src/master/head/master.h	/^    int check_store_interval;  \/\/ 看门狗检测store的间隔（ms）$/;"	m	struct:pidb::MasterArg	typeref:typename:int
clean	src/libs/json11/Makefile	/^clean:$/;"	t
clear_has_id	client/pidb.pb.h	/^inline void PiDBIterator::clear_has_id() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_has_id	client/pidb.pb.h	/^inline void PiDBSnapshot::clear_has_id() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
clear_has_key	client/pidb.pb.h	/^inline void PiDBOperator::clear_has_key() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_has_key	client/pidb.pb.h	/^inline void PiDBRequest::clear_has_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_has_key	demo/pidb.pb.h	/^inline void PiDBRequest::clear_has_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_has_message	client/pidb.pb.h	/^inline void Success::clear_has_message() {$/;"	f	class:pidb::Success	typeref:typename:void
clear_has_new_value	client/pidb.pb.h	/^inline void PiDBResponse::clear_has_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::clear_has_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_old_value	client/pidb.pb.h	/^inline void PiDBResponse::clear_has_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::clear_has_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_op	client/pidb.pb.h	/^inline void PiDBOperator::clear_has_op() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_has_redirect	client/pidb.pb.h	/^inline void PiDBResponse::clear_has_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::clear_has_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_start	client/pidb.pb.h	/^inline void PiDBIterator::clear_has_start() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_has_stop	client/pidb.pb.h	/^inline void PiDBIterator::clear_has_stop() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_has_success	client/pidb.pb.h	/^inline void PiDBResponse::clear_has_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_success	client/pidb.pb.h	/^inline void Success::clear_has_success() {$/;"	f	class:pidb::Success	typeref:typename:void
clear_has_success	demo/pidb.pb.h	/^inline void PiDBResponse::clear_has_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_has_value	client/pidb.pb.h	/^inline void PiDBOperator::clear_has_value() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_has_value	client/pidb.pb.h	/^inline void PiDBRequest::clear_has_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_has_value	demo/pidb.pb.h	/^inline void PiDBRequest::clear_has_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_id	client/pidb.pb.h	/^inline void PiDBIterator::clear_id() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_id	client/pidb.pb.h	/^inline void PiDBSnapshot::clear_id() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
clear_key	client/pidb.pb.h	/^inline void PiDBOperator::clear_key() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_key	client/pidb.pb.h	/^inline void PiDBRequest::clear_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_key	demo/pidb.pb.h	/^inline void PiDBRequest::clear_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_message	client/pidb.pb.h	/^inline void Success::clear_message() {$/;"	f	class:pidb::Success	typeref:typename:void
clear_new_value	client/pidb.pb.h	/^inline void PiDBResponse::clear_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::clear_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_old_value	client/pidb.pb.h	/^inline void PiDBResponse::clear_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::clear_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_op	client/pidb.pb.h	/^inline void PiDBOperator::clear_op() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_redirect	client/pidb.pb.h	/^inline void PiDBResponse::clear_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::clear_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_start	client/pidb.pb.h	/^inline void PiDBIterator::clear_start() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_stop	client/pidb.pb.h	/^inline void PiDBIterator::clear_stop() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
clear_success	client/pidb.pb.h	/^inline void PiDBResponse::clear_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_success	client/pidb.pb.h	/^inline void Success::clear_success() {$/;"	f	class:pidb::Success	typeref:typename:void
clear_success	demo/pidb.pb.h	/^inline void PiDBResponse::clear_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
clear_value	client/pidb.pb.h	/^inline void PiDBOperator::clear_value() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
clear_value	client/pidb.pb.h	/^inline void PiDBRequest::clear_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_value	demo/pidb.pb.h	/^inline void PiDBRequest::clear_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
clear_writebatch	client/pidb.pb.h	/^inline void PiDBWriteBatch::clear_writebatch() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:void
cntl_	src/server/remote_file_send.h	/^    brpc::Controller cntl_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:brpc::Controller
code	src/include/pidb/status.h	/^        Code code() const {$/;"	f	class:pidb::Status	typeref:typename:Code
conf	src/include/pidb/options.h	/^        std::string conf;$/;"	m	struct:pidb::RaftOption	typeref:typename:std::string
conf	src/master/master.proto	/^    optional string conf = 3;      \/\/ 新raft组配置信息（若有节点增减）$/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:string
conf	src/server/master.proto	/^    optional string conf = 3;      \/\/ 新raft组配置信息（若有节点增减）$/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:string
conf_	src/master/head/route_table.h	/^		string conf_;         \/\/ 所属raft组配置$/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:string
conf_	src/server/raftnode.h	/^    const std::string conf_;$/;"	m	class:pidb::RaftNode	typeref:typename:const std::string
conf_	src/server/remote_file_send.h	/^    std::string conf_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:std::string
consume_comment	src/libs/json11/json11.cpp	/^    bool consume_comment() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:bool	file:
consume_comment	src/master/head/json11.cpp	/^    bool consume_comment() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:bool	file:
consume_garbage	src/libs/json11/json11.cpp	/^    void consume_garbage() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:void	file:
consume_garbage	src/master/head/json11.cpp	/^    void consume_garbage() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:void	file:
consume_whitespace	src/libs/json11/json11.cpp	/^    void consume_whitespace() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:void	file:
consume_whitespace	src/master/head/json11.cpp	/^    void consume_whitespace() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:void	file:
context_id_	src/server/context_cache.h	/^        std::atomic<int64_t> context_id_;$/;"	m	class:pidb::ContextCache	typeref:typename:std::atomic<int64_t>
count_	src/server/raftnode.h	/^   int count_=0;$/;"	m	class:pidb::RaftNode	typeref:typename:int
count_	src/server/server.h	/^    std::atomic<int64_t> count_;$/;"	m	class:pidb::ServerClosure	typeref:typename:std::atomic<int64_t>
current_time_	src/master/head/guard_dog.h	/^    int current_time_;  \/\/ 当前时间，用计数器表示$/;"	m	class:pidb::GuardDog	typeref:typename:int
cv_	src/port/port_stdcxx.h	/^  std::condition_variable cv_;$/;"	m	class:leveldb::port::CondVar	typeref:typename:std::condition_variable
cycle_	src/master/head/guard_dog.h	/^    int cycle_;         \/\/ 周期(s)$/;"	m	class:pidb::GuardDog	typeref:typename:int
data_path	src/include/pidb/options.h	/^        std::string data_path;$/;"	m	struct:pidb::RaftOption	typeref:typename:std::string
data_path	src/include/pidb/options.h	/^        std::string data_path;$/;"	m	struct:pidb::ServerOption	typeref:typename:std::string
data_path	src/server/raftnode.h	/^        std::string data_path;$/;"	m	struct:pidb::RaftNode::SnapshotHandle	typeref:typename:std::string
data_path_	src/server/raftnode.h	/^    const std::string data_path_;$/;"	m	class:pidb::RaftNode	typeref:typename:const std::string
data_path_	src/server/server.h	/^	std::string data_path_;$/;"	m	class:pidb::Server	typeref:typename:std::string
db	demo/server.cpp	/^        leveldb::DB* db() const { return _db; }$/;"	f	class:pidb::Data::SharedDB	typeref:typename:leveldb::DB *	file:
db	demo/server.cpp	/^        scoped_db db;$/;"	m	struct:pidb::Data::SnapshotArg	typeref:typename:scoped_db	file:
db	src/server/raftnode.h	/^        scoped_db db;$/;"	m	struct:pidb::RaftNode::SnapshotHandle	typeref:typename:scoped_db
db	src/server/shareddb.h	/^    leveldb::DB* db() const { return _db; }$/;"	f	class:pidb::SharedDB	typeref:typename:leveldb::DB *
db_	src/server/raftnode.h	/^    scoped_db db_;$/;"	m	class:pidb::RaftNode	typeref:typename:scoped_db
db_	src/server/server.h	/^	scoped_db db_;$/;"	m	class:pidb::Server	typeref:typename:scoped_db
db_client	demo/CMakeLists.txt	/^add_executable(db_client client.cpp ${PROTO_SRC} ${PROTO_HEADER})$/;"	t
db_server	demo/CMakeLists.txt	/^add_executable(db_server server.cpp ${PROTO_SRC} ${PROTO_HEADER})$/;"	t
default_instance	client/pidb.pb.cc	/^const Empty& Empty::default_instance() {$/;"	f	class:pidb::Empty	typeref:typename:const Empty &
default_instance	client/pidb.pb.cc	/^const PiDBIterator& PiDBIterator::default_instance() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const PiDBIterator &
default_instance	client/pidb.pb.cc	/^const PiDBOperator& PiDBOperator::default_instance() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const PiDBOperator &
default_instance	client/pidb.pb.cc	/^const PiDBRequest& PiDBRequest::default_instance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const PiDBRequest &
default_instance	client/pidb.pb.cc	/^const PiDBResponse& PiDBResponse::default_instance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const PiDBResponse &
default_instance	client/pidb.pb.cc	/^const PiDBSnapshot& PiDBSnapshot::default_instance() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:const PiDBSnapshot &
default_instance	client/pidb.pb.cc	/^const PiDBWriteBatch& PiDBWriteBatch::default_instance() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const PiDBWriteBatch &
default_instance	client/pidb.pb.cc	/^const Success& Success::default_instance() {$/;"	f	class:pidb::Success	typeref:typename:const Success &
default_instance	demo/pidb.pb.cc	/^const PiDBRequest& PiDBRequest::default_instance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const PiDBRequest &
default_instance	demo/pidb.pb.cc	/^const PiDBResponse& PiDBResponse::default_instance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const PiDBResponse &
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* Empty::descriptor() {$/;"	f	class:pidb::Empty	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBIterator::descriptor() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBOperator::descriptor() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBRequest::descriptor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBResponse::descriptor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBSnapshot::descriptor() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBWriteBatch::descriptor() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::Descriptor* Success::descriptor() {$/;"	f	class:pidb::Success	typeref:typename:const::google::protobuf::Descriptor *
descriptor	client/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* PiDBService::descriptor() {$/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::ServiceDescriptor *
descriptor	demo/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBRequest::descriptor() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::google::protobuf::Descriptor *
descriptor	demo/pidb.pb.cc	/^const ::google::protobuf::Descriptor* PiDBResponse::descriptor() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::google::protobuf::Descriptor *
descriptor	demo/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* PiDBService::descriptor() {$/;"	f	class:pidb::PiDBService	typeref:typename:const::google::protobuf::ServiceDescriptor *
do_put_or_del	src/server/raftnode.cpp	/^    Status RaftNode::do_put_or_del(uint8_t type, const butil::IOBuf &data, braft::Closure *done)/;"	f	class:pidb::RaftNode	typeref:typename:Status
do_write	src/server/raftnode.cpp	/^    Status RaftNode::do_write(uint8_t type, const butil::IOBuf &data, braft::Closure *done) {$/;"	f	class:pidb::RaftNode	typeref:typename:Status
done	demo/server.cpp	/^        braft::Closure* done;$/;"	m	struct:pidb::Data::SnapshotArg	typeref:typename:braft::Closure *	file:
done	src/server/raftnode.h	/^        braft::Closure* done;$/;"	m	struct:pidb::RaftNode::SnapshotHandle	typeref:typename:braft::Closure *
done_	src/master/head/master.h	/^    google::protobuf::Closure* done_;$/;"	m	class:pidb::RegionClosure	typeref:typename:google::protobuf::Closure *
done_	src/master/head/master.h	/^    google::protobuf::Closure* done_;$/;"	m	class:pidb::SplitClosure	typeref:typename:google::protobuf::Closure *
done_	src/master/head/master.h	/^    google::protobuf::Closure* done_;$/;"	m	class:pidb::StoreClosure	typeref:typename:google::protobuf::Closure *
done_	src/server/raftnode.h	/^    google::protobuf::Closure* done_;$/;"	m	class:pidb::RaftNodeClosure	typeref:typename:google::protobuf::Closure *
done_	src/server/server.h	/^    google::protobuf::Closure* done_;$/;"	m	class:pidb::ServerClosure	typeref:typename:google::protobuf::Closure *
dump	src/libs/json11/json11.cpp	/^    void dump(string &out) const override { json11::dump(m_value, out); }$/;"	f	class:json11::Value	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(NullStruct, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(bool value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(const Json::array &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(const Json::object &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(const string &value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(double value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^static void dump(int value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/libs/json11/json11.cpp	/^void Json::dump(string &out) const {$/;"	f	class:json11::Json	typeref:typename:void
dump	src/libs/json11/json11.hpp	/^    std::string dump() const {$/;"	f	class:json11::Json	typeref:typename:std::string
dump	src/master/head/json11.cpp	/^    void dump(string &out) const override { json11::dump(m_value, out); }$/;"	f	class:json11::Value	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(NullStruct, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(bool value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(const Json::array &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(const Json::object &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(const string &value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(double value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^static void dump(int value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/master/head/json11.cpp	/^void Json::dump(string &out) const {$/;"	f	class:json11::Json	typeref:typename:void
dump	src/master/head/json11.hpp	/^    std::string dump() const {$/;"	f	class:json11::Json	typeref:typename:std::string
empty_map	src/libs/json11/json11.cpp	/^    const map<string, Json> empty_map;$/;"	m	struct:json11::Statics	typeref:typename:const map<string,Json>	file:
empty_map	src/master/head/json11.cpp	/^    const map<string, Json> empty_map;$/;"	m	struct:json11::Statics	typeref:typename:const map<string,Json>	file:
empty_string	src/libs/json11/json11.cpp	/^    const string empty_string;$/;"	m	struct:json11::Statics	typeref:typename:const string	file:
empty_string	src/master/head/json11.cpp	/^    const string empty_string;$/;"	m	struct:json11::Statics	typeref:typename:const string	file:
empty_vector	src/libs/json11/json11.cpp	/^    const vector<Json> empty_vector;$/;"	m	struct:json11::Statics	typeref:typename:const vector<Json>	file:
empty_vector	src/master/head/json11.cpp	/^    const vector<Json> empty_vector;$/;"	m	struct:json11::Statics	typeref:typename:const vector<Json>	file:
encode_utf8	src/libs/json11/json11.cpp	/^    void encode_utf8(long pt, string & out) {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:void	file:
encode_utf8	src/master/head/json11.cpp	/^    void encode_utf8(long pt, string & out) {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:void	file:
entries	client/pidb.pb.h	/^  static const ::google::protobuf::internal::ParseTableField entries[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTableField[]
entries	demo/pidb.pb.h	/^  static const ::google::protobuf::internal::ParseTableField entries[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTableField[]
env_	src/server/remote_file_send.h	/^    leveldb::Env *env_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:leveldb::Env *
equals	src/libs/json11/json11.cpp	/^    bool equals(const JsonValue * other) const override { return m_value == other->number_value(/;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
equals	src/libs/json11/json11.cpp	/^    bool equals(const JsonValue * other) const override { return m_value == other->number_value(/;"	f	class:json11::JsonInt	typeref:typename:bool	file:
equals	src/libs/json11/json11.cpp	/^    bool equals(const JsonValue * other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
equals	src/master/head/json11.cpp	/^    bool equals(const JsonValue * other) const override { return m_value == other->number_value(/;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
equals	src/master/head/json11.cpp	/^    bool equals(const JsonValue * other) const override { return m_value == other->number_value(/;"	f	class:json11::JsonInt	typeref:typename:bool	file:
equals	src/master/head/json11.cpp	/^    bool equals(const JsonValue * other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
err	src/libs/json11/json11.cpp	/^    string &err;$/;"	m	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:string &	file:
err	src/master/head/json11.cpp	/^    string &err;$/;"	m	struct:json11::__anon36d798650111::JsonParser	typeref:typename:string &	file:
error	demo/run_server.sh	/^alias error=">&2 echo block: "$/;"	a
error	src/master/run_server.sh	/^alias error=">&2 echo hehe: "$/;"	a
esc	src/libs/json11/json11.cpp	/^static inline string esc(char c) {$/;"	f	namespace:json11	typeref:typename:string	file:
esc	src/master/head/json11.cpp	/^static inline string esc(char c) {$/;"	f	namespace:json11	typeref:typename:string	file:
expect	src/libs/json11/json11.cpp	/^    Json expect(const string &expected, Json res) {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:Json	file:
expect	src/master/head/json11.cpp	/^    Json expect(const string &expected, Json res) {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:Json	file:
expect_not_empty_elms_count	src/libs/json11/test.cpp	/^            size_t expect_not_empty_elms_count;$/;"	m	struct:JSON11_TEST_CASE::TestMultiParse	typeref:typename:size_t	file:
expect_parse_res	src/libs/json11/test.cpp	/^            Json expect_parse_res;$/;"	m	struct:JSON11_TEST_CASE::TestMultiParse	typeref:typename:Json	file:
expect_parser_stop_pos	src/libs/json11/test.cpp	/^            std::string::size_type expect_parser_stop_pos;$/;"	m	struct:JSON11_TEST_CASE::TestMultiParse	typeref:typename:std::string::size_type	file:
f	src/libs/json11/json11.cpp	/^    const std::shared_ptr<JsonValue> f = make_shared<JsonBoolean>(false);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
f	src/master/head/json11.cpp	/^    const std::shared_ptr<JsonValue> f = make_shared<JsonBoolean>(false);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
fail	src/libs/json11/json11.cpp	/^    Json fail(string &&msg) {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:Json	file:
fail	src/libs/json11/json11.cpp	/^    T fail(string &&msg, const T err_ret) {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:T	file:
fail	src/master/head/json11.cpp	/^    Json fail(string &&msg) {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:Json	file:
fail	src/master/head/json11.cpp	/^    T fail(string &&msg, const T err_ret) {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:T	file:
failed	src/libs/json11/json11.cpp	/^    bool failed;$/;"	m	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:bool	file:
failed	src/master/head/json11.cpp	/^    bool failed;$/;"	m	struct:json11::__anon36d798650111::JsonParser	typeref:typename:bool	file:
field_metadata	client/pidb.pb.h	/^  static const ::google::protobuf::internal::FieldMetadata field_metadata[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::FieldMetadata[]
field_metadata	demo/pidb.pb.h	/^  static const ::google::protobuf::internal::FieldMetadata field_metadata[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::FieldMetadata[]
file_	src/server/pidb_service_impl.cpp	/^        leveldb::WritableFile *file_;$/;"	m	class:pidb::StreamReceiver	typeref:typename:leveldb::WritableFile *	file:
file_level_service_descriptors	client/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];$/;"	v	namespace:protobuf_pidb_2eproto	typeref:typename:const::google::protobuf::ServiceDescriptor * [1]
file_level_service_descriptors	demo/pidb.pb.cc	/^const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];$/;"	v	namespace:protobuf_pidb_2eproto	typeref:typename:const::google::protobuf::ServiceDescriptor * [1]
filename	src/server/pidb.proto	/^	required string  filename=1;$/;"	f	message:pidb.PiDBFileRequest	typeref:typename:string
g_latency_recorder	demo/client.cpp	/^bvar::LatencyRecorder g_latency_recorder("block_client");$/;"	v	typeref:typename:bvar::LatencyRecorder
g_latency_recorder	src/master/test_client.cpp	/^bvar::LatencyRecorder g_latency_recorder("block_client");$/;"	v	typeref:typename:bvar::LatencyRecorder
get_db	demo/server.cpp	/^    scoped_db get_db() const {$/;"	f	class:pidb::Data	typeref:typename:scoped_db	file:
get_next_token	src/libs/json11/json11.cpp	/^    char get_next_token() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:char	file:
get_next_token	src/master/head/json11.cpp	/^    char get_next_token() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:char	file:
google	client/pidb.pb.cc	/^namespace google {$/;"	n	file:
google	client/pidb.pb.h	/^namespace google {$/;"	n
google	demo/pidb.pb.cc	/^namespace google {$/;"	n	file:
google	demo/pidb.pb.h	/^namespace google {$/;"	n
group	src/include/pidb/options.h	/^        std::string group;$/;"	m	struct:pidb::RaftOption	typeref:typename:std::string
group	src/server/route_table.h	/^        std::string group;$/;"	m	struct:pidb::RouteTable::Record	typeref:typename:std::string
group_	src/master/head/route_table.h	/^	string group_;$/;"	m	struct:pidb::CheckRAlive	typeref:typename:string
group_	src/server/context_cache.h	/^        const std::string group_; \/\/用于标识当前iterator属于哪个group$/;"	m	class:pidb::IteratorContext	typeref:typename:const std::string
group_	src/server/raftnode.h	/^    const std::string group_;$/;"	m	class:pidb::RaftNode	typeref:typename:const std::string
group_	src/server/remote_file_send.h	/^    std::string group_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:std::string
guard_dog_region_	src/master/head/master.h	/^    GuardDog* guard_dog_region_; \/\/ 检查region存活的看门狗$/;"	m	class:pidb::Master	typeref:typename:GuardDog *
guard_dog_store_	src/master/head/master.h	/^    GuardDog* guard_dog_store_; \/\/ 检查store存活的看门狗$/;"	m	class:pidb::Master	typeref:typename:GuardDog *
has_id	client/pidb.pb.h	/^inline bool PiDBIterator::has_id() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:bool
has_id	client/pidb.pb.h	/^inline bool PiDBSnapshot::has_id() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:bool
has_key	client/pidb.pb.h	/^inline bool PiDBOperator::has_key() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:bool
has_key	client/pidb.pb.h	/^inline bool PiDBRequest::has_key() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
has_key	demo/pidb.pb.h	/^inline bool PiDBRequest::has_key() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
has_message	client/pidb.pb.h	/^inline bool Success::has_message() const {$/;"	f	class:pidb::Success	typeref:typename:bool
has_new_value	client/pidb.pb.h	/^inline bool PiDBResponse::has_new_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_new_value	demo/pidb.pb.h	/^inline bool PiDBResponse::has_new_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_old_value	client/pidb.pb.h	/^inline bool PiDBResponse::has_old_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_old_value	demo/pidb.pb.h	/^inline bool PiDBResponse::has_old_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_op	client/pidb.pb.h	/^inline bool PiDBOperator::has_op() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:bool
has_redirect	client/pidb.pb.h	/^inline bool PiDBResponse::has_redirect() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_redirect	demo/pidb.pb.h	/^inline bool PiDBResponse::has_redirect() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_shape	src/libs/json11/json11.cpp	/^bool Json::has_shape(const shape & types, string & err) const {$/;"	f	class:json11::Json	typeref:typename:bool
has_shape	src/master/head/json11.cpp	/^bool Json::has_shape(const shape & types, string & err) const {$/;"	f	class:json11::Json	typeref:typename:bool
has_start	client/pidb.pb.h	/^inline bool PiDBIterator::has_start() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:bool
has_stop	client/pidb.pb.h	/^inline bool PiDBIterator::has_stop() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:bool
has_success	client/pidb.pb.h	/^inline bool PiDBResponse::has_success() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_success	client/pidb.pb.h	/^inline bool Success::has_success() const {$/;"	f	class:pidb::Success	typeref:typename:bool
has_success	demo/pidb.pb.h	/^inline bool PiDBResponse::has_success() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
has_value	client/pidb.pb.h	/^inline bool PiDBOperator::has_value() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:bool
has_value	client/pidb.pb.h	/^inline bool PiDBRequest::has_value() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
has_value	demo/pidb.pb.h	/^inline bool PiDBRequest::has_value() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:bool
hearbeat_timer_	src/server/server.h	/^	HeartbeatTimer hearbeat_timer_;$/;"	m	class:pidb::Server	typeref:typename:HeartbeatTimer
heartbeat_timeout_ms	src/include/pidb/options.h	/^        int heartbeat_timeout_ms;$/;"	m	struct:pidb::ServerOption	typeref:typename:int
i	src/libs/json11/json11.cpp	/^    size_t i;$/;"	m	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:size_t	file:
i	src/master/head/json11.cpp	/^    size_t i;$/;"	m	struct:json11::__anon36d798650111::JsonParser	typeref:typename:size_t	file:
id	client/pidb.pb.h	/^inline ::google::protobuf::int32 PiDBIterator::id() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::google::protobuf::int32
id	client/pidb.pb.h	/^inline ::google::protobuf::int32 PiDBSnapshot::id() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:::google::protobuf::int32
id	client/pidb.proto	/^	required int32 id     = 1;   \/\/ Iterator的标识$/;"	f	message:pidb.PiDBIterator	typeref:typename:int32
id	client/pidb.proto	/^	required int32 id = 1;  \/\/snapshot id$/;"	f	message:pidb.PiDBSnapshot	typeref:typename:int32
id	src/server/pidb.proto	/^	required int32 id     = 1;   \/\/ Iterator的标识$/;"	f	message:pidb.PiDBIterator	typeref:typename:int32
id	src/server/pidb.proto	/^	required int32 id = 1;  \/\/snapshot id$/;"	f	message:pidb.PiDBSnapshot	typeref:typename:int32
id_	src/server/context_cache.h	/^        int64_t id_;$/;"	m	class:pidb::Context	typeref:typename:int64_t
in_range	src/libs/json11/json11.cpp	/^static inline bool in_range(long x, long lower, long upper) {$/;"	f	namespace:json11	typeref:typename:bool	file:
in_range	src/master/head/json11.cpp	/^static inline bool in_range(long x, long lower, long upper) {$/;"	f	namespace:json11	typeref:typename:bool	file:
init	src/server/raftnode.cpp	/^    int RaftTimer::init(RaftNode* raft, int timeout_ms) {$/;"	f	class:pidb::RaftTimer	typeref:typename:int
init	src/server/server.cpp	/^    int ServerTimer::init(std::shared_ptr<pidb::Server> server, int timeout_ms) {$/;"	f	class:pidb::ServerTimer	typeref:typename:int
input	src/libs/json11/test.cpp	/^            std::string input;$/;"	m	struct:JSON11_TEST_CASE::TestMultiParse	typeref:typename:std::string	file:
int16_t	src/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t	typeref:typename:signed short
int32_t	src/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t	typeref:typename:signed int
int64_t	src/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t	typeref:typename:signed long long
int8_t	src/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t	typeref:typename:signed char
int_value	src/libs/json11/json11.cpp	/^    int int_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:int	file:
int_value	src/libs/json11/json11.cpp	/^    int int_value() const override { return static_cast<int>(m_value); }$/;"	f	class:json11::JsonDouble	typeref:typename:int	file:
int_value	src/libs/json11/json11.cpp	/^int                       JsonValue::int_value()                 const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:int
int_value	src/libs/json11/json11.cpp	/^int Json::int_value()                             const { return m_ptr->int_value();    }$/;"	f	class:json11::Json	typeref:typename:int
int_value	src/master/head/json11.cpp	/^    int int_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:int	file:
int_value	src/master/head/json11.cpp	/^    int int_value() const override { return static_cast<int>(m_value); }$/;"	f	class:json11::JsonDouble	typeref:typename:int	file:
int_value	src/master/head/json11.cpp	/^int                       JsonValue::int_value()                 const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:int
int_value	src/master/head/json11.cpp	/^int Json::int_value()                             const { return m_ptr->int_value();    }$/;"	f	class:json11::Json	typeref:typename:int
internal_default_instance	client/pidb.pb.h	/^  static inline const Empty* internal_default_instance() {$/;"	f	class:pidb::Empty	typeref:typename:const Empty *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBIterator* internal_default_instance() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const PiDBIterator *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBOperator* internal_default_instance() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const PiDBOperator *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBRequest* internal_default_instance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const PiDBRequest *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBResponse* internal_default_instance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const PiDBResponse *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBSnapshot* internal_default_instance() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:const PiDBSnapshot *
internal_default_instance	client/pidb.pb.h	/^  static inline const PiDBWriteBatch* internal_default_instance() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const PiDBWriteBatch *
internal_default_instance	client/pidb.pb.h	/^  static inline const Success* internal_default_instance() {$/;"	f	class:pidb::Success	typeref:typename:const Success *
internal_default_instance	demo/pidb.pb.h	/^  static inline const PiDBRequest* internal_default_instance() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const PiDBRequest *
internal_default_instance	demo/pidb.pb.h	/^  static inline const PiDBResponse* internal_default_instance() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const PiDBResponse *
interval_	src/master/head/guard_dog.h	/^    int interval_;      \/\/ 时间间隔(ms)$/;"	m	class:pidb::GuardDog	typeref:typename:int
is_alive	src/master/head/route_table.h	/^		bool is_alive;        \/\/ 某个region是否活着 $/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:bool
is_alive_	src/master/head/store_heartbeat.h	/^	    bool is_alive_;       \/\/ 用于master确定store是否活着$/;"	m	struct:pidb::StoreHeartbeat::StoreInfo	typeref:typename:bool
is_array	src/libs/json11/json11.hpp	/^    bool is_array()  const { return type() == ARRAY; }$/;"	f	class:json11::Json	typeref:typename:bool
is_array	src/master/head/json11.hpp	/^    bool is_array()  const { return type() == ARRAY; }$/;"	f	class:json11::Json	typeref:typename:bool
is_bool	src/libs/json11/json11.hpp	/^    bool is_bool()   const { return type() == BOOL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_bool	src/master/head/json11.hpp	/^    bool is_bool()   const { return type() == BOOL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_leader	demo/server.cpp	/^    bool is_leader() const$/;"	f	class:pidb::Data	typeref:typename:bool	file:
is_leader	src/master/master.proto	/^    required bool is_leader = 1;    \/\/ 是否是leader$/;"	f	message:pidb.PiDBRaftManageResponse	typeref:typename:bool
is_leader	src/server/master.proto	/^    required bool is_leader = 1;      \/\/ 是否是leader$/;"	f	message:pidb.PiDBRaftManageResponse	typeref:typename:bool
is_leader	src/server/raftnode.h	/^    bool is_leader() const{ return leader_term_.load(std::memory_order_acquire)>0;}$/;"	f	class:pidb::RaftNode	typeref:typename:bool
is_new	src/master/master.proto	/^    required bool is_new = 1;        \/\/ 是新增还是删除$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:bool
is_new	src/server/master.proto	/^    required bool is_new = 1;        \/\/ 是新增还是删除$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:bool
is_null	src/libs/json11/json11.hpp	/^    bool is_null()   const { return type() == NUL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_null	src/master/head/json11.hpp	/^    bool is_null()   const { return type() == NUL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_number	src/libs/json11/json11.hpp	/^    bool is_number() const { return type() == NUMBER; }$/;"	f	class:json11::Json	typeref:typename:bool
is_number	src/master/head/json11.hpp	/^    bool is_number() const { return type() == NUMBER; }$/;"	f	class:json11::Json	typeref:typename:bool
is_object	src/libs/json11/json11.hpp	/^    bool is_object() const { return type() == OBJECT; }$/;"	f	class:json11::Json	typeref:typename:bool
is_object	src/master/head/json11.hpp	/^    bool is_object() const { return type() == OBJECT; }$/;"	f	class:json11::Json	typeref:typename:bool
is_split_	src/master/head/master.h	/^    bool is_split_;  \/\/ 区分是初始化新增0还是分裂新增1$/;"	m	struct:pidb::RM	typeref:typename:bool
is_string	src/libs/json11/json11.hpp	/^    bool is_string() const { return type() == STRING; }$/;"	f	class:json11::Json	typeref:typename:bool
is_string	src/master/head/json11.hpp	/^    bool is_string() const { return type() == STRING; }$/;"	f	class:json11::Json	typeref:typename:bool
iterator_	src/server/context_cache.h	/^        std::unique_ptr<leveldb::Iterator> iterator_;$/;"	m	class:pidb::IteratorContext	typeref:typename:std::unique_ptr<leveldb::Iterator>
iterators_	src/server/server.h	/^    pidb::ContextCache<pidb::IteratorContext> iterators_;$/;"	m	class:pidb::Server	typeref:typename:pidb::ContextCache<pidb::IteratorContext>
join	demo/server.cpp	/^    void join() {$/;"	f	class:pidb::Data	typeref:typename:void	file:
join	src/master/head/master.h	/^    void join() {if (node_) node_->join();}$/;"	f	class:pidb::Master	typeref:typename:void
join	src/server/raftnode.h	/^    void join(){$/;"	f	class:pidb::RaftNode	typeref:typename:void
json11	src/libs/json11/CMakeLists.txt	/^  project(json11 CXX)$/;"	p
json11	src/libs/json11/CMakeLists.txt	/^  project(json11 VERSION 1.0.0 LANGUAGES CXX)$/;"	p
json11	src/libs/json11/CMakeLists.txt	/^add_library(json11 json11.cpp)$/;"	t
json11	src/libs/json11/README.md	/^json11$/;"	s
json11	src/libs/json11/json11.cpp	/^namespace json11 {$/;"	n	file:
json11	src/libs/json11/json11.hpp	/^namespace json11 {$/;"	n
json11	src/master/head/json11.cpp	/^namespace json11 {$/;"	n	file:
json11	src/master/head/json11.hpp	/^namespace json11 {$/;"	n
json11_test	src/libs/json11/CMakeLists.txt	/^  add_executable(json11_test test.cpp)$/;"	t
kCorruption	src/include/pidb/status.h	/^            kCorruption = 2,$/;"	e	enum:pidb::Status::Code
kDeleteOP	src/server/raftnode.h	/^        kDeleteOP  = 3,$/;"	e	enum:pidb::RaftNode::RaftOpType
kGetOp	src/server/raftnode.h	/^        kGetOp     = 1,$/;"	e	enum:pidb::RaftNode::RaftOpType
kIOError	src/include/pidb/status.h	/^            kIOError = 5$/;"	e	enum:pidb::Status::Code
kIdFieldNumber	client/pidb.pb.cc	/^const int PiDBIterator::kIdFieldNumber;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kIdFieldNumber	client/pidb.pb.cc	/^const int PiDBSnapshot::kIdFieldNumber;$/;"	m	class:pidb::PiDBSnapshot	typeref:typename:const int
kIdFieldNumber	client/pidb.pb.h	/^  static const int kIdFieldNumber = 1;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kIdFieldNumber	client/pidb.pb.h	/^  static const int kIdFieldNumber = 1;$/;"	m	class:pidb::PiDBSnapshot	typeref:typename:const int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::Empty	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBIterator	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBOperator	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBRequest	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBResponse	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBSnapshot	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBWriteBatch	typeref:typename:int
kIndexInFileMessages	client/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::Success	typeref:typename:int
kIndexInFileMessages	demo/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBRequest	typeref:typename:int
kIndexInFileMessages	demo/pidb.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:pidb::PiDBResponse	typeref:typename:int
kInvalidArgument	src/include/pidb/status.h	/^            kInvalidArgument = 4,$/;"	e	enum:pidb::Status::Code
kKeyFieldNumber	client/pidb.pb.cc	/^const int PiDBOperator::kKeyFieldNumber;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kKeyFieldNumber	client/pidb.pb.cc	/^const int PiDBRequest::kKeyFieldNumber;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kKeyFieldNumber	client/pidb.pb.h	/^  static const int kKeyFieldNumber = 1;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kKeyFieldNumber	client/pidb.pb.h	/^  static const int kKeyFieldNumber = 2;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kKeyFieldNumber	demo/pidb.pb.cc	/^const int PiDBRequest::kKeyFieldNumber;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kKeyFieldNumber	demo/pidb.pb.h	/^  static const int kKeyFieldNumber = 1;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kLittleEndian	src/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	v	namespace:leveldb::port	typeref:typename:const bool
kLittleEndian	src/port/port_stdcxx.h	/^static const bool kLittleEndian = !LEVELDB_IS_BIG_ENDIAN;$/;"	v	namespace:leveldb::port	typeref:typename:const bool
kMessageFieldNumber	client/pidb.pb.cc	/^const int Success::kMessageFieldNumber;$/;"	m	class:pidb::Success	typeref:typename:const int
kMessageFieldNumber	client/pidb.pb.h	/^  static const int kMessageFieldNumber = 2;$/;"	m	class:pidb::Success	typeref:typename:const int
kNewValueFieldNumber	client/pidb.pb.cc	/^const int PiDBResponse::kNewValueFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kNewValueFieldNumber	client/pidb.pb.h	/^  static const int kNewValueFieldNumber = 3;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kNewValueFieldNumber	demo/pidb.pb.cc	/^const int PiDBResponse::kNewValueFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kNewValueFieldNumber	demo/pidb.pb.h	/^  static const int kNewValueFieldNumber = 3;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kNotFound	src/include/pidb/status.h	/^            kNotFound = 1,$/;"	e	enum:pidb::Status::Code
kNotSupported	src/include/pidb/status.h	/^            kNotSupported = 3,$/;"	e	enum:pidb::Status::Code
kOk	src/include/pidb/status.h	/^            kOk = 0,$/;"	e	enum:pidb::Status::Code
kOldValueFieldNumber	client/pidb.pb.cc	/^const int PiDBResponse::kOldValueFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kOldValueFieldNumber	client/pidb.pb.h	/^  static const int kOldValueFieldNumber = 2;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kOldValueFieldNumber	demo/pidb.pb.cc	/^const int PiDBResponse::kOldValueFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kOldValueFieldNumber	demo/pidb.pb.h	/^  static const int kOldValueFieldNumber = 2;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kOpFieldNumber	client/pidb.pb.cc	/^const int PiDBOperator::kOpFieldNumber;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kOpFieldNumber	client/pidb.pb.h	/^  static const int kOpFieldNumber = 1;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kPutOp	src/server/raftnode.h	/^        kPutOp     = 2,$/;"	e	enum:pidb::RaftNode::RaftOpType
kRedirectFieldNumber	client/pidb.pb.cc	/^const int PiDBResponse::kRedirectFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kRedirectFieldNumber	client/pidb.pb.h	/^  static const int kRedirectFieldNumber = 4;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kRedirectFieldNumber	demo/pidb.pb.cc	/^const int PiDBResponse::kRedirectFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kRedirectFieldNumber	demo/pidb.pb.h	/^  static const int kRedirectFieldNumber = 4;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kStartFieldNumber	client/pidb.pb.cc	/^const int PiDBIterator::kStartFieldNumber;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kStartFieldNumber	client/pidb.pb.h	/^  static const int kStartFieldNumber = 2;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kStopFieldNumber	client/pidb.pb.cc	/^const int PiDBIterator::kStopFieldNumber;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kStopFieldNumber	client/pidb.pb.h	/^  static const int kStopFieldNumber = 3;$/;"	m	class:pidb::PiDBIterator	typeref:typename:const int
kSuccessFieldNumber	client/pidb.pb.cc	/^const int PiDBResponse::kSuccessFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kSuccessFieldNumber	client/pidb.pb.cc	/^const int Success::kSuccessFieldNumber;$/;"	m	class:pidb::Success	typeref:typename:const int
kSuccessFieldNumber	client/pidb.pb.h	/^  static const int kSuccessFieldNumber = 1;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kSuccessFieldNumber	client/pidb.pb.h	/^  static const int kSuccessFieldNumber = 1;$/;"	m	class:pidb::Success	typeref:typename:const int
kSuccessFieldNumber	demo/pidb.pb.cc	/^const int PiDBResponse::kSuccessFieldNumber;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kSuccessFieldNumber	demo/pidb.pb.h	/^  static const int kSuccessFieldNumber = 1;$/;"	m	class:pidb::PiDBResponse	typeref:typename:const int
kUnknownOp	src/server/raftnode.h	/^        kUnknownOp = 0,$/;"	e	enum:pidb::RaftNode::RaftOpType
kValueFieldNumber	client/pidb.pb.cc	/^const int PiDBOperator::kValueFieldNumber;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kValueFieldNumber	client/pidb.pb.cc	/^const int PiDBRequest::kValueFieldNumber;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kValueFieldNumber	client/pidb.pb.h	/^  static const int kValueFieldNumber = 2;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kValueFieldNumber	client/pidb.pb.h	/^  static const int kValueFieldNumber = 3;$/;"	m	class:pidb::PiDBOperator	typeref:typename:const int
kValueFieldNumber	demo/pidb.pb.cc	/^const int PiDBRequest::kValueFieldNumber;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kValueFieldNumber	demo/pidb.pb.h	/^  static const int kValueFieldNumber = 2;$/;"	m	class:pidb::PiDBRequest	typeref:typename:const int
kWriteBatchFieldNumber	client/pidb.pb.cc	/^const int PiDBWriteBatch::kWriteBatchFieldNumber;$/;"	m	class:pidb::PiDBWriteBatch	typeref:typename:const int
kWriteBatchFieldNumber	client/pidb.pb.h	/^  static const int kWriteBatchFieldNumber = 1;$/;"	m	class:pidb::PiDBWriteBatch	typeref:typename:const int
kWriteOp	src/server/raftnode.h	/^        kWriteOp   = 4$/;"	e	enum:pidb::RaftNode::RaftOpType
key	client/pidb.pb.h	/^inline const ::std::string& PiDBOperator::key() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const::std::string &
key	client/pidb.pb.h	/^inline const ::std::string& PiDBRequest::key() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::std::string &
key	client/pidb.proto	/^	required string key = 1;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
key	client/pidb.proto	/^    required string key=2;$/;"	f	message:pidb.PiDBOperator	typeref:typename:string
key	demo/pidb.pb.h	/^inline const ::std::string& PiDBRequest::key() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::std::string &
key	demo/pidb.proto	/^	required string key = 1;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
key	src/master/master.proto	/^    required string key = 1;          \/\/ client根据此key查询路由信息$/;"	f	message:pidb.PiDBClientRequest	typeref:typename:string
key	src/server/master.proto	/^    required string key = 1;          \/\/ client根据此key查询路由信息$/;"	f	message:pidb.PiDBClientRequest	typeref:typename:string
key	src/server/pidb.proto	/^	required string key = 1;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
key	src/server/pidb.proto	/^	required string key=2;$/;"	f	message:pidb.PiDBOperator	typeref:typename:string
leader_addr	src/master/master.proto	/^    optional string leader_addr = 3;  \/\/ 返回对应region的leader地址$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
leader_addr	src/master/master.proto	/^    required string leader_addr = 1;  \/\/ 分裂的leader的地址$/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
leader_addr	src/master/master.proto	/^    required string leader_addr = 1;  \/\/ 发送心跳的leader的地址$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
leader_addr	src/master/master.proto	/^    required string leader_addr = 1;  \/\/ 老region的leader的地址$/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
leader_addr	src/server/master.proto	/^    optional string leader_addr = 2;  \/\/ 若是leader发地址$/;"	f	message:pidb.PiDBRaftManageResponse	typeref:typename:string
leader_addr	src/server/master.proto	/^    optional string leader_addr = 3;  \/\/ 返回对应region的leader地址$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
leader_addr	src/server/master.proto	/^    required string leader_addr = 1;  \/\/ 分裂的leader的地址$/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
leader_addr	src/server/master.proto	/^    required string leader_addr = 1;  \/\/ 发送心跳的leader的地址$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
leader_addr	src/server/master.proto	/^    required string leader_addr = 1;  \/\/ 老region的leader的地址$/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
leader_addr_	src/master/head/route_table.h	/^		string leader_addr_;  \/\/ 所属raft的leader地址$/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:string
leader_num	src/master/master.proto	/^    optional int32 leader_num = 3;    \/\/ store上的leader数量$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:int32
leader_num	src/server/master.proto	/^    optional int32 leader_num = 3;    \/\/ store上的leader数量$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:int32
leader_num_	src/master/head/store_heartbeat.h	/^		int leader_num_;      \/\/ store上的leader数量$/;"	m	struct:pidb::StoreHeartbeat::StoreInfo	typeref:typename:int
leader_term_	src/master/head/master.h	/^    butil::atomic<int64_t> leader_term_;  \/\/ 任期号$/;"	m	class:pidb::Master	typeref:typename:butil::atomic<int64_t>
leader_term_	src/server/raftnode.h	/^    std::atomic<int64_t> leader_term_;$/;"	m	class:pidb::RaftNode	typeref:typename:std::atomic<int64_t>
least_region_	src/master/head/store_heartbeat.h	/^    std::vector<string> least_region_; \/\/ 维护一个region数目递增的store表$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:std::vector<string>
less	src/libs/json11/json11.cpp	/^    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(/;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
less	src/libs/json11/json11.cpp	/^    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(/;"	f	class:json11::JsonInt	typeref:typename:bool	file:
less	src/libs/json11/json11.cpp	/^    bool less(const JsonValue * other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
less	src/master/head/json11.cpp	/^    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(/;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
less	src/master/head/json11.cpp	/^    bool less(const JsonValue * other)   const override { return m_value <  other->number_value(/;"	f	class:json11::JsonInt	typeref:typename:bool	file:
less	src/master/head/json11.cpp	/^    bool less(const JsonValue * other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
levedb功能补充	src/README.md	/^## levedb功能补充$/;"	s	chapter:server目录
leveldb	src/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	src/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	src/port/port_stdcxx.h	/^namespace leveldb {$/;"	n
limit	src/server/raftnode.h	/^    Slice limit;$/;"	m	struct:pidb::Range	typeref:typename:Slice
limit	src/server/route_table.h	/^        std::string limit;$/;"	m	struct:pidb::RouteTable::Record	typeref:typename:std::string
link_overwrite	demo/server.cpp	/^    static int link_overwrite(const char* old_path, const char* new_path) {$/;"	f	class:pidb::Data	typeref:typename:int	file:
link_overwrite	src/server/raftnode.cpp	/^    int RaftNode::link_overwrite(const char* old_path, const char* new_path) {$/;"	f	class:pidb::RaftNode	typeref:typename:int
m_ptr	src/libs/json11/json11.hpp	/^    std::shared_ptr<JsonValue> m_ptr;$/;"	m	class:json11::Json	typeref:typename:std::shared_ptr<JsonValue>
m_ptr	src/master/head/json11.hpp	/^    std::shared_ptr<JsonValue> m_ptr;$/;"	m	class:json11::Json	typeref:typename:std::shared_ptr<JsonValue>
m_value	src/libs/json11/json11.cpp	/^    const T m_value;$/;"	m	class:json11::Value	typeref:typename:const T	file:
m_value	src/master/head/json11.cpp	/^    const T m_value;$/;"	m	class:json11::Value	typeref:typename:const T	file:
main	client/test_get.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	client/test_iterator.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	client/test_pushfile.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	client/test_put.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	client/test_snapshot.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	client/test_write_batch.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	demo/client.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	demo/server.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	src/libs/json11/test.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	src/master/master_main.cpp	/^int main(int argc,char *argv[]){$/;"	f	typeref:typename:int
main	src/master/test_client.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	src/master/test_main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	src/server/RouteTableTest.cpp	/^int main(int argc,char *argv[]){$/;"	f	typeref:typename:int
main	src/server/main.cpp	/^int main(int argc,char *argv[]){$/;"	f	typeref:typename:int
map_	src/server/context_cache.h	/^        std::unordered_map<uint64_t, std::shared_ptr<T>> map_;$/;"	m	class:pidb::ContextCache	typeref:typename:std::unordered_map<uint64_t,std::shared_ptr<T>>
master_	src/master/head/master.h	/^	Master* master_;$/;"	m	struct:pidb::RM	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	class:pidb::ClientClosure	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	class:pidb::MasterServiceImpl	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	class:pidb::RegionClosure	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	class:pidb::SplitClosure	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	class:pidb::StoreClosure	typeref:typename:Master *
master_	src/master/head/master.h	/^    Master* master_;$/;"	m	struct:pidb::ISHL	typeref:typename:Master *
max_depth	src/libs/json11/json11.cpp	/^static const int max_depth = 200;$/;"	v	namespace:json11	typeref:typename:const int	file:
max_depth	src/master/head/json11.cpp	/^static const int max_depth = 200;$/;"	v	namespace:json11	typeref:typename:const int	file:
max_key	src/master/master.proto	/^    optional string max_key = 5;     \/\/ 同上$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
max_key	src/server/master.proto	/^    optional string max_key = 5;     \/\/ 同上$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
max_key_	src/master/head/master.h	/^    string max_key_;$/;"	m	struct:pidb::RM	typeref:typename:string
max_key_	src/master/head/route_table.h	/^		string max_key_;      \/\/ 最大key值$/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:string
message	client/pidb.pb.h	/^inline const ::std::string& Success::message() const {$/;"	f	class:pidb::Success	typeref:typename:const::std::string &
message	client/pidb.proto	/^	optional string message = 2;$/;"	f	message:pidb.Success	typeref:typename:string
message	src/master/master.proto	/^      required string message = 1;$/;"	f	message:pidb.EchoRequest	typeref:typename:string
message	src/master/master.proto	/^      required string message = 1;$/;"	f	message:pidb.EchoResponse	typeref:typename:string
message	src/server/pidb.proto	/^	optional string message = 2;$/;"	f	message:pidb.Success	typeref:typename:string
min_key	src/master/master.proto	/^    optional string min_key = 4;     \/\/ 组相关region的范围$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
min_key	src/server/master.proto	/^    optional string min_key = 4;     \/\/ 组相关region的范围$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
min_key_	src/master/head/master.h	/^    string min_key_;$/;"	m	struct:pidb::RM	typeref:typename:string
min_key_	src/master/head/route_table.h	/^		string min_key_;      \/\/ 最小key值$/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:string
mu_	src/port/port_stdcxx.h	/^  Mutex* const mu_;$/;"	m	class:leveldb::port::CondVar	typeref:typename:Mutex * const
mu_	src/port/port_stdcxx.h	/^  std::mutex mu_;$/;"	m	class:leveldb::port::Mutex	typeref:typename:std::mutex
mutable_key	client/pidb.pb.h	/^inline ::std::string* PiDBOperator::mutable_key() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::std::string *
mutable_key	client/pidb.pb.h	/^inline ::std::string* PiDBRequest::mutable_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
mutable_key	demo/pidb.pb.h	/^inline ::std::string* PiDBRequest::mutable_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
mutable_message	client/pidb.pb.h	/^inline ::std::string* Success::mutable_message() {$/;"	f	class:pidb::Success	typeref:typename:::std::string *
mutable_new_value	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_new_value	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_old_value	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_old_value	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_redirect	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_redirect	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::mutable_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
mutable_start	client/pidb.pb.h	/^inline ::std::string* PiDBIterator::mutable_start() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::std::string *
mutable_stop	client/pidb.pb.h	/^inline ::std::string* PiDBIterator::mutable_stop() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::std::string *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::Empty	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	client/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::Success	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	demo/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	demo/pidb.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_value	client/pidb.pb.h	/^inline ::std::string* PiDBOperator::mutable_value() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::std::string *
mutable_value	client/pidb.pb.h	/^inline ::std::string* PiDBRequest::mutable_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
mutable_value	demo/pidb.pb.h	/^inline ::std::string* PiDBRequest::mutable_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
mutable_writebatch	client/pidb.pb.h	/^PiDBWriteBatch::mutable_writebatch() {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::google::protobuf::RepeatedPtrField<::pidb::PiDBOperator> *
mutable_writebatch	client/pidb.pb.h	/^inline ::pidb::PiDBOperator* PiDBWriteBatch::mutable_writebatch(int index) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:::pidb::PiDBOperator *
mutex1_	src/master/head/store_heartbeat.h	/^	bthread_mutex_t mutex1_;     \/\/ 一把互斥锁$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:bthread_mutex_t
mutex_	src/master/head/guard_dog.h	/^    bthread_mutex_t mutex_; \/\/ 一把互斥锁$/;"	m	class:pidb::GuardDog	typeref:typename:bthread_mutex_t
mutex_	src/master/head/route_table.h	/^	bthread_mutex_t mutex_;  \/\/ 一把互斥锁$/;"	m	class:pidb::RouteTable	typeref:typename:bthread_mutex_t
mutex_	src/master/head/store_heartbeat.h	/^	bthread_mutex_t mutex_;     \/\/ 一把互斥锁$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:bthread_mutex_t
mutex_	src/server/server.h	/^    std::mutex mutex_;$/;"	m	class:pidb::ServerClosure	typeref:typename:std::mutex
new_group_	src/master/head/master.h	/^    string new_group_;$/;"	m	struct:pidb::ISHL	typeref:typename:string
new_value	client/pidb.pb.h	/^inline const ::std::string& PiDBResponse::new_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
new_value	client/pidb.proto	/^	optional string new_value = 3;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
new_value	demo/pidb.pb.h	/^inline const ::std::string& PiDBResponse::new_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
new_value	demo/pidb.proto	/^	optional string new_value = 3;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
new_value	src/server/pidb.proto	/^	optional string new_value = 3;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
node_	src/master/head/master.h	/^    braft::Node* volatile node_;  \/\/ raft的一个节点$/;"	m	class:pidb::Master	typeref:typename:braft::Node * volatile
node_	src/server/raftnode.h	/^	RaftNode* node_;$/;"	m	class:pidb::RaftNodeClosure	typeref:typename:RaftNode *
node_	src/server/raftnode.h	/^    braft::Node* volatile node_;$/;"	m	class:pidb::RaftNode	typeref:typename:braft::Node * volatile
nodes_	src/server/server.h	/^	std::map<std::string,std::shared_ptr<RaftNode>> nodes_;$/;"	m	class:pidb::Server	typeref:typename:std::map<std::string,std::shared_ptr<RaftNode>>
noexcept	src/libs/json11/json11.hpp	/^            #define noexcept /;"	d
noexcept	src/master/head/json11.hpp	/^            #define noexcept /;"	d
null	src/libs/json11/json11.cpp	/^    const std::shared_ptr<JsonValue> null = make_shared<JsonNull>();$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
null	src/master/head/json11.cpp	/^    const std::shared_ptr<JsonValue> null = make_shared<JsonNull>();$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
number_value	src/libs/json11/json11.cpp	/^    double number_value() const override { return m_value; }$/;"	f	class:json11::JsonDouble	typeref:typename:double	file:
number_value	src/libs/json11/json11.cpp	/^    double number_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:double	file:
number_value	src/libs/json11/json11.cpp	/^double                    JsonValue::number_value()              const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:double
number_value	src/libs/json11/json11.cpp	/^double Json::number_value()                       const { return m_ptr->number_value(); }$/;"	f	class:json11::Json	typeref:typename:double
number_value	src/master/head/json11.cpp	/^    double number_value() const override { return m_value; }$/;"	f	class:json11::JsonDouble	typeref:typename:double	file:
number_value	src/master/head/json11.cpp	/^    double number_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:double	file:
number_value	src/master/head/json11.cpp	/^double                    JsonValue::number_value()              const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:double
number_value	src/master/head/json11.cpp	/^double Json::number_value()                       const { return m_ptr->number_value(); }$/;"	f	class:json11::Json	typeref:typename:double
object	src/libs/json11/json11.hpp	/^    typedef std::map<std::string, Json> object;$/;"	t	class:json11::Json	typeref:typename:std::map<std::string,Json>
object	src/master/head/json11.hpp	/^    typedef std::map<std::string, Json> object;$/;"	t	class:json11::Json	typeref:typename:std::map<std::string,Json>
object_items	src/libs/json11/json11.cpp	/^    const Json::object &object_items() const override { return m_value; }$/;"	f	class:json11::JsonObject	typeref:typename:const Json::object &	file:
object_items	src/libs/json11/json11.cpp	/^const map<string, Json> & Json::object_items()    const { return m_ptr->object_items(); }$/;"	f	class:json11::Json	typeref:typename:const map<string,Json> &
object_items	src/libs/json11/json11.cpp	/^const map<string, Json> & JsonValue::object_items()              const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const map<string,Json> &
object_items	src/master/head/json11.cpp	/^    const Json::object &object_items() const override { return m_value; }$/;"	f	class:json11::JsonObject	typeref:typename:const Json::object &	file:
object_items	src/master/head/json11.cpp	/^const map<string, Json> & Json::object_items()    const { return m_ptr->object_items(); }$/;"	f	class:json11::Json	typeref:typename:const map<string,Json> &
object_items	src/master/head/json11.cpp	/^const map<string, Json> & JsonValue::object_items()              const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const map<string,Json> &
offsets	client/pidb.pb.h	/^  static const ::google::protobuf::uint32 offsets[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::uint32[]
offsets	demo/pidb.pb.h	/^  static const ::google::protobuf::uint32 offsets[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::uint32[]
ok	src/include/pidb/status.h	/^        bool ok() const { return (state_ == nullptr); }$/;"	f	class:pidb::Status	typeref:typename:bool
old_group_	src/master/head/master.h	/^    string old_group_;$/;"	m	struct:pidb::ISHL	typeref:typename:string
old_value	client/pidb.pb.h	/^inline const ::std::string& PiDBResponse::old_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
old_value	client/pidb.proto	/^	optional string old_value = 2;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
old_value	demo/pidb.pb.h	/^inline const ::std::string& PiDBResponse::old_value() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
old_value	demo/pidb.proto	/^	optional string old_value = 2;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
old_value	src/server/pidb.proto	/^	optional string old_value = 2;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
on_apply	demo/server.cpp	/^    void on_apply(braft::Iterator& iter) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_apply	src/master/head/master.cpp	/^void Master::on_apply(braft::Iterator& iter) {$/;"	f	class:pidb::Master	typeref:typename:void
on_apply	src/server/raftnode.cpp	/^    void RaftNode::on_apply(braft::Iterator &iter) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_closed	src/server/pidb_service_impl.cpp	/^        virtual void on_closed(brpc::StreamId id) {$/;"	f	class:pidb::StreamReceiver	typeref:typename:void	file:
on_configuration_committed	demo/server.cpp	/^    void on_configuration_committed(const ::braft::Configuration& conf) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_configuration_committed	src/master/head/master.cpp	/^void Master::on_configuration_committed(const ::braft::Configuration& conf) {$/;"	f	class:pidb::Master	typeref:typename:void
on_configuration_committed	src/server/raftnode.cpp	/^    void RaftNode::on_configuration_committed(const ::braft::Configuration &conf) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_destroy	src/server/raftnode.cpp	/^    void RaftTimer::on_destroy() {$/;"	f	class:pidb::RaftTimer	typeref:typename:void
on_destroy	src/server/server.cpp	/^    void ServerTimer::on_destroy() {$/;"	f	class:pidb::ServerTimer	typeref:typename:void
on_error	demo/server.cpp	/^    void on_error(const ::braft::Error& e) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_error	src/master/head/master.cpp	/^void Master::on_error(const ::braft::Error& e) {$/;"	f	class:pidb::Master	typeref:typename:void
on_error	src/server/raftnode.cpp	/^    void RaftNode::on_error(const ::braft::Error &e) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_idle_timeout	src/server/pidb_service_impl.cpp	/^        virtual void on_idle_timeout(brpc::StreamId id) {$/;"	f	class:pidb::StreamReceiver	typeref:typename:void	file:
on_leader_start	demo/server.cpp	/^    void on_leader_start(int64_t term) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_leader_start	src/master/head/master.cpp	/^void Master::on_leader_start(int64_t term) {$/;"	f	class:pidb::Master	typeref:typename:void
on_leader_start	src/server/raftnode.cpp	/^    void RaftNode::on_leader_start(int64_t term) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_leader_stop	demo/server.cpp	/^    void on_leader_stop(const butil::Status& status) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_leader_stop	src/master/head/master.cpp	/^void Master::on_leader_stop(const butil::Status& status) {$/;"	f	class:pidb::Master	typeref:typename:void
on_received_messages	src/server/pidb_service_impl.cpp	/^        virtual int on_received_messages(brpc::StreamId id,$/;"	f	class:pidb::StreamReceiver	typeref:typename:int	file:
on_role_change	src/server/raftnode.cpp	/^    void RaftNode::on_role_change() {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_shutdown	demo/server.cpp	/^    void on_shutdown() {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_shutdown	src/master/head/master.cpp	/^void Master::on_shutdown() {$/;"	f	class:pidb::Master	typeref:typename:void
on_shutdown	src/server/raftnode.cpp	/^    void RaftNode::on_shutdown() {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_snapshot_load	demo/server.cpp	/^    int on_snapshot_load(braft::SnapshotReader* reader) {$/;"	f	class:pidb::Data	typeref:typename:int	file:
on_snapshot_load	src/master/head/master.cpp	/^int Master::on_snapshot_load(braft::SnapshotReader *reader) {$/;"	f	class:pidb::Master	typeref:typename:int
on_snapshot_load	src/server/raftnode.cpp	/^    int RaftNode::on_snapshot_load(braft::SnapshotReader *reader) {$/;"	f	class:pidb::RaftNode	typeref:typename:int
on_snapshot_save	demo/server.cpp	/^    void on_snapshot_save(braft::SnapshotWriter* writer, braft::Closure* done) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_snapshot_save	src/master/head/master.cpp	/^void Master::on_snapshot_save(braft::SnapshotWriter *writer, braft::Closure *done) {$/;"	f	class:pidb::Master	typeref:typename:void
on_snapshot_save	src/server/raftnode.cpp	/^    void RaftNode::on_snapshot_save(braft::SnapshotWriter *writer, braft::Closure *done) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_start_following	demo/server.cpp	/^    void on_start_following(const ::braft::LeaderChangeContext& ctx) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_start_following	src/master/head/master.cpp	/^void Master::on_start_following(const ::braft::LeaderChangeContext& ctx) {$/;"	f	class:pidb::Master	typeref:typename:void
on_start_following	src/server/raftnode.cpp	/^    void RaftNode::on_start_following(const ::braft::LeaderChangeContext &ctx) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
on_stop_following	demo/server.cpp	/^    void on_stop_following(const ::braft::LeaderChangeContext& ctx) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
on_stop_following	src/master/head/master.cpp	/^void Master::on_stop_following(const ::braft::LeaderChangeContext& ctx) {$/;"	f	class:pidb::Master	typeref:typename:void
on_stop_following	src/server/raftnode.cpp	/^    void RaftNode::on_stop_following(const ::braft::LeaderChangeContext &ctx) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
op	client/pidb.pb.h	/^inline ::google::protobuf::int32 PiDBOperator::op() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::google::protobuf::int32
op	client/pidb.proto	/^	required int32 op = 1;   \/\/0: unknown 0:Put 1:Delete  2:Write 完善$/;"	f	message:pidb.PiDBOperator	typeref:typename:int32
op	src/server/pidb.proto	/^	required int32 op = 1;   \/\/0: unknown 0:Put 1:Delete  2:Write 完善$/;"	f	message:pidb.PiDBOperator	typeref:typename:int32
operator !=	src/libs/json11/json11.hpp	/^    bool operator!= (const Json &rhs) const { return !(*this == rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator !=	src/master/head/json11.hpp	/^    bool operator!= (const Json &rhs) const { return !(*this == rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator <	src/libs/json11/json11.cpp	/^    bool operator<(NullStruct) const { return false; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator <	src/libs/json11/json11.cpp	/^bool Json::operator< (const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator <	src/master/head/json11.cpp	/^    bool operator<(NullStruct) const { return false; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator <	src/master/head/json11.cpp	/^bool Json::operator< (const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator <=	src/libs/json11/json11.hpp	/^    bool operator<= (const Json &rhs) const { return !(rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator <=	src/master/head/json11.hpp	/^    bool operator<= (const Json &rhs) const { return !(rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator =	client/pidb.pb.h	/^  inline Empty& operator=(Empty&& from) noexcept {$/;"	f	class:pidb::Empty	typeref:typename:Empty &
operator =	client/pidb.pb.h	/^  inline Empty& operator=(const Empty& from) {$/;"	f	class:pidb::Empty	typeref:typename:Empty &
operator =	client/pidb.pb.h	/^  inline PiDBIterator& operator=(PiDBIterator&& from) noexcept {$/;"	f	class:pidb::PiDBIterator	typeref:typename:PiDBIterator &
operator =	client/pidb.pb.h	/^  inline PiDBIterator& operator=(const PiDBIterator& from) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:PiDBIterator &
operator =	client/pidb.pb.h	/^  inline PiDBOperator& operator=(PiDBOperator&& from) noexcept {$/;"	f	class:pidb::PiDBOperator	typeref:typename:PiDBOperator &
operator =	client/pidb.pb.h	/^  inline PiDBOperator& operator=(const PiDBOperator& from) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:PiDBOperator &
operator =	client/pidb.pb.h	/^  inline PiDBRequest& operator=(PiDBRequest&& from) noexcept {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest &
operator =	client/pidb.pb.h	/^  inline PiDBRequest& operator=(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest &
operator =	client/pidb.pb.h	/^  inline PiDBResponse& operator=(PiDBResponse&& from) noexcept {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse &
operator =	client/pidb.pb.h	/^  inline PiDBResponse& operator=(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse &
operator =	client/pidb.pb.h	/^  inline PiDBSnapshot& operator=(PiDBSnapshot&& from) noexcept {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:PiDBSnapshot &
operator =	client/pidb.pb.h	/^  inline PiDBSnapshot& operator=(const PiDBSnapshot& from) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:PiDBSnapshot &
operator =	client/pidb.pb.h	/^  inline PiDBWriteBatch& operator=(PiDBWriteBatch&& from) noexcept {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:PiDBWriteBatch &
operator =	client/pidb.pb.h	/^  inline PiDBWriteBatch& operator=(const PiDBWriteBatch& from) {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:PiDBWriteBatch &
operator =	client/pidb.pb.h	/^  inline Success& operator=(Success&& from) noexcept {$/;"	f	class:pidb::Success	typeref:typename:Success &
operator =	client/pidb.pb.h	/^  inline Success& operator=(const Success& from) {$/;"	f	class:pidb::Success	typeref:typename:Success &
operator =	demo/pidb.pb.h	/^  inline PiDBRequest& operator=(PiDBRequest&& from) noexcept {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest &
operator =	demo/pidb.pb.h	/^  inline PiDBRequest& operator=(const PiDBRequest& from) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:PiDBRequest &
operator =	demo/pidb.pb.h	/^  inline PiDBResponse& operator=(PiDBResponse&& from) noexcept {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse &
operator =	demo/pidb.pb.h	/^  inline PiDBResponse& operator=(const PiDBResponse& from) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:PiDBResponse &
operator =	src/include/pidb/status.h	/^    inline Status& Status::operator=(Status&& rhs) noexcept {$/;"	f	class:pidb::Status	typeref:typename:Status &
operator =	src/include/pidb/status.h	/^    inline Status& Status::operator=(const Status& rhs) {$/;"	f	class:pidb::Status	typeref:typename:Status &
operator ==	src/libs/json11/json11.cpp	/^    bool operator==(NullStruct) const { return true; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator ==	src/libs/json11/json11.cpp	/^bool Json::operator== (const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator ==	src/master/head/json11.cpp	/^    bool operator==(NullStruct) const { return true; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator ==	src/master/head/json11.cpp	/^bool Json::operator== (const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator >	src/libs/json11/json11.hpp	/^    bool operator>  (const Json &rhs) const { return  (rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator >	src/master/head/json11.hpp	/^    bool operator>  (const Json &rhs) const { return  (rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator >=	src/libs/json11/json11.hpp	/^    bool operator>= (const Json &rhs) const { return !(*this < rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator >=	src/master/head/json11.hpp	/^    bool operator>= (const Json &rhs) const { return !(*this < rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator []	src/server/route_table.cpp	/^const std::string & RouteTable::operator[](const std::string &key) const {$/;"	f	class:pidb::RouteTable	typeref:typename:const std::string &
operator [] 	src/libs/json11/json11.cpp	/^const Json &              JsonValue::operator[] (const string &) const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator [] 	src/libs/json11/json11.cpp	/^const Json &              JsonValue::operator[] (size_t)         const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator [] 	src/libs/json11/json11.cpp	/^const Json & Json::operator[] (const string &key) const { return (*m_ptr)[key];         }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator [] 	src/libs/json11/json11.cpp	/^const Json & Json::operator[] (size_t i)          const { return (*m_ptr)[i];           }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator [] 	src/libs/json11/json11.cpp	/^const Json & JsonArray::operator[] (size_t i) const {$/;"	f	class:json11::JsonArray	typeref:typename:const Json &
operator [] 	src/libs/json11/json11.cpp	/^const Json & JsonObject::operator[] (const string &key) const {$/;"	f	class:json11::JsonObject	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json &              JsonValue::operator[] (const string &) const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json &              JsonValue::operator[] (size_t)         const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json & Json::operator[] (const string &key) const { return (*m_ptr)[key];         }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json & Json::operator[] (size_t i)          const { return (*m_ptr)[i];           }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json & JsonArray::operator[] (size_t i) const {$/;"	f	class:json11::JsonArray	typeref:typename:const Json &
operator [] 	src/master/head/json11.cpp	/^const Json & JsonObject::operator[] (const string &key) const {$/;"	f	class:json11::JsonObject	typeref:typename:const Json &
option_	src/server/server.h	/^    ServerOption option_;$/;"	m	class:pidb::Server	typeref:typename:ServerOption
options_	src/master/head/raft_manage.h	/^    brpc::ChannelOptions options_; \/\/ brpc的一个参数$/;"	m	class:pidb::RaftManage	typeref:typename:brpc::ChannelOptions
owns_channel_	client/pidb.pb.h	/^  bool owns_channel_;$/;"	m	class:pidb::PiDBService_Stub	typeref:typename:bool
owns_channel_	demo/pidb.pb.h	/^  bool owns_channel_;$/;"	m	class:pidb::PiDBService_Stub	typeref:typename:bool
parse	src/libs/json11/json11.cpp	/^Json Json::parse(const string &in, string &err, JsonParse strategy) {$/;"	f	class:json11::Json	typeref:typename:Json
parse	src/libs/json11/json11.hpp	/^    static Json parse(const char * in,$/;"	f	class:json11::Json	typeref:typename:Json
parse	src/master/head/json11.cpp	/^Json Json::parse(const string &in, string &err, JsonParse strategy) {$/;"	f	class:json11::Json	typeref:typename:Json
parse	src/master/head/json11.hpp	/^    static Json parse(const char * in,$/;"	f	class:json11::Json	typeref:typename:Json
parse_from_stdin	src/libs/json11/test.cpp	/^static void parse_from_stdin() {$/;"	f	typeref:typename:void	file:
parse_json	src/libs/json11/json11.cpp	/^    Json parse_json(int depth) {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:Json	file:
parse_json	src/master/head/json11.cpp	/^    Json parse_json(int depth) {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:Json	file:
parse_multi	src/libs/json11/json11.cpp	/^vector<Json> Json::parse_multi(const string &in,$/;"	f	class:json11::Json	typeref:typename:vector<Json>
parse_multi	src/libs/json11/json11.hpp	/^    static inline std::vector<Json> parse_multi($/;"	f	class:json11::Json	typeref:typename:std::vector<Json>
parse_multi	src/master/head/json11.cpp	/^vector<Json> Json::parse_multi(const string &in,$/;"	f	class:json11::Json	typeref:typename:vector<Json>
parse_multi	src/master/head/json11.hpp	/^    static inline std::vector<Json> parse_multi($/;"	f	class:json11::Json	typeref:typename:std::vector<Json>
parse_number	src/libs/json11/json11.cpp	/^    Json parse_number() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:Json	file:
parse_number	src/master/head/json11.cpp	/^    Json parse_number() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:Json	file:
parse_string	src/libs/json11/json11.cpp	/^    string parse_string() {$/;"	f	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:string	file:
parse_string	src/master/head/json11.cpp	/^    string parse_string() {$/;"	f	struct:json11::__anon36d798650111::JsonParser	typeref:typename:string	file:
peer_addr	src/master/master.proto	/^    repeated string peer_addr = 3;   \/\/ regiond的副本地址(不含leader)$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
peer_addr	src/server/master.proto	/^    repeated string peer_addr = 3;   \/\/ regiond的副本地址(不含leader)$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
pidb	CMakeLists.txt	/^add_library(pidb SHARED "")$/;"	t
pidb	CMakeLists.txt	/^project(pidb C CXX)$/;"	p
pidb	client/pidb.pb.cc	/^namespace pidb {$/;"	n	file:
pidb	client/pidb.pb.h	/^namespace pidb {$/;"	n
pidb	client/pidb.proto	/^package pidb;$/;"	p
pidb	demo/pidb.pb.cc	/^namespace pidb {$/;"	n	file:
pidb	demo/pidb.pb.h	/^namespace pidb {$/;"	n
pidb	demo/pidb.proto	/^package pidb;$/;"	p
pidb	demo/server.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/include/pidb/options.h	/^namespace pidb {$/;"	n
pidb	src/include/pidb/status.h	/^namespace pidb {$/;"	n
pidb	src/master/head/guard_dog.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/master/head/guard_dog.h	/^namespace  pidb{$/;"	n
pidb	src/master/head/master.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/master/head/master.h	/^namespace  pidb{$/;"	n
pidb	src/master/head/raft_manage.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/master/head/raft_manage.h	/^namespace  pidb{$/;"	n
pidb	src/master/head/route_table.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/master/head/route_table.h	/^namespace  pidb{$/;"	n
pidb	src/master/head/store_heartbeat.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/master/head/store_heartbeat.h	/^namespace  pidb{$/;"	n
pidb	src/master/master.proto	/^package pidb;$/;"	p
pidb	src/server/context_cache.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/server/context_cache.h	/^namespace pidb {$/;"	n
pidb	src/server/master.proto	/^package pidb;$/;"	p
pidb	src/server/master_service_impl.cpp	/^namespace pidb {$/;"	n	file:
pidb	src/server/master_service_impl.h	/^namespace pidb {$/;"	n
pidb	src/server/pidb.proto	/^package pidb;$/;"	p
pidb	src/server/pidb_service_impl.cpp	/^namespace pidb {$/;"	n	file:
pidb	src/server/pidb_service_impl.h	/^namespace pidb{$/;"	n
pidb	src/server/raftnode.cpp	/^namespace pidb {$/;"	n	file:
pidb	src/server/raftnode.h	/^namespace pidb$/;"	n
pidb	src/server/remote_file_send.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/server/remote_file_send.h	/^namespace pidb{$/;"	n
pidb	src/server/route_table.cpp	/^namespace pidb{$/;"	n	file:
pidb	src/server/route_table.h	/^namespace  pidb{$/;"	n
pidb	src/server/server.cpp	/^namespace pidb {$/;"	n	file:
pidb	src/server/server.h	/^namespace pidb{$/;"	n
pidb	src/server/shareddb.h	/^namespace  pidb$/;"	n
pidb	src/util/status.cc	/^namespace pidb {$/;"	n	file:
pidb_server	CMakeLists.txt	/^add_executable(pidb_server src\/server\/main.cpp)$/;"	t
port	src/include/pidb/options.h	/^        int32_t port;$/;"	m	struct:pidb::RaftOption	typeref:typename:int32_t
port	src/include/pidb/options.h	/^        int32_t port;$/;"	m	struct:pidb::ServerOption	typeref:typename:int32_t
port	src/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	src/port/port_stdcxx.h	/^namespace port {$/;"	n	namespace:leveldb
port_	src/server/raftnode.h	/^    const int32_t port_;$/;"	m	class:pidb::RaftNode	typeref:typename:const int32_t
port_	src/server/server.h	/^	int32_t port_;$/;"	m	class:pidb::Server	typeref:typename:int32_t
protobuf	client/pidb.pb.cc	/^namespace protobuf {$/;"	n	namespace:google	file:
protobuf	client/pidb.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf	demo/pidb.pb.cc	/^namespace protobuf {$/;"	n	namespace:google	file:
protobuf	demo/pidb.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf_AssignDescriptors	client/pidb.pb.cc	/^void protobuf_AssignDescriptors() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_AssignDescriptors	demo/pidb.pb.cc	/^void protobuf_AssignDescriptors() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_AssignDescriptorsOnce	client/pidb.pb.cc	/^void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_AssignDescriptorsOnce	demo/pidb.pb.cc	/^void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_RegisterTypes	client/pidb.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_RegisterTypes	demo/pidb.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:protobuf_pidb_2eproto	typeref:typename:void
protobuf_pidb_2eproto	client/pidb.pb.cc	/^namespace protobuf_pidb_2eproto {$/;"	n	file:
protobuf_pidb_2eproto	client/pidb.pb.h	/^namespace protobuf_pidb_2eproto {$/;"	n
protobuf_pidb_2eproto	demo/pidb.pb.cc	/^namespace protobuf_pidb_2eproto {$/;"	n	file:
protobuf_pidb_2eproto	demo/pidb.pb.h	/^namespace protobuf_pidb_2eproto {$/;"	n
r_	src/master/head/route_table.h	/^	RouteTable* r_;$/;"	m	struct:pidb::CheckRAlive	typeref:typename:RouteTable *
raft	src/README.md	/^## raft$/;"	s	chapter:server目录
raft_	src/server/raftnode.h	/^         RaftNode* raft_;$/;"	m	class:pidb::RaftTimer	typeref:typename:RaftNode *
raft_conf	src/master/master.proto	/^    optional string raft_conf = 3;   \/\/ raft组配置信息$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
raft_conf	src/master/master.proto	/^    optional string raft_conf =5;     \/\/ 返回对应region的raft配置$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
raft_conf	src/master/master.proto	/^    required string raft_conf = 3;    \/\/ 老region的让raft组配置$/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
raft_conf	src/server/master.proto	/^    optional string raft_conf = 3;   \/\/ raft组配置信息$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
raft_conf	src/server/master.proto	/^    optional string raft_conf =5;     \/\/ 返回对应region的raft配置$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
raft_conf	src/server/master.proto	/^    required string raft_conf = 3;    \/\/ 老region的让raft组配置$/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
raft_copy_num	src/master/head/master.h	/^    int raft_copy_num;         \/\/ 默认最大raft副本数$/;"	m	struct:pidb::MasterArg	typeref:typename:int
raft_copy_num_	src/master/head/master.h	/^    int raft_copy_num_;  \/\/ raft组默认的最大副本数$/;"	m	class:pidb::Master	typeref:typename:int
raft_group	src/master/master.proto	/^    optional string raft_group = 4;   \/\/ 返回对应region的raft组名$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
raft_group	src/master/master.proto	/^    required string raft_group = 2;   \/\/ region所在raft组名$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
raft_group	src/master/master.proto	/^    required string raft_group = 2;   \/\/ region所在raft组名$/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
raft_group	src/master/master.proto	/^    required string raft_group = 2;   \/\/ 老region所在raft组名 $/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
raft_group	src/master/master.proto	/^    required string raft_group = 2;  \/\/ 组名$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
raft_group	src/server/master.proto	/^    optional string raft_group = 4;   \/\/ 返回对应region的raft组名$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
raft_group	src/server/master.proto	/^    required string raft_group = 2;   \/\/ region所在raft组名$/;"	f	message:pidb.PiDBRegionRequest	typeref:typename:string
raft_group	src/server/master.proto	/^    required string raft_group = 2;   \/\/ region所在raft组名$/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
raft_group	src/server/master.proto	/^    required string raft_group = 2;   \/\/ 老region所在raft组名 $/;"	f	message:pidb.PiDBPullRequest	typeref:typename:string
raft_group	src/server/master.proto	/^    required string raft_group = 2;  \/\/ 组名$/;"	f	message:pidb.PiDBRaftManageRequest	typeref:typename:string
raft_group_	src/master/head/route_table.h	/^		string raft_group_;   \/\/ 所属raft组名$/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:string
raft_timer_	src/server/raftnode.h	/^    RaftHeartbeatTimer raft_timer_;$/;"	m	class:pidb::RaftNode	typeref:typename:RaftHeartbeatTimer
range	src/server/raftnode.h	/^        Range * range;$/;"	m	struct:pidb::RaftNode::SnapshotHandle	typeref:typename:Range *
range_	src/server/raftnode.h	/^    Range range_;$/;"	m	class:pidb::RaftNode	typeref:typename:Range
read	demo/pidb.pb.cc	/^void PiDBService::read(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
read	demo/pidb.pb.cc	/^void PiDBService_Stub::read(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
read	demo/pidb.proto	/^	rpc read(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
read	demo/server.cpp	/^    void read(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void	file:
read	demo/server.cpp	/^    void read(const PiDBRequest *request, PiDBResponse* response,$/;"	f	class:pidb::Data	typeref:typename:void	file:
redirect	client/pidb.pb.h	/^inline const ::std::string& PiDBResponse::redirect() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
redirect	client/pidb.proto	/^	optional string redirect = 4;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
redirect	demo/pidb.pb.h	/^inline const ::std::string& PiDBResponse::redirect() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::std::string &
redirect	demo/pidb.proto	/^	optional string redirect = 4;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
redirect	demo/server.cpp	/^    void redirect(PiDBResponse* response) {$/;"	f	class:pidb::Data	typeref:typename:void	file:
redirect	src/master/master.proto	/^    optional string redirect = 2;     \/\/ master的leader更替$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
redirect	src/master/master.proto	/^    optional string redirect = 2;     \/\/ master的leader更替$/;"	f	message:pidb.PiDBStoreResponse	typeref:typename:string
redirect	src/master/master.proto	/^    optional string redirect = 2;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBPullResponse	typeref:typename:string
redirect	src/master/master.proto	/^    optional string redirect = 2;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:string
redirect	src/master/master.proto	/^    optional string redirect = 3;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBSplitResponse	typeref:typename:string
redirect	src/server/master.proto	/^    optional string redirect = 2;     \/\/ master的leader更替$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:string
redirect	src/server/master.proto	/^    optional string redirect = 2;     \/\/ master的leader更替$/;"	f	message:pidb.PiDBStoreResponse	typeref:typename:string
redirect	src/server/master.proto	/^    optional string redirect = 2;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBPullResponse	typeref:typename:string
redirect	src/server/master.proto	/^    optional string redirect = 2;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:string
redirect	src/server/master.proto	/^    optional string redirect = 3;  \/\/ master的leader更替 $/;"	f	message:pidb.PiDBSplitResponse	typeref:typename:string
redirect	src/server/pidb.proto	/^	optional string redirect = 4;$/;"	f	message:pidb.PiDBResponse	typeref:typename:string
redirect	src/server/raftnode.cpp	/^    void RaftNode::redirect(PiDBResponse *response) {$/;"	f	class:pidb::RaftNode	typeref:typename:void
region_heart	src/master/head/master.h	/^    int region_heart;          \/\/ region心跳间隔（s）$/;"	m	struct:pidb::MasterArg	typeref:typename:int
region_num	src/master/master.proto	/^    optional int32 region_num = 2;    \/\/ store上的region数量$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:int32
region_num	src/server/master.proto	/^    optional int32 region_num = 2;    \/\/ store上的region数量$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:int32
region_num_	src/master/head/store_heartbeat.h	/^		int region_num_;      \/\/ store上的region数量$/;"	m	struct:pidb::StoreHeartbeat::StoreInfo	typeref:typename:int
registerRaftNode	src/server/server.cpp	/^    Status Server::registerRaftNode(const RaftOption &option,const Range &range) {$/;"	f	class:pidb::Server	typeref:typename:Status
registerRaftNode	src/server/server.cpp	/^    Status Server::registerRaftNode(const pidb::RaftOption &option, const pidb::Range &range,$/;"	f	class:pidb::Server	typeref:typename:Status
release_key	client/pidb.pb.h	/^inline ::std::string* PiDBOperator::release_key() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::std::string *
release_key	client/pidb.pb.h	/^inline ::std::string* PiDBRequest::release_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
release_key	demo/pidb.pb.h	/^inline ::std::string* PiDBRequest::release_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
release_message	client/pidb.pb.h	/^inline ::std::string* Success::release_message() {$/;"	f	class:pidb::Success	typeref:typename:::std::string *
release_new_value	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_new_value	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_old_value	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_old_value	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_redirect	client/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_redirect	demo/pidb.pb.h	/^inline ::std::string* PiDBResponse::release_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:::std::string *
release_start	client/pidb.pb.h	/^inline ::std::string* PiDBIterator::release_start() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::std::string *
release_stop	client/pidb.pb.h	/^inline ::std::string* PiDBIterator::release_stop() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:::std::string *
release_value	client/pidb.pb.h	/^inline ::std::string* PiDBOperator::release_value() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:::std::string *
release_value	client/pidb.pb.h	/^inline ::std::string* PiDBRequest::release_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
release_value	demo/pidb.pb.h	/^inline ::std::string* PiDBRequest::release_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:::std::string *
remote_addr_	src/server/remote_file_send.h	/^    std::string remote_addr_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:std::string
rep_	src/port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer	typeref:typename:void *
rep_	src/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer	typeref:typename:intptr_t
request	demo/server.cpp	/^	const PiDBRequest* request() const {return _request;}$/;"	f	class:pidb::DataClosure	typeref:typename:const PiDBRequest *	file:
request	src/master/head/master.h	/^    const PiDBClientRequest* request() const { return _request; }$/;"	f	class:pidb::ClientClosure	typeref:typename:const PiDBClientRequest *
request	src/master/head/master.h	/^    const PiDBRegionRequest* request() const { return request_; }$/;"	f	class:pidb::RegionClosure	typeref:typename:const PiDBRegionRequest *
request	src/master/head/master.h	/^    const PiDBSplitRequest* request() const { return request_; }$/;"	f	class:pidb::SplitClosure	typeref:typename:const PiDBSplitRequest *
request	src/master/head/master.h	/^    const PiDBStoreRequest* request() const { return request_; }$/;"	f	class:pidb::StoreClosure	typeref:typename:const PiDBStoreRequest *
request	src/server/raftnode.h	/^	const PiDBRequest* request() const {return request_;}$/;"	f	class:pidb::RaftNodeClosure	typeref:typename:const PiDBRequest *
request_	src/master/head/master.h	/^    const PiDBRegionRequest* request_;$/;"	m	class:pidb::RegionClosure	typeref:typename:const PiDBRegionRequest *
request_	src/master/head/master.h	/^    const PiDBSplitRequest* request_;$/;"	m	class:pidb::SplitClosure	typeref:typename:const PiDBSplitRequest *
request_	src/master/head/master.h	/^    const PiDBStoreRequest* request_;$/;"	m	class:pidb::StoreClosure	typeref:typename:const PiDBStoreRequest *
request_	src/server/raftnode.h	/^	const PiDBRequest* request_;$/;"	m	class:pidb::RaftNodeClosure	typeref:typename:const PiDBRequest *
response	demo/server.cpp	/^	PiDBResponse* response() const {return _response;}$/;"	f	class:pidb::DataClosure	typeref:typename:PiDBResponse *	file:
response	src/master/head/master.h	/^    PiDBClientResponse* response() const { return _response; }$/;"	f	class:pidb::ClientClosure	typeref:typename:PiDBClientResponse *
response	src/master/head/master.h	/^    PiDBRegionResponse* response() const { return response_; }$/;"	f	class:pidb::RegionClosure	typeref:typename:PiDBRegionResponse *
response	src/master/head/master.h	/^    PiDBSplitResponse* response() const { return response_; }$/;"	f	class:pidb::SplitClosure	typeref:typename:PiDBSplitResponse *
response	src/master/head/master.h	/^    PiDBStoreResponse* response() const { return response_; }$/;"	f	class:pidb::StoreClosure	typeref:typename:PiDBStoreResponse *
response	src/server/raftnode.h	/^	PiDBResponse* response() const {return response_;}$/;"	f	class:pidb::RaftNodeClosure	typeref:typename:PiDBResponse *
response	src/server/server.h	/^    PiDBResponse* response() const {return response_;}$/;"	f	class:pidb::ServerClosure	typeref:typename:PiDBResponse *
response_	src/master/head/master.h	/^    PiDBRegionResponse* response_;$/;"	m	class:pidb::RegionClosure	typeref:typename:PiDBRegionResponse *
response_	src/master/head/master.h	/^    PiDBSplitResponse* response_;$/;"	m	class:pidb::SplitClosure	typeref:typename:PiDBSplitResponse *
response_	src/master/head/master.h	/^    PiDBStoreResponse* response_;$/;"	m	class:pidb::StoreClosure	typeref:typename:PiDBStoreResponse *
response_	src/server/raftnode.h	/^	PiDBResponse* response_;$/;"	m	class:pidb::RaftNodeClosure	typeref:typename:PiDBResponse *
response_	src/server/server.h	/^    PiDBResponse* response_;$/;"	m	class:pidb::ServerClosure	typeref:typename:PiDBResponse *
rm_	src/master/head/master.h	/^    RaftManage* rm_;  \/\/ 用于raft节点调度$/;"	m	class:pidb::Master	typeref:typename:RaftManage *
route_table_	src/master/head/route_table.h	/^	std::vector<RouteInfo> route_table_;  \/\/ 存放整个路由表$/;"	m	class:pidb::RouteTable	typeref:typename:std::vector<RouteInfo>
route_table_bad_	src/master/head/master.h	/^    RouteTable* route_table_bad_;       \/\/ 非正常路由表$/;"	m	class:pidb::Master	typeref:typename:RouteTable *
route_table_ok_	src/master/head/master.h	/^    RouteTable* route_table_ok_;        \/\/ 正常路由表$/;"	m	class:pidb::Master	typeref:typename:RouteTable *
router_	src/server/route_table.h	/^    std::map<std::string,Record> router_; \/\/ limitkey -> smallest,regionGrou$/;"	m	class:pidb::RouteTable	typeref:typename:std::map<std::string,Record>
routers_	src/server/route_table.h	/^    std::vector<Record> routers_;$/;"	m	class:pidb::RouteTable	typeref:typename:std::vector<Record>
rtb_path	src/master/head/master.h	/^    const string& rtb_path;    \/\/ bad路由表的相对路径$/;"	m	struct:pidb::MasterArg	typeref:typename:const string &
rto_path	src/master/head/master.h	/^    const string& rto_path;    \/\/ ok路由表的相对路径$/;"	m	struct:pidb::MasterArg	typeref:typename:const string &
run	src/server/raftnode.cpp	/^    void RaftHeartbeatTimer::run() {$/;"	f	class:pidb::RaftHeartbeatTimer	typeref:typename:void
run	src/server/server.cpp	/^    void HeartbeatTimer::run() {$/;"	f	class:pidb::HeartbeatTimer	typeref:typename:void
runcmd	build_in_travis_ci.sh	/^runcmd(){$/;"	f
s	src/master/head/store_heartbeat.cpp	/^StoreHeartbeat* StoreHeartbeat::s = new StoreHeartbeat;$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:StoreHeartbeat *
s	src/master/head/store_heartbeat.h	/^	static StoreHeartbeat* s;$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:StoreHeartbeat *
s_	src/server/server.h	/^    Status s_;$/;"	m	class:pidb::ServerClosure	typeref:typename:Status
save_snapshot	demo/server.cpp	/^    static void *save_snapshot(void* arg) {$/;"	f	class:pidb::Data	typeref:typename:void *	file:
save_snapshot	src/server/raftnode.cpp	/^    void *RaftNode::save_snapshot(void *arg) {$/;"	f	class:pidb::RaftNode	typeref:typename:void *
schema	client/pidb.pb.h	/^  static const ::google::protobuf::internal::ParseTable schema[8];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTable[8]
schema	demo/pidb.pb.h	/^  static const ::google::protobuf::internal::ParseTable schema[2];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTable[2]
scoped_db	demo/server.cpp	/^    typedef scoped_refptr<SharedDB> scoped_db;$/;"	t	class:pidb::Data	typeref:typename:scoped_refptr<SharedDB>	file:
scoped_db	src/server/shareddb.h	/^typedef scoped_refptr<SharedDB> scoped_db;$/;"	t	namespace:pidb	typeref:typename:scoped_refptr<SharedDB>
sender	demo/client.cpp	/^static void* sender(void* arg) {$/;"	f	typeref:typename:void *	file:
sender	src/master/test_client.cpp	/^static void* sender(void* arg) {$/;"	f	typeref:typename:void *	file:
serialization_table	client/pidb.pb.h	/^  static const ::google::protobuf::internal::SerializationTable serialization_table[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::SerializationTable[]
serialization_table	demo/pidb.pb.h	/^  static const ::google::protobuf::internal::SerializationTable serialization_table[];$/;"	m	struct:protobuf_pidb_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::SerializationTable[]
server	src/master/CMakeLists.txt	/^add_executable(server "${PROJECT_SOURCE_DIR}\/master_main.cpp")$/;"	t
server_	src/server/master_service_impl.h	/^        Server *server_;$/;"	m	class:pidb::MasterServiceImpl	typeref:typename:Server *
server_	src/server/pidb_service_impl.h	/^    Server *server_;$/;"	m	class:pidb::PiDBServiceImpl	typeref:typename:Server *
server_	src/server/server.h	/^    std::shared_ptr<Server> server_;$/;"	m	class:pidb::ServerTimer	typeref:typename:std::shared_ptr<Server>
server目录	src/README.md	/^# server目录$/;"	c
set_allocated_key	client/pidb.pb.h	/^inline void PiDBOperator::set_allocated_key(::std::string* key) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_allocated_key	client/pidb.pb.h	/^inline void PiDBRequest::set_allocated_key(::std::string* key) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_allocated_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_allocated_key(::std::string* key) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_allocated_message	client/pidb.pb.h	/^inline void Success::set_allocated_message(::std::string* message) {$/;"	f	class:pidb::Success	typeref:typename:void
set_allocated_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_allocated_new_value(::std::string* new_value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_allocated_new_value(::std::string* new_value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_allocated_old_value(::std::string* old_value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_allocated_old_value(::std::string* old_value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_allocated_redirect(::std::string* redirect) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_allocated_redirect(::std::string* redirect) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_allocated_start	client/pidb.pb.h	/^inline void PiDBIterator::set_allocated_start(::std::string* start) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_allocated_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_allocated_stop(::std::string* stop) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_allocated_value	client/pidb.pb.h	/^inline void PiDBOperator::set_allocated_value(::std::string* value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_allocated_value	client/pidb.pb.h	/^inline void PiDBRequest::set_allocated_value(::std::string* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_allocated_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_allocated_value(::std::string* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_has_id	client/pidb.pb.h	/^inline void PiDBIterator::set_has_id() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_has_id	client/pidb.pb.h	/^inline void PiDBSnapshot::set_has_id() {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
set_has_key	client/pidb.pb.h	/^inline void PiDBOperator::set_has_key() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_has_key	client/pidb.pb.h	/^inline void PiDBRequest::set_has_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_has_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_has_key() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_has_message	client/pidb.pb.h	/^inline void Success::set_has_message() {$/;"	f	class:pidb::Success	typeref:typename:void
set_has_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_has_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_has_new_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_has_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_has_old_value() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_op	client/pidb.pb.h	/^inline void PiDBOperator::set_has_op() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_has_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_has_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_has_redirect() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_start	client/pidb.pb.h	/^inline void PiDBIterator::set_has_start() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_has_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_has_stop() {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_has_success	client/pidb.pb.h	/^inline void PiDBResponse::set_has_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_success	client/pidb.pb.h	/^inline void Success::set_has_success() {$/;"	f	class:pidb::Success	typeref:typename:void
set_has_success	demo/pidb.pb.h	/^inline void PiDBResponse::set_has_success() {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_has_value	client/pidb.pb.h	/^inline void PiDBOperator::set_has_value() {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_has_value	client/pidb.pb.h	/^inline void PiDBRequest::set_has_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_has_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_has_value() {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_id	client/pidb.pb.h	/^inline void PiDBIterator::set_id(::google::protobuf::int32 value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_id	client/pidb.pb.h	/^inline void PiDBSnapshot::set_id(::google::protobuf::int32 value) {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBOperator::set_key(::std::string&& value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBOperator::set_key(const ::std::string& value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBOperator::set_key(const char* value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBOperator::set_key(const char* value, size_t size) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBRequest::set_key(::std::string&& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBRequest::set_key(const ::std::string& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBRequest::set_key(const char* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	client/pidb.pb.h	/^inline void PiDBRequest::set_key(const char* value, size_t size) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_key(::std::string&& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_key(const ::std::string& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_key(const char* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_key	demo/pidb.pb.h	/^inline void PiDBRequest::set_key(const char* value, size_t size) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_message	client/pidb.pb.h	/^inline void Success::set_message(::std::string&& value) {$/;"	f	class:pidb::Success	typeref:typename:void
set_message	client/pidb.pb.h	/^inline void Success::set_message(const ::std::string& value) {$/;"	f	class:pidb::Success	typeref:typename:void
set_message	client/pidb.pb.h	/^inline void Success::set_message(const char* value) {$/;"	f	class:pidb::Success	typeref:typename:void
set_message	client/pidb.pb.h	/^inline void Success::set_message(const char* value, size_t size) {$/;"	f	class:pidb::Success	typeref:typename:void
set_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_new_value(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	client/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_new_value(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_new_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_new_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_old_value(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	client/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_old_value(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_old_value	demo/pidb.pb.h	/^inline void PiDBResponse::set_old_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_op	client/pidb.pb.h	/^inline void PiDBOperator::set_op(::google::protobuf::int32 value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_redirect(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	client/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_redirect(::std::string&& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const ::std::string& value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const char* value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_redirect	demo/pidb.pb.h	/^inline void PiDBResponse::set_redirect(const char* value, size_t size) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_start	client/pidb.pb.h	/^inline void PiDBIterator::set_start(::std::string&& value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_start	client/pidb.pb.h	/^inline void PiDBIterator::set_start(const ::std::string& value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_start	client/pidb.pb.h	/^inline void PiDBIterator::set_start(const char* value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_start	client/pidb.pb.h	/^inline void PiDBIterator::set_start(const char* value, size_t size) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_stop(::std::string&& value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_stop(const ::std::string& value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_stop(const char* value) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_stop	client/pidb.pb.h	/^inline void PiDBIterator::set_stop(const char* value, size_t size) {$/;"	f	class:pidb::PiDBIterator	typeref:typename:void
set_success	client/pidb.pb.h	/^inline void PiDBResponse::set_success(bool value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_success	client/pidb.pb.h	/^inline void Success::set_success(bool value) {$/;"	f	class:pidb::Success	typeref:typename:void
set_success	demo/pidb.pb.h	/^inline void PiDBResponse::set_success(bool value) {$/;"	f	class:pidb::PiDBResponse	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBOperator::set_value(::std::string&& value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBOperator::set_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBOperator::set_value(const char* value) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBOperator::set_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBOperator	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBRequest::set_value(::std::string&& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBRequest::set_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBRequest::set_value(const char* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	client/pidb.pb.h	/^inline void PiDBRequest::set_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_value(::std::string&& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_value(const ::std::string& value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_value(const char* value) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
set_value	demo/pidb.pb.h	/^inline void PiDBRequest::set_value(const char* value, size_t size) {$/;"	f	class:pidb::PiDBRequest	typeref:typename:void
shape	src/libs/json11/json11.hpp	/^    typedef std::initializer_list<std::pair<std::string, Type>> shape;$/;"	t	class:json11::Json	typeref:typename:std::initializer_list<std::pair<std::string,Type>>
shape	src/master/head/json11.hpp	/^    typedef std::initializer_list<std::pair<std::string, Type>> shape;$/;"	t	class:json11::Json	typeref:typename:std::initializer_list<std::pair<std::string,Type>>
shutdown	demo/server.cpp	/^    void shutdown() {$/;"	f	class:pidb::Data	typeref:typename:void	file:
shutdown	src/master/head/master.h	/^    void shutdown() {if (node_) node_->shutdown(NULL);}$/;"	f	class:pidb::Master	typeref:typename:void
shutdown	src/server/raftnode.h	/^    void shutdown(){$/;"	f	class:pidb::RaftNode	typeref:typename:void
smallest	src/server/route_table.h	/^        std::string smallest;$/;"	m	struct:pidb::RouteTable::Record	typeref:typename:std::string
snapshot	client/pidb.proto	/^	optional PiDBSnapshot snapshot = 3;  \/\/读清求的snapshot$/;"	f	message:pidb.PiDBRequest	typeref:typename:PiDBSnapshot
snapshot	src/server/pidb.proto	/^	optional PiDBSnapshot snapshot = 3;  \/\/读清求的snapshot$/;"	f	message:pidb.PiDBRequest	typeref:typename:PiDBSnapshot
snapshot_	src/server/context_cache.h	/^        const leveldb::Snapshot* snapshot_;$/;"	m	class:pidb::SnapshotContext	typeref:typename:const leveldb::Snapshot *
snapshots_	src/server/server.h	/^    pidb::ContextCache<pidb::SnapshotContext> snapshots_;$/;"	m	class:pidb::Server	typeref:typename:pidb::ContextCache<pidb::SnapshotContext>
snprintf	src/libs/json11/json11.hpp	/^            #define snprintf /;"	d
snprintf	src/master/head/json11.hpp	/^            #define snprintf /;"	d
source_path_	src/server/remote_file_send.h	/^    std::string source_path_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:std::string
split_key	src/master/master.proto	/^    required string split_key = 3;    \/\/ region根据此key分裂  $/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
split_key	src/server/master.proto	/^    required string split_key = 3;    \/\/ region根据此key分裂  $/;"	f	message:pidb.PiDBSplitRequest	typeref:typename:string
st_	src/server/remote_file_send.h	/^    leveldb::Status st_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:leveldb::Status
st_path	src/master/head/master.h	/^    const string& st_path;     \/\/ store信息表的相对路径$/;"	m	struct:pidb::MasterArg	typeref:typename:const string &
start	client/pidb.pb.h	/^inline const ::std::string& PiDBIterator::start() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const::std::string &
start	client/pidb.proto	/^ 	optional string start = 2;   \/\/ Iterator的起始位置   暂时为 optional$/;"	f	message:pidb.PiDBIterator	typeref:typename:string
start	demo/server.cpp	/^    int start() {$/;"	f	class:pidb::Data	typeref:typename:int	file:
start	src/server/pidb.proto	/^	optional string start = 2;   \/\/ Iterator的起始位置   暂时为 optional$/;"	f	message:pidb.PiDBIterator	typeref:typename:string
start	src/server/raftnode.cpp	/^    Status RaftNode::start() {$/;"	f	class:pidb::RaftNode	typeref:typename:Status
start	src/server/raftnode.h	/^    Slice start;$/;"	m	struct:pidb::Range	typeref:typename:Slice
start	src/server/remote_file_send.cpp	/^    void RemoteFileSend::start() {$/;"	f	class:pidb::RemoteFileSend	typeref:typename:void
state_	src/include/pidb/status.h	/^        const char* state_;$/;"	m	class:pidb::Status	typeref:typename:const char *
state_	src/master/head/route_table.h	/^		int state_;  $/;"	m	struct:pidb::RouteTable::RouteInfo	typeref:typename:int
static_descriptor_initializer	client/pidb.pb.cc	/^} static_descriptor_initializer;$/;"	v	namespace:protobuf_pidb_2eproto	typeref:struct:protobuf_pidb_2eproto::StaticDescriptorInitializer
static_descriptor_initializer	demo/pidb.pb.cc	/^} static_descriptor_initializer;$/;"	v	namespace:protobuf_pidb_2eproto	typeref:struct:protobuf_pidb_2eproto::StaticDescriptorInitializer
static_null	src/libs/json11/json11.cpp	/^static const Json & static_null() {$/;"	f	namespace:json11	typeref:typename:const Json &	file:
static_null	src/master/head/json11.cpp	/^static const Json & static_null() {$/;"	f	namespace:json11	typeref:typename:const Json &	file:
statics	src/libs/json11/json11.cpp	/^static const Statics & statics() {$/;"	f	namespace:json11	typeref:typename:const Statics &	file:
statics	src/master/head/json11.cpp	/^static const Statics & statics() {$/;"	f	namespace:json11	typeref:typename:const Statics &	file:
status	src/server/remote_file_send.h	/^    const leveldb::Status &status() const {return st_;}$/;"	f	class:pidb::RemoteFileSend	typeref:typename:const leveldb::Status &
stop	client/pidb.pb.h	/^inline const ::std::string& PiDBIterator::stop() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const::std::string &
stop	client/pidb.proto	/^	optional string stop  = 3;   \/\/ Iterator的终点位置$/;"	f	message:pidb.PiDBIterator	typeref:typename:string
stop	src/server/pidb.proto	/^	optional string stop  = 3;   \/\/ Iterator的终点位置$/;"	f	message:pidb.PiDBIterator	typeref:typename:string
store_addr	src/master/master.proto	/^    required string store_addr = 1;   \/\/ store的地址$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:string
store_addr	src/server/master.proto	/^    required string store_addr = 1;   \/\/ store的地址$/;"	f	message:pidb.PiDBStoreRequest	typeref:typename:string
store_heart	src/master/head/master.h	/^    int store_heart;           \/\/ store心跳间隔（s）$/;"	m	struct:pidb::MasterArg	typeref:typename:int
store_table_	src/master/head/master.h	/^    StoreHeartbeat* store_table_; \/\/ stroe信息表$/;"	m	class:pidb::Master	typeref:typename:StoreHeartbeat *
store_table_	src/master/head/store_heartbeat.h	/^	std::map<string, StoreInfo> store_table_; \/\/ 存放所有store信息，string是store的addr$/;"	m	class:pidb::StoreHeartbeat	typeref:typename:std::map<string,StoreInfo>
str	src/libs/json11/json11.cpp	/^    const string &str;$/;"	m	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:const string &	file:
str	src/master/head/json11.cpp	/^    const string &str;$/;"	m	struct:json11::__anon36d798650111::JsonParser	typeref:typename:const string &	file:
strategy	src/libs/json11/json11.cpp	/^    const JsonParse strategy;$/;"	m	struct:json11::__anon65ab184d0111::JsonParser	typeref:typename:const JsonParse	file:
strategy	src/master/head/json11.cpp	/^    const JsonParse strategy;$/;"	m	struct:json11::__anon36d798650111::JsonParser	typeref:typename:const JsonParse	file:
stream_	src/server/remote_file_send.h	/^    brpc::StreamId stream_;$/;"	m	class:pidb::RemoteFileSend	typeref:typename:brpc::StreamId
string_value	src/libs/json11/json11.cpp	/^    const string &string_value() const override { return m_value; }$/;"	f	class:json11::JsonString	typeref:typename:const string &	file:
string_value	src/libs/json11/json11.cpp	/^const string &            JsonValue::string_value()              const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const string &
string_value	src/libs/json11/json11.cpp	/^const string & Json::string_value()               const { return m_ptr->string_value(); }$/;"	f	class:json11::Json	typeref:typename:const string &
string_value	src/master/head/json11.cpp	/^    const string &string_value() const override { return m_value; }$/;"	f	class:json11::JsonString	typeref:typename:const string &	file:
string_value	src/master/head/json11.cpp	/^const string &            JsonValue::string_value()              const { return statics().empty_/;"	f	class:json11::JsonValue	typeref:typename:const string &
string_value	src/master/head/json11.cpp	/^const string & Json::string_value()               const { return m_ptr->string_value(); }$/;"	f	class:json11::Json	typeref:typename:const string &
success	client/pidb.pb.h	/^inline bool PiDBResponse::success() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
success	client/pidb.pb.h	/^inline bool Success::success() const {$/;"	f	class:pidb::Success	typeref:typename:bool
success	client/pidb.proto	/^	required bool success   = 1;$/;"	f	message:pidb.Success	typeref:typename:bool
success	client/pidb.proto	/^	required bool success = 1;$/;"	f	message:pidb.PiDBResponse	typeref:typename:bool
success	demo/pidb.pb.h	/^inline bool PiDBResponse::success() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:bool
success	demo/pidb.proto	/^	required bool success = 1;$/;"	f	message:pidb.PiDBResponse	typeref:typename:bool
success	src/master/master.proto	/^    required bool success = 1;        \/\/ client查询路由信息是否成功$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:bool
success	src/master/master.proto	/^    required bool success = 1;        \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBStoreResponse	typeref:typename:bool
success	src/master/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBPullResponse	typeref:typename:bool
success	src/master/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:bool
success	src/master/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBSplitResponse	typeref:typename:bool
success	src/server/master.proto	/^    required bool success = 1;        \/\/ client查询路由信息是否成功$/;"	f	message:pidb.PiDBClientResponse	typeref:typename:bool
success	src/server/master.proto	/^    required bool success = 1;        \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBStoreResponse	typeref:typename:bool
success	src/server/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBPullResponse	typeref:typename:bool
success	src/server/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBRegionResponse	typeref:typename:bool
success	src/server/master.proto	/^    required bool success = 1;     \/\/ 一个成功通信的标记$/;"	f	message:pidb.PiDBSplitResponse	typeref:typename:bool
success	src/server/pidb.proto	/^	required bool success   = 1;$/;"	f	message:pidb.Success	typeref:typename:bool
success	src/server/pidb.proto	/^	required bool success = 1;$/;"	f	message:pidb.PiDBFileResponse	typeref:typename:bool
success	src/server/pidb.proto	/^	required bool success = 1;$/;"	f	message:pidb.PiDBResponse	typeref:typename:bool
success_	client/pidb.pb.h	/^  bool success_;$/;"	m	class:pidb::PiDBResponse	typeref:typename:bool
success_	client/pidb.pb.h	/^  bool success_;$/;"	m	class:pidb::Success	typeref:typename:bool
success_	demo/pidb.pb.h	/^  bool success_;$/;"	m	class:pidb::PiDBResponse	typeref:typename:bool
swap	client/pidb.pb.h	/^  friend void swap(Empty& a, Empty& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBIterator& a, PiDBIterator& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBOperator& a, PiDBOperator& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBRequest& a, PiDBRequest& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBResponse& a, PiDBResponse& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBSnapshot& a, PiDBSnapshot& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(PiDBWriteBatch& a, PiDBWriteBatch& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	client/pidb.pb.h	/^  friend void swap(Success& a, Success& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	demo/pidb.pb.h	/^  friend void swap(PiDBRequest& a, PiDBRequest& b) {$/;"	f	namespace:pidb	typeref:typename:void
swap	demo/pidb.pb.h	/^  friend void swap(PiDBResponse& a, PiDBResponse& b) {$/;"	f	namespace:pidb	typeref:typename:void
t	src/libs/json11/json11.cpp	/^    const std::shared_ptr<JsonValue> t = make_shared<JsonBoolean>(true);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
t	src/master/head/json11.cpp	/^    const std::shared_ptr<JsonValue> t = make_shared<JsonBoolean>(true);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
test	src/libs/json11/Makefile	/^test: json11.cpp json11.hpp test.cpp$/;"	t
test	test/README.md	/^# test$/;"	c
test_main	src/master/CMakeLists.txt	/^add_executable(test_main "${PROJECT_SOURCE_DIR}\/test_main.cpp")$/;"	t
testtest	src/master/head/master.h	/^    void testtest(){$/;"	f	class:pidb::Master	typeref:typename:void
things_	src/master/head/guard_dog.h	/^    vector<vector<pair<bool(*)(void*), void*>>> things_;$/;"	m	class:pidb::GuardDog	typeref:typename:vector<vector<pair<bool (*)(void *),void * >>>
to_json	src/libs/json11/test.cpp	/^        Json to_json() const { return Json::array { x, y }; }$/;"	f	class:JSON11_TEST_CASE::Point	typeref:typename:Json	file:
to_json	src/master/head/route_table.h	/^		json11::Json to_json() const {$/;"	f	struct:pidb::RouteTable::RouteInfo	typeref:typename:json11::Json
to_json	src/master/head/store_heartbeat.h	/^		json11::Json to_json() const {$/;"	f	struct:pidb::StoreHeartbeat::StoreInfo	typeref:typename:json11::Json
to_json	src/server/route_table.h	/^        json11::Json to_json() const{$/;"	f	struct:pidb::RouteTable::Record	typeref:typename:json11::Json
type	src/libs/json11/json11.cpp	/^    Json::Type type() const override {$/;"	f	class:json11::Value	typeref:typename:Json::Type	file:
type	src/libs/json11/json11.cpp	/^Json::Type Json::type()                           const { return m_ptr->type();         }$/;"	f	class:json11::Json	typeref:typename:Json::Type
type	src/master/head/json11.cpp	/^    Json::Type type() const override {$/;"	f	class:json11::Value	typeref:typename:Json::Type	file:
type	src/master/head/json11.cpp	/^Json::Type Json::type()                           const { return m_ptr->type();         }$/;"	f	class:json11::Json	typeref:typename:Json::Type
uint16_t	src/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t	typeref:typename:unsigned short
uint32_t	src/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t	typeref:typename:unsigned int
uint64_t	src/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t	typeref:typename:unsigned long long
uint8_t	src/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t	typeref:typename:unsigned char
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::Empty	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBIterator	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBSnapshot	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	client/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::Success	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	demo/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	demo/pidb.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:pidb::PiDBResponse	typeref:typename:const::google::protobuf::UnknownFieldSet &
util	utils/README.md	/^# util$/;"	c
value	client/pidb.pb.h	/^inline const ::std::string& PiDBOperator::value() const {$/;"	f	class:pidb::PiDBOperator	typeref:typename:const::std::string &
value	client/pidb.pb.h	/^inline const ::std::string& PiDBRequest::value() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::std::string &
value	client/pidb.proto	/^	optional string value = 2;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
value	client/pidb.proto	/^    optional string value = 3;$/;"	f	message:pidb.PiDBOperator	typeref:typename:string
value	demo/pidb.pb.h	/^inline const ::std::string& PiDBRequest::value() const {$/;"	f	class:pidb::PiDBRequest	typeref:typename:const::std::string &
value	demo/pidb.proto	/^	optional string value = 2;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
value	src/server/pidb.proto	/^	optional string value = 2;$/;"	f	message:pidb.PiDBRequest	typeref:typename:string
value	src/server/pidb.proto	/^	optional string value = 3;$/;"	f	message:pidb.PiDBOperator	typeref:typename:string
write	demo/pidb.pb.cc	/^void PiDBService::write(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService	typeref:typename:void
write	demo/pidb.pb.cc	/^void PiDBService_Stub::write(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBService_Stub	typeref:typename:void
write	demo/pidb.proto	/^	rpc write(PiDBRequest) returns (PiDBResponse);$/;"	r	service:pidb.PiDBService	typeref:typename:PiDBResponse
write	demo/server.cpp	/^    void write(::google::protobuf::RpcController* controller,$/;"	f	class:pidb::PiDBServiceImpl	typeref:typename:void	file:
write	demo/server.cpp	/^    void write(const PiDBRequest* request,$/;"	f	class:pidb::Data	typeref:typename:void	file:
writebatch	client/pidb.pb.h	/^PiDBWriteBatch::writebatch() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const::google::protobuf::RepeatedPtrField<::pidb::PiDBOperator> &
writebatch	client/pidb.pb.h	/^inline const ::pidb::PiDBOperator& PiDBWriteBatch::writebatch(int index) const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:const::pidb::PiDBOperator &
writebatch_size	client/pidb.pb.h	/^inline int PiDBWriteBatch::writebatch_size() const {$/;"	f	class:pidb::PiDBWriteBatch	typeref:typename:int
writer	demo/server.cpp	/^        braft::SnapshotWriter* writer;$/;"	m	struct:pidb::Data::SnapshotArg	typeref:typename:braft::SnapshotWriter *	file:
writer	src/server/raftnode.h	/^        braft::SnapshotWriter* writer;$/;"	m	struct:pidb::RaftNode::SnapshotHandle	typeref:typename:braft::SnapshotWriter *
x	src/libs/json11/test.cpp	/^        int x;$/;"	m	class:JSON11_TEST_CASE::Point	typeref:typename:int	file:
y	src/libs/json11/test.cpp	/^        int y;$/;"	m	class:JSON11_TEST_CASE::Point	typeref:typename:int	file:
~ClientClosure	src/master/head/master.h	/^    ~ClientClosure() {}$/;"	f	class:pidb::ClientClosure
~ContextCache	src/server/context_cache.h	/^        virtual ~ContextCache() { map_.clear(); }$/;"	f	class:pidb::ContextCache
~Data	demo/server.cpp	/^    ~Data() {$/;"	f	class:pidb::Data	file:
~DataClosure	demo/server.cpp	/^	~DataClosure(){}$/;"	f	class:pidb::DataClosure	file:
~Empty	client/pidb.pb.cc	/^Empty::~Empty() {$/;"	f	class:pidb::Empty
~GuardDog	src/master/head/guard_dog.cpp	/^    GuardDog::~GuardDog(){$/;"	f	class:pidb::GuardDog
~IteratorContext	src/server/context_cache.h	/^        ~IteratorContext(){$/;"	f	class:pidb::IteratorContext
~JsonValue	src/libs/json11/json11.hpp	/^    virtual ~JsonValue() {}$/;"	f	class:json11::JsonValue
~JsonValue	src/master/head/json11.hpp	/^    virtual ~JsonValue() {}$/;"	f	class:json11::JsonValue
~Master	src/master/head/master.cpp	/^Master::~Master(){ $/;"	f	class:pidb::Master
~MasterServiceImpl	src/server/master_service_impl.h	/^        virtual ~MasterServiceImpl() {};$/;"	f	class:pidb::MasterServiceImpl
~PiDBIterator	client/pidb.pb.cc	/^PiDBIterator::~PiDBIterator() {$/;"	f	class:pidb::PiDBIterator
~PiDBOperator	client/pidb.pb.cc	/^PiDBOperator::~PiDBOperator() {$/;"	f	class:pidb::PiDBOperator
~PiDBRequest	client/pidb.pb.cc	/^PiDBRequest::~PiDBRequest() {$/;"	f	class:pidb::PiDBRequest
~PiDBRequest	demo/pidb.pb.cc	/^PiDBRequest::~PiDBRequest() {$/;"	f	class:pidb::PiDBRequest
~PiDBResponse	client/pidb.pb.cc	/^PiDBResponse::~PiDBResponse() {$/;"	f	class:pidb::PiDBResponse
~PiDBResponse	demo/pidb.pb.cc	/^PiDBResponse::~PiDBResponse() {$/;"	f	class:pidb::PiDBResponse
~PiDBService	client/pidb.pb.cc	/^PiDBService::~PiDBService() {}$/;"	f	class:pidb::PiDBService
~PiDBService	demo/pidb.pb.cc	/^PiDBService::~PiDBService() {}$/;"	f	class:pidb::PiDBService
~PiDBService_Stub	client/pidb.pb.cc	/^PiDBService_Stub::~PiDBService_Stub() {$/;"	f	class:pidb::PiDBService_Stub
~PiDBService_Stub	demo/pidb.pb.cc	/^PiDBService_Stub::~PiDBService_Stub() {$/;"	f	class:pidb::PiDBService_Stub
~PiDBSnapshot	client/pidb.pb.cc	/^PiDBSnapshot::~PiDBSnapshot() {$/;"	f	class:pidb::PiDBSnapshot
~PiDBWriteBatch	client/pidb.pb.cc	/^PiDBWriteBatch::~PiDBWriteBatch() {$/;"	f	class:pidb::PiDBWriteBatch
~RaftManage	src/master/head/raft_manage.h	/^    ~RaftManage(){};$/;"	f	class:pidb::RaftManage
~RaftNode	src/server/raftnode.h	/^    ~RaftNode() {$/;"	f	class:pidb::RaftNode
~RaftNodeClosure	src/server/raftnode.h	/^	~RaftNodeClosure(){}$/;"	f	class:pidb::RaftNodeClosure
~RegionClosure	src/master/head/master.h	/^    ~RegionClosure() {}$/;"	f	class:pidb::RegionClosure
~RouteInfo	src/master/head/route_table.h	/^		~RouteInfo() {}$/;"	f	struct:pidb::RouteTable::RouteInfo
~RouteTable	src/master/head/route_table.cpp	/^RouteTable::~RouteTable() {$/;"	f	class:pidb::RouteTable
~Server	src/server/server.h	/^    ~Server(){}$/;"	f	class:pidb::Server
~ServerClosure	src/server/server.h	/^    ~ServerClosure(){}$/;"	f	class:pidb::ServerClosure
~SharedDB	demo/server.cpp	/^        ~SharedDB() {$/;"	f	class:pidb::Data::SharedDB	file:
~SharedDB	src/server/shareddb.h	/^    ~SharedDB() {$/;"	f	class:pidb::SharedDB
~SnapshotContext	src/server/context_cache.h	/^        ~SnapshotContext() {$/;"	f	class:pidb::SnapshotContext
~SplitClosure	src/master/head/master.h	/^    ~SplitClosure() {}$/;"	f	class:pidb::SplitClosure
~Status	src/include/pidb/status.h	/^        ~Status() { delete[] state_; }$/;"	f	class:pidb::Status
~StoreClosure	src/master/head/master.h	/^    ~StoreClosure() {}$/;"	f	class:pidb::StoreClosure
~StoreInfo	src/master/head/store_heartbeat.h	/^		~StoreInfo() {}$/;"	f	struct:pidb::StoreHeartbeat::StoreInfo
~StreamReceiver	src/server/pidb_service_impl.cpp	/^        ~StreamReceiver(){$/;"	f	class:pidb::StreamReceiver	file:
~Success	client/pidb.pb.cc	/^Success::~Success() {$/;"	f	class:pidb::Success
一 server端	src/README.md	/^## 一 server端$/;"	s	chapter:server目录
关于client	README.md	/^## 关于client$/;"	s	chapter:PiDB distributed leveldb
关于测试	README.md	/^## 关于测试$/;"	s	chapter:PiDB distributed leveldb
关于测试	src/README.md	/^# 关于测试$/;"	c
关于测试	test/README.md	/^# 关于测试$/;"	c
所依赖的库	README.md	/^## 所依赖的库$/;"	s	chapter:PiDB distributed leveldb
第一个实例	README.md	/^## 第一个实例$/;"	s	chapter:PiDB distributed leveldb
